<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Prefabs>
    <Prefab xsi:type="MyObjectBuilder_PrefabDefinition">
      <Id Type="MyObjectBuilder_PrefabDefinition" Subtype="CM-Eon G1" />
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>120821455173916479</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>120821455173916479</Name>
          <PositionAndOrientation>
            <Position x="0" y="0" z="0" />
            <Forward x="0.49270618" y="0.432639956" z="0.7550255" />
            <Up x="-0.741704762" y="-0.2449764" z="0.624388337" />
            <Orientation>
              <X>0.783438</X>
              <Y>-0.513553858</Y>
              <Z>-0.09334383</Z>
              <W>0.337304324</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="4" y="4" z="-1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="2" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSide</SubtypeName>
              <EntityId>121183988562149961</EntityId>
              <Min x="0" y="2" z="-1" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="2" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>114648867357386062</EntityId>
              <Min x="1" y="2" z="3" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Right</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>100790990975481786</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.100000009</Height>
              <MaxSteerAngle>0.34906584</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>76940715468787771</EntityId>
              <Min x="-2" y="2" z="3" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Left</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>79810432239758528</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.100000009</Height>
              <MaxSteerAngle>0.34906584</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>95047116983998534</EntityId>
              <Min x="-2" y="2" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Left 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>114102468810549119</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.100000009</Height>
              <MaxSteerAngle>0.436332315</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>126488093104790236</EntityId>
              <Min x="1" y="2" z="0" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Right 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>76922156085370324</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.100000009</Height>
              <MaxSteerAngle>0.436332315</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.1</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="-2" y="2" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="3" y="2" z="5" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="1" y="2" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="2" y="2" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="-3" y="2" z="5" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>72613205083906076</EntityId>
              <Min x="-3" y="2" z="6" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Battery</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>1</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_BatteryBlock">
              <SubtypeName>SmallBlockBatteryBlock</SubtypeName>
              <EntityId>128299707675859391</EntityId>
              <Min x="1" y="2" z="6" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Battery 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <CurrentStoredPower>1</CurrentStoredPower>
              <ProducerEnabled>true</ProducerEnabled>
              <MaxStoredPower>0</MaxStoredPower>
              <SemiautoEnabled>false</SemiautoEnabled>
              <OnlyDischargeEnabled>false</OnlyDischargeEnabled>
              <ChargeMode>0</ChargeMode>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="-3" y="2" z="9" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorInvCorner2Base</SubtypeName>
              <Min x="3" y="2" z="9" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="2" y="2" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="1" y="2" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="-2" y="2" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="1" y="2" z="4" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="1" y="2" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="1" y="2" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="3" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="3" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="3" y="4" z="6" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="3" y="4" z="7" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="3" y="4" z="8" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="-3" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="-3" y="4" z="7" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="-3" y="4" z="8" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="-3" y="4" z="-1" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="3" y="4" z="-1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="-3" y="4" z="-2" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="3" y="4" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="-1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="-1" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="2" y="4" z="-2" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-2" y="4" z="-2" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="1" y="4" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeInverted</SubtypeName>
              <Min x="-1" y="4" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>SmallBlockCockpit</SubtypeName>
              <EntityId>74302488893903062</EntityId>
              <Min x="-1" y="4" z="-1" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Cockpit

[Artificial Horizon - Text Surface Config]
Show on screen 0=false
Show on screen 1=false
Show on screen 2=true
Show on screen 3=false

[trailer]
display=1
scale=0.5
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Control - Cockpit (Horizon)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Add Top Part</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Wheels - All Suspensions</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Steering</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Wheels - All Rear</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreasePower</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Wheels - All Suspensions</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreasePower</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Wheels - All Suspensions</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Hydrogen Engines</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Backup Reactors</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Batteries</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Discharge</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Batteries</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>View</Action>
                      <BlockEntityId>117996123944700886</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>HandBrake</Action>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>12</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Light - Headlights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>13</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Light - High Distance Spotlights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>15</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>135475600292135830</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>16</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>SwitchLock</Action>
                      <BlockEntityId>135475600292135830</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>18</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>hitch</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>19</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>detach</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>21</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>up</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>22</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>down</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>24</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>apply</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>25</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>back</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>76064841061778649</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>27</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>105203293231608469</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>29</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>123151218753151576</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>30</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>74468452125808565</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Light - Headlights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Light - High Distance Spotlights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Backup Reactors</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Batteries</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Discharge</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>74302488893903062</BlockEntityId>
                      <GroupName>Power - Batteries</GroupName>
                    </Data>
                  </Slot>
                </SlotsGamepad>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <PilotRelativeWorld>
                <Position x="-2.1133170127868652" y="0.99700319766998291" z="-3.9209811687469482" />
                <Forward x="0.418697149" y="-0.590019643" z="0.6903404" />
                <Up x="0.207352608" y="0.802213252" z="0.559873939" />
                <Orientation>
                  <X>0.0315847658</X>
                  <Y>0.9187886</Y>
                  <Z>0.312883049</Z>
                  <W>-0.238608614</W>
                </Orientation>
              </PilotRelativeWorld>
              <PilotGunDefinition xsi:nil="true" />
              <IsInFirstPersonView>false</IsInFirstPersonView>
              <OxygenLevel>0.9</OxygenLevel>
              <PilotJetpackEnabled xsi:nil="true" />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4278848010</PackedValue>
                    <X>10</X>
                    <Y>10</Y>
                    <Z>10</Z>
                    <R>10</R>
                    <G>10</G>
                    <B>10</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>95454752459362287</EntityId>
              <Min x="0" y="4" z="-2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>Reference</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Control - CarTraSys - Reference</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <ControlThrusters>false</ControlThrusters>
              <ControlWheels>false</ControlWheels>
              <ControlGyros>false</ControlGyros>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>0</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>false</IsMainRemoteControl>
              <WaitForFreeWay>false</WaitForFreeWay>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="-2" y="5" z="-1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="2" y="5" z="-1" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="-2" y="5" z="0" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="2" y="5" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="-2" y="6" z="0" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="2" y="6" z="0" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="-2" y="6" z="1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfCorner</SubtypeName>
              <Min x="2" y="6" z="1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSide</SubtypeName>
              <EntityId>99406774979171005</EntityId>
              <Min x="-2" y="7" z="1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="2" y="7" z="1" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>108748151931667149</EntityId>
              <Min x="-1" y="7" z="1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Spotlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.607843161</ColorGreen>
              <Falloff>1.5</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>97788704356226958</EntityId>
              <Min x="1" y="7" z="1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Spotlight 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.607843161</ColorGreen>
              <Falloff>1.5</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>110902559346769258</EntityId>
              <Min x="0" y="7" z="1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Spotlight 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.215686277</ColorRed>
              <ColorGreen>0.607843161</ColorGreen>
              <Falloff>1.5</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="5" z="2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="2" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OreDetector">
              <SubtypeName>SmallBlockOreDetector</SubtypeName>
              <EntityId>74468452125808565</EntityId>
              <Min x="-2" y="5" z="2" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Control - Ore Detector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <DetectionRadius>25</DetectionRadius>
              <BroadcastUsingAntennas>true</BroadcastUsingAntennas>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>115773763215873742</EntityId>
              <Min x="1" y="5" z="2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>119858525568899126</EntityId>
              <Min x="0" y="5" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>93267094952813325</EntityId>
              <Min x="-1" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
;Tail intensity when braking
intensity=4
;Automatically set light Color setting
autoColoring=false
;LCD turn light blinks every x run times;
lcdBlinkInterval=3
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB - Light Control</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/*Vehicle Ligth Control by sunoko*/

//=============BASIC SETTINGS=============//
//cockpit name
const string cockpitName = "Cockpit";
//--light block name--//
const string frontLightName = "Front";
const string tailLightName = "Tail";
const string turnLightName = "Turn";
const string reverseLightName = "Reverse";
const string customLCDName = "Custom";
//steering wheel rotor name
const string steerRotorName = "Steering";
//auto coloring command
const string commandAutoColoring = "AutoColoring";
//Start setup command
const string commandSetUp = "Setup";
//Front ight on off command for vehicle has no light block
const string commandOnOffFrontLight = "OnOffFront";
//brake light intensity
float intensity = 4;
//LCD turn light blinks every x run times
int lcdBlinkInterval = 3;
//automatic light color setup
bool autoColoring = false;
//light settings
Color frontLightColor = new Color(245,225,75);
Color tailLightColor = new Color(235,40,7);
Color turnLightColor = new Color(235,235,30);
Color reverseLightColor = new Color(255,255,255);

Color tailLCDColor = new Color(50,0,0);
Color brakeLCDColor = new Color(100,0,0);
Color black = new Color(0,0,0);
float turnBlinkInterval = 1f;
float turnBlinkLength = 50f;
//========================================//

//--------DO NOT EDIT BELLOW CODE---------//
//script name
const string scriptName = "Vehicle Light Control";
//---------------block list---------------//
List&lt;IMyTerminalBlock&gt; frontLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; tailLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; leftLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; rightLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; unassignedLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; reverseLightList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; soundList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; rotorList = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyTerminalBlock&gt; cockpitList = new List&lt;IMyTerminalBlock&gt;();
List&lt;CustomLCDDrawer&gt; customLCDList = new List&lt;CustomLCDDrawer&gt;();

//int blockCount = 0;
//----------------variable----------------//
MyIni ini = new MyIni();
StringBuilder echo = new StringBuilder();
ControlInput ThisShipControl;
bool isUnderControl = false;
bool frontLightIsOn = false;
bool soundPlayed = false;
bool onFrontLight = false;
IMyLightingBlock light;
IMyTextPanel lcd;
int lcdBlinkStep = 0;

public enum TurnSignalOrientation
{
    None,
    Left,
    Right,
}

//--Boot delay--//
double bootingDelay = 0;
double bootingTime = 0;
//--run timer--//
const double runPerSec = 6;
const double cycle = 1 / runPerSec;
double currentTime = 0;
//--update timer--//
int updateLimit = 10;
double updateTimer = 0;
string error = "";

public Program()//Program() is run once at loading PB
{
    updateTimer = updateLimit + 1;
    Runtime.UpdateFrequency = UpdateFrequency.Update1;
    bootingDelay = new Random().Next(0,3) + new Random().NextDouble();
    ConfigHandler(true);
    turnBlinkInterval = lcdBlinkInterval * (float)cycle * 2;
}

public void ArgumentHandler(string argument)
{
    if(argument.ToLower() == commandAutoColoring.ToLower()){
        LightAutoColoring();
        return;
    }
    if(argument.ToLower() == commandSetUp.ToLower()){
        UpdateDirection();
        return;
    }
    if(argument.ToLower() == commandOnOffFrontLight.ToLower() &amp;&amp; !frontLightList.Any()){
        onFrontLight = !onFrontLight;
        return;
    }
}

public void UpdateDirection()
{
    IMyShipController anchor;
    if(!TryGetControlledCockpit(out anchor)){
        return;
    }
    rightLightList.Clear();
    leftLightList.Clear();
    MyIniParseResult result;
    foreach(var light in unassignedLightList){
        ini.Clear();
        if(!light.CustomData.Contains(scriptName) || !ini.TryParse(FindMyConfig(light.CustomData),out result)){
            continue;
        }

        string str = "";
        string[] del = {"---"};
        string[] split = light.CustomData.Split(del, StringSplitOptions.RemoveEmptyEntries);
        int i;
        for(i = 0;i &lt; split.Count();i++){
            if(split[i].Contains("[") &amp;&amp; split[i].Contains("]") &amp;&amp; !split[i].Contains(scriptName)){
                str += split[i] + "---";
                continue;
            }
        }
        if(anchor.WorldMatrix.Right.Dot(light.GetPosition() - (cockpitList[0] as IMyShipController).CenterOfMass) &gt; 0){
            ini.Set(scriptName,"Direction",TurnSignalOrientation.Right.ToString());
            rightLightList.Add(light);
        }else{
            ini.Set(scriptName,"Direction",TurnSignalOrientation.Left.ToString());
            leftLightList.Add(light);
        }
        light.CustomData = (str == "" ? str : str + "\n" ) + ini.ToString() + "---";
    }
    unassignedLightList.Clear();
}

public void Main(string argument,UpdateType type)
{
    if(type != UpdateType.Update1 &amp;&amp; type != UpdateType.Update10 &amp;&amp; type != UpdateType.Update100 &amp;&amp; type != UpdateType.Once){
        ArgumentHandler(argument);
        return;
    }
    currentTime += Runtime.TimeSinceLastRun.TotalSeconds;
    if (bootingTime &lt; bootingDelay){
        bootingTime += Runtime.TimeSinceLastRun.TotalSeconds;
        WriteInfoToMyLCD("Initializing...");
        return;
    }
    if (currentTime &lt; cycle){
        return;
    }
    Run();
    WriteInfoToMyLCD(echo.ToString());
    currentTime = 0;
}

public void Run()
{
    updateTimer += currentTime;
//get blocks and system failure check
    if(GetBlocks()){
        AppendWithNewLine(error);
        return;
    }
//initial auto setup
    if(autoColoring){
        LightAutoColoring();
    }
    if(unassignedLightList.Any()){
        AppendWithNewLine($"{unassignedLightList.Count} unassigned turn light detected.\nPlease align the cars straight,\nenter \"{commandSetUp}\" in argument,\nand run once");
    }
//try get controlled cockpit
    IMyShipController controller;
    isUnderControl = TryGetControlledCockpit(out controller);
    if(!isUnderControl){
        controller = cockpitList[0] as IMyShipController;
    }
    ThisShipControl = new ControlInput(controller);
//check front lights is on
    frontLightIsOn = false;
    foreach(var fl in frontLightList){
        onFrontLight = fl.IsWorking;
        if(onFrontLight){
            frontLightIsOn = true;
            break;
        }
    }
    double velocity = ThisShipControl.Controller.WorldMatrix.Forward.Dot(ThisShipControl.Controller.GetShipVelocities().LinearVelocity);
    bool blink = false;
    if(ThisShipControl.Left != 0){
        lcdBlinkStep++;
        if(lcdBlinkStep &lt;= lcdBlinkInterval){
            blink = true;
        }else if(lcdBlinkStep &gt;= lcdBlinkInterval * 2){
            lcdBlinkStep = 0;
        }
    }else{
        lcdBlinkStep = 0;
    }
//light control
    foreach(var rl in tailLightList){
        light = rl as IMyLightingBlock;
//tail light
        if(rl.CustomData.Contains(tailLightName)){
            if(ThisShipControl.Up &gt; 0 || (controller.HandBrake &amp;&amp; isUnderControl)){
                if(light == null){
                    LCDControl(rl,brakeLCDColor);
                }else{
                    light.ApplyAction("OnOff_On");
                    light.Intensity = intensity;
                }
            }else if(frontLightIsOn){
                if(light == null){
                    LCDControl(rl,tailLCDColor);
                }else{
                    light.ApplyAction("OnOff_On");
                    light.Intensity = 0.5f;
                }
            }else{
                if(light == null){
                    LCDControl(rl,black);
                }else{
                    light.ApplyAction("OnOff_Off");
                }
            }
        }
    }
//turn light
    foreach(var rl in leftLightList){
        light = rl as IMyLightingBlock;
        if(ThisShipControl.Left &lt; 0){
            if(light == null){
                Color lightColor = blink ? black : turnLightColor;
                LCDControl(rl,lightColor);
            }else{
                light.ApplyAction("OnOff_On");
            }
        }else{
            if(light == null){
                LCDControl(rl,black);
            }else{
                light.ApplyAction("OnOff_Off");
            }
        }
    }

    foreach(var rl in rightLightList){
        light = rl as IMyLightingBlock;
        if(ThisShipControl.Left &gt; 0){
            if(light == null){
                Color lightColor = blink ? black : turnLightColor;
                LCDControl(rl,lightColor);
            }else{
                light.ApplyAction("OnOff_On");
            }
        }else{
            if(light == null){
                LCDControl(rl,black);
            }else{
                light.ApplyAction("OnOff_Off");
            }
        }
    }
//Custom LCD
    foreach(CustomLCDDrawer lcd in customLCDList){
    //Update custom lcd if cd was changed
        var b = (lcd.Block as IMyTerminalBlock);
        if(b.CustomData != lcd.PrevCDString){
            ini.Clear();
            MyIniParseResult result;
            if(!b.CustomData.Contains(scriptName) || !ini.TryParse(FindMyConfig(b.CustomData),out result)){
                continue;
            }
            string spriteRecipe = ini.Get(scriptName,"SpriteRecipe").ToString();
            lcd.UpdateSprites(spriteRecipe);
            lcd.PrevCDString = b.CustomData;
        }
        foreach(var spriteSet in lcd.sprites){

            if(spriteSet.Tag == "Front"){
                if(onFrontLight){
                    spriteSet.ChangeColor("FrontOn",frontLightColor);
                }else{
                    spriteSet.ChangeColor("FrontOff",black);
                }
            }

            if(spriteSet.Tag == "Tail"){
                if(ThisShipControl.Up &gt; 0 || (controller.HandBrake &amp;&amp; isUnderControl)){
                    spriteSet.ChangeColor("Brake",brakeLCDColor);
                }else if(frontLightIsOn){
                    spriteSet.ChangeColor("TailOn",tailLCDColor);
                }else{
                    spriteSet.ChangeColor("TailOff",black);
                }
            }

            if(spriteSet.Tag == "TurnLeft"){
                if(ThisShipControl.Left &lt; 0 &amp;&amp; blink){
                    spriteSet.ChangeColor("TurnOn",turnLightColor);
                }else{
                    spriteSet.ChangeColor("TurnOff",black);
                }
            }

            if(spriteSet.Tag == "TurnRight"){
                if(ThisShipControl.Left &gt; 0 &amp;&amp; blink){
                    spriteSet.ChangeColor("TurnOn",turnLightColor);
                }else{
                    spriteSet.ChangeColor("TurnOff",black);
                }
            }

            if(spriteSet.Tag == "Reverse"){
                if(ThisShipControl.Forward &gt; 0 &amp;&amp; velocity &lt; 0 &amp;&amp; ThisShipControl.Up == 0 &amp;&amp; !ThisShipControl.Controller.HandBrake){
                    spriteSet.ChangeColor("ReverseOn",reverseLightColor);
                }else if(ThisShipControl.Forward &lt; 0 || velocity &gt;= 0 || ThisShipControl.Controller.HandBrake){
                    spriteSet.ChangeColor("ReverseOff",black);
                }
            }
        }
        lcd.Draw();
    }
//reverse light
    foreach(var rl in reverseLightList){
        light = rl as IMyLightingBlock;
        if(ThisShipControl.Forward &gt; 0 &amp;&amp; velocity &lt; 0 &amp;&amp; ThisShipControl.Up == 0 &amp;&amp; !ThisShipControl.Controller.HandBrake){
            if(light == null){
                LCDControl(rl,reverseLightColor);
            }else{
                light.ApplyAction("OnOff_On");
            }
        }else if(ThisShipControl.Forward &lt; 0 || velocity &gt;= 0 || ThisShipControl.Controller.HandBrake){
            if(light == null){
                LCDControl(rl,black);
            }else{
                light.ApplyAction("OnOff_Off");
            }
        }
    }

    bool processed = false;
    foreach(IMySoundBlock sound in soundList){
        if(ThisShipControl.Forward &gt; 0 &amp;&amp; velocity &lt; 0 &amp;&amp; ThisShipControl.Up == 0 &amp;&amp; !ThisShipControl.Controller.HandBrake &amp;&amp; !soundPlayed){
            sound.LoopPeriod = 1800;
            sound.Play();
            processed = true;
        }else if(velocity &gt;= 0 || ThisShipControl.Controller.HandBrake){
            sound.Stop();
            soundPlayed = false;
        }
    }
    if(processed){
        soundPlayed = true;
    }
//steer control
    foreach(IMyMotorStator rotor in rotorList){
        if(ThisShipControl.Left &gt; 0){
            rotor.SetValue&lt;float&gt;("Velocity",10);
        }else if(ThisShipControl.Left &lt; 0){
            rotor.SetValue&lt;float&gt;("Velocity",-10);
        }else{
            rotor.TargetVelocityRad = -rotor.Angle * 2;
        }
    }
}

private void LCDControl(IMyTerminalBlock block,Color color)
{
    lcd = block as IMyTextPanel;
    lcd.ContentType = ContentType.SCRIPT;
    lcd.Script = string.Empty;
    IMyTextSurface surface = (lcd as IMyTextSurfaceProvider).GetSurface(0);
    MySprite sprite = new MySprite(SpriteType.TEXTURE,"SquareSimple",size: surface.SurfaceSize,color: color);
    sprite.Position = new Vector2(surface.SurfaceSize.X * 0.5f,surface.SurfaceSize.Y * 0.5f);
    using(MySpriteDrawFrame frame = surface.DrawFrame()){
        frame.Add(sprite);
    }
}

public class CustomLCDDrawer
{
    public IMyTextSurfaceProvider Block {get;}
    public int[] Index {get;}
    public List&lt;CustomSprites&gt; sprites {get; set;}

    public string PrevCDString {get; set;}

    public CustomLCDDrawer(IMyTextSurfaceProvider Block,string IndexString,string spriteRecipe)
    {
        this.Block = Block;
        this.Index = IndexString.Split(new string[]{","}, StringSplitOptions.RemoveEmptyEntries).Select(x =&gt; int.Parse(x)).ToArray();
        this.PrevCDString = (Block as IMyTerminalBlock).CustomData;
        UpdateSprites(spriteRecipe);
    }
    
    public void UpdateSprites(string spriteRecipe){
        this.sprites = new List&lt;CustomSprites&gt;();
        string[] SpriteData = spriteRecipe.Split(new string[]{"{","}"}, StringSplitOptions.RemoveEmptyEntries);
        foreach(string s in SpriteData){
            sprites.Add(new CustomSprites(s));
        }
    }
    
    public void Draw()
    {
        using (MySpriteDrawFrame frame = Block.GetSurface(0).DrawFrame()){
            foreach(CustomSprites spriteSet in sprites){
                if(spriteSet.disable)continue;
				var s = spriteSet.Sprite;
                switch(spriteSet.IsForeOrBack){
                    case 1:
                        s.Color = Block.GetSurface(0).ScriptForegroundColor;
                        break;
                    case 2:
                        s.Color = Block.GetSurface(0).ScriptBackgroundColor;
                        break;
                    default:
                        break;
                }
                frame.Add(s);
            }
        }
    }

    public class CustomSprites
    {
        public MySprite Sprite {get; set;}
        public string Tag {get; set;} = "Defalut";
        public Dictionary&lt;string,Color&gt; ColorTable {get; set;}
        public int IsForeOrBack {get; set;} = 0;

        public bool disable {get; set;} = false;

        public CustomSprites(string recipe)
        {
            ColorTable = new Dictionary&lt;string,Color&gt;();
            SpriteType type = SpriteType.TEXTURE;
            string data = "SquareSimple";
            string font = "Debug";
            TextAlignment alignment = TextAlignment.LEFT;
            float rotationOrScale = 0;
            Vector2 position = Vector2.Zero;
            Vector2 size = Vector2.Zero;

            string[] recipes = recipe.Split(new string[]{";"}, StringSplitOptions.RemoveEmptyEntries);
            foreach(string str in recipes){
                if(str.Contains("Tag=")){
                    this.Tag = str.Replace("Tag=","");
                }
                if(str.Contains("Type=")){
                    switch(str.Replace("Type=","")){
                        case "TEXTURE":
                            type = SpriteType.TEXTURE;
                            break;
                        case "TEXT":
                            type = SpriteType.TEXT;
                            break;
                    }
                }
                if(str.Contains("Data=")){
                    data = str.Replace("Data=","");
                }
                if(str.Contains("RotationOrScale=")){
                    Single.TryParse(str.Replace("RotationOrScale=",""),out rotationOrScale);
                }
                if(str.Contains("Position=")){
                    position = Vector2Parse(str.Replace("Position=",""));
                }
                if(str.Contains("Size=")){
                    size = Vector2Parse(str.Replace("Size=",""));
                }
                if(str.Contains("Font=")){
                    font = str.Replace("Font=","");
                }
                if(str.Contains("Alignment=")){
                    switch(str.Replace("Alignment=","")){
                        case "LEFT":
                            alignment = TextAlignment.LEFT;
                            break;
                        case "RIGHT":
                            alignment = TextAlignment.RIGHT;
                            break;
                        case "CENTER":
                            alignment = TextAlignment.CENTER;
                            break;
                    }
                }
                if(str.Contains("Color=")){
                    string key = "";
                    Color c = Color.Black;
                    try{
                        string[] split = str.Replace("Color=","").Split(new string[]{":",","}, StringSplitOptions.RemoveEmptyEntries);
                        key = split[0];
                        if(key == "Foreground"){
                            IsForeOrBack = 1;
                        }
                        if(key == "Background"){
                            IsForeOrBack = 2;
                        }
                        c.R = Byte.Parse(split[1]);c.G = Byte.Parse(split[2]);c.B = Byte.Parse(split[3]);c.A = Byte.Parse(split[4]);
                    }catch{
                        continue;
                    }
                    if(this.ColorTable.ContainsKey(key)){
                        this.ColorTable[key] = c;
                    }else{
                        this.ColorTable.Add(key,c);
                    }
                }
            }

            Color defaultColor = ColorTable.Any() ? ColorTable.First().Value : Color.White;
            if(type == SpriteType.TEXTURE){
                this.Sprite = new MySprite(type,data,position: position,size: size,color: defaultColor,rotation: rotationOrScale);
            }else if(type == SpriteType.TEXT){
                this.Sprite = new MySprite(type,data,position: position,size: size,color: defaultColor,fontId: font,alignment: alignment,rotation: rotationOrScale);
            }
        }

        public void ChangeColor(string colorTag,Color defaultColor)
        {
            MySprite s = this.Sprite;
            s.Color = ColorTable.ContainsKey(colorTag) ? ColorTable[colorTag] : defaultColor;
            this.Sprite = s;
        }

        public Vector2 Vector2Parse(string source)
        {
            float xVal = 0;
            float yVal = 0;
            string[] split = source.Split(new string[]{","}, StringSplitOptions.RemoveEmptyEntries);
            if(split.Count() != 2){
                return Vector2.Zero;
            }
            Single.TryParse(split[0],out xVal);
            Single.TryParse(split[1],out yVal);
            return new Vector2(xVal,yVal);
        }
    }
}

private void WriteInfoToMyLCD(string message)
{
    using (MySpriteDrawFrame frame = Me.GetSurface(0).DrawFrame()){
        Vector2 surfaceSize = Me.GetSurface(0).SurfaceSize;

        MySprite　sprite = new MySprite(SpriteType.TEXTURE,"Grid",size: surfaceSize * 3,color: new Color(179,237,255,150));
        sprite.Position = new Vector2(surfaceSize.X / 2,surfaceSize.Y / 2);
        frame.Add(sprite);

        sprite = MySprite.CreateText($"{message}","Debug",new Color(179,237,255,255),1.0f,TextAlignment.CENTER);
        sprite.Position = new Vector2(surfaceSize.X / 2,surfaceSize.Y / 2);
        frame.Add(sprite);
    }
    Echo(message);
    echo.Clear();
}

private void InitializeMyLCD()
{
    IMyTextSurface surface = Me.GetSurface(0);
    surface.ScriptBackgroundColor = new Color(0,88,151);
    surface.ScriptForegroundColor = new Color(179,237,255); 
    surface.ContentType = ContentType.SCRIPT;
    surface.Script = string.Empty;
}

private void AppendWithNewLine(string message)
{
    echo.Append(message);
    echo.Append("\n");
}

private void LightAutoColoring()
{
    foreach(var l in frontLightList){
        light = l  as IMyLightingBlock;
        if(light != null){
            light.Color = frontLightColor;
        }
    }

    foreach(var l in tailLightList){
        light = l  as IMyLightingBlock;
        if(light != null){
            light.Color = tailLightColor;
        }
    }

    foreach(var l in leftLightList){
        light = l  as IMyLightingBlock;
        if(light != null){
            light.Color = turnLightColor;
            light.BlinkIntervalSeconds = turnBlinkInterval;
            light.BlinkLength = turnBlinkLength;
        }
    }

    foreach(var l in rightLightList){
        light = l  as IMyLightingBlock;
        if(light != null){
            light.Color = turnLightColor;
            light.BlinkIntervalSeconds = turnBlinkInterval;
            light.BlinkLength = turnBlinkLength;
        }
    }

    foreach(var l in reverseLightList){
        light = l  as IMyLightingBlock;
        if(light != null){
            light.Color = reverseLightColor;
        }
    }

    autoColoring = false;
}

public bool TryGetControlledCockpit(out IMyShipController controller)
{
    if(!cockpitList.Any()){
        controller = null;
        return false;
    }
    foreach(var block in cockpitList){
        if((block as IMyShipController).IsUnderControl){
            controller = block as IMyShipController;
            return true;
        }
    }
    controller = cockpitList[0] as IMyShipController;
    return false;
}

public class ControlInput
{
    public IMyShipController Controller {get; set;}
    
    public float Forward {get{return this.GetValue(0);} private set{this.Forward = this.GetValue(0);}}
    public float Up {get{return this.GetValue(1);} private set{this.Up = this.GetValue(1);}}
    public float Left {get{return this.GetValue(2);} private set{this.Left = this.GetValue(2);}}
    public float Yaw {get{return this.GetValue(3);} private set{this.Yaw = this.GetValue(3);}}
    public float SimRelatedYaw {get{return this.GetValue(4);} private set{this.SimRelatedYaw = this.GetValue(4);}}
    public float Pitch {get{return this.GetValue(5);} private set{this.Pitch = this.GetValue(5);}}
    public float SimRelatedPitch {get{return this.GetValue(6);} private set{this.SimRelatedPitch = this.GetValue(6);}}
    public float Roll {get{return this.GetValue(7);} private set{this.Roll = this.GetValue(7);}}
    public float SimRelatedRoll {get{return this.GetValue(8);} private set{this.SimRelatedRoll = this.GetValue(8);}}

    public float SimSpeed {get; private set;} = 1;

    private DateTime _prevDT;
    
    public ControlInput(IMyShipController Controller)
    {
        this.Controller = Controller;
    }

    private float GetValue(int propertyIndex)
    {
        if(Controller == null)return 0;
        switch(propertyIndex){
            case 0: return Controller.MoveIndicator.Z;
            case 1: return Controller.MoveIndicator.Y;
            case 2: return Controller.MoveIndicator.X;
            case 3: return Controller.RotationIndicator.Y;
            case 4: return Controller.RotationIndicator.Y * SimSpeed;
            case 5: return Controller.RotationIndicator.X;
            case 6: return Controller.RotationIndicator.X * SimSpeed;
            case 7: return Controller.RollIndicator;
            case 8: return Controller.RollIndicator * SimSpeed;
            default: return 0;
        }
    }

    public void UpdateSimSpeed(double currentTime)
    {
        DateTime nowDt = DateTime.Now;
        TimeSpan ts = nowDt.Subtract(_prevDT);
        SimSpeed = ts.TotalSeconds != 0 ? (float)((currentTime / 0.96) / ts.TotalSeconds) : 1;
        _prevDT = nowDt;
    }
}

private bool GetBlocks()
{
    AppendWithNewLine(scriptName);
    if(updateTimer &lt; updateLimit){
        AppendWithNewLine($"Next Update : {updateLimit - updateTimer:#}");
        if(error.Length &gt; 0){
            return true;
        }
        return false;
    }
    AppendWithNewLine("Blocks Update...");
    updateTimer = 0;
    var blockList = GetOwnGridBlock&lt;IMyTerminalBlock&gt;();
    if(blockList.Count == 0){
        error = "**System Failure**\nBlocks Not Found";
        return true;
    }
//    if(blockList.Count == blockCount){
//        return false;
//    }
//if add or lost blocks
    cockpitList.Clear();
    frontLightList.Clear();
    tailLightList.Clear();
    leftLightList.Clear();
    unassignedLightList.Clear();
    rightLightList.Clear();
    reverseLightList.Clear();
    customLCDList.Clear();
    soundList.Clear();
    rotorList.Clear();
//sort blocks
    List&lt;IMyTerminalBlock&gt; lightSubList = new List&lt;IMyTerminalBlock&gt;();
    foreach(var b in blockList){
        SaveBlockTag(b);
        if(b is IMyShipController &amp;&amp; b.CustomData.Contains(scriptName)){
            cockpitList.Add(b);
        }else if((b is IMyLightingBlock || b is IMyTextPanel) &amp;&amp; b.CustomData.Contains(scriptName)){
            lightSubList.Add(b);
        }else if(b is IMyMotorStator &amp;&amp; b.CustomData.Contains(scriptName)){
            rotorList.Add(b);
        }else if(b is IMySoundBlock &amp;&amp; b.CustomData.Contains(scriptName)){
            soundList.Add(b);
        }
    }

    IMyShipController anchor = null;
    TryGetControlledCockpit(out anchor);
    
    foreach(var b in lightSubList){
        if(anchor == null){
            break;
        }
        if(!cockpitList.Any()){
            break;
        }
        if(b.CustomData.Contains(customLCDName)){
            ini.Clear();
            MyIniParseResult result;
            if(!b.CustomData.Contains(scriptName) || !ini.TryParse(FindMyConfig(b.CustomData),out result)){
                continue;
            }
            string indexString = ini.Get(scriptName,"Index").ToString();
            string spriteRecipe = ini.Get(scriptName,"SpriteRecipe").ToString();
            customLCDList.Add(new CustomLCDDrawer(b as IMyTextSurfaceProvider,indexString,spriteRecipe));
        }else if(b.CustomData.Contains(frontLightName)){
            frontLightList.Add(b);
        }else if(b.CustomData.Contains(tailLightName)){
            tailLightList.Add(b);
        }else if(b.CustomData.Contains(turnLightName)){
            if(b.CustomData.Contains(TurnSignalOrientation.Right.ToString())){
                rightLightList.Add(b);
            }else if(b.CustomData.Contains(TurnSignalOrientation.Left.ToString())){
                leftLightList.Add(b);
            }else{
                unassignedLightList.Add(b);
            }
        }else if(b.CustomData.Contains(reverseLightName)){
            reverseLightList.Add(b);
        }
    }
//block check
    if(cockpitList.Count == 0){//cockpits are missing
        error = "**System Failure**\nCockpit Not Found";
        return true;
    }
    if(anchor == null){//anchor are missing
        error = "**System Failure**\nGrid Anchor Block Not Found";
        return true;
    }
//    blockCount = blockList.Count;
    error = "";
    ConfigHandler(false);
    return false;
}

private List&lt;IMyTerminalBlock&gt; GetOwnGridBlock&lt;T&gt;(Func&lt;IMyTerminalBlock, bool&gt; collect = null) where T : class, IMyTerminalBlock
{
    var blockList = new List&lt;IMyTerminalBlock&gt;();
    GridTerminalSystem.GetBlocksOfType&lt;IMyMechanicalConnectionBlock&gt;(blockList);
    HashSet&lt;IMyCubeGrid&gt; CubeGridSet = new HashSet&lt;IMyCubeGrid&gt;();
    CubeGridSet.Add(Me.CubeGrid);
    bool continueLoop;
    IMyMechanicalConnectionBlock block;
//get all CubeGrid connected on ship
    do{
        continueLoop = false;
        for(int i = 0;i &lt; blockList.Count;i++){
            block = blockList[i] as IMyMechanicalConnectionBlock;
            if(CubeGridSet.Contains(block.CubeGrid) || CubeGridSet.Contains(block.TopGrid)){
                CubeGridSet.Add(block.CubeGrid);
                CubeGridSet.Add(block.TopGrid);
                blockList.Remove(blockList[i]);
                continueLoop = true;
            }
        }
    }
    while(continueLoop);

//get filtered block
    blockList.Clear();
    GridTerminalSystem.GetBlocksOfType&lt;T&gt;(blockList,b =&gt; CubeGridSet.Contains(b.CubeGrid) &amp;&amp; (collect == null || collect(b)));
    return blockList;
}

private void SaveBlockTag(IMyTerminalBlock b)
{
    if(b.CustomData.Length == 0){
        return;
    }
    if(b.CustomData.Contains(scriptName)){
        return;
    }
    string str = "";
    string[] del = {"---"};
    string[] split = b.CustomData.Split(del, StringSplitOptions.RemoveEmptyEntries);
    int i;
    string cd = "";
    for(i = 0;i &lt; split.Count();i++){
        if(split[i].Contains("[") &amp;&amp; split[i].Contains("]")){
            str += split[i] + "---";
            continue;
        }else{
            cd += split[i];
        }
    }
    ini.Clear();
    if(cd.ToLower().Contains(cockpitName.ToLower())){
        ini.Set(scriptName,"Tag",cockpitName);
    }
    if(cd.ToLower().Contains(frontLightName.ToLower())){
        ini.Set(scriptName,"Tag",frontLightName);
    }
    if(cd.ToLower().Contains(tailLightName.ToLower())){
        ini.Set(scriptName,"Tag",tailLightName);
    }
    if(cd.ToLower().Contains(turnLightName.ToLower())){
        ini.Set(scriptName,"Tag",turnLightName);
    }
    if(cd.ToLower().Contains(reverseLightName.ToLower())){
        ini.Set(scriptName,"Tag",reverseLightName);
    }
    if(cd.ToLower().Contains(steerRotorName.ToLower())){
        ini.Set(scriptName,"Tag",steerRotorName);
    }
    if(cd.ToLower().Contains(customLCDName.ToLower())){
        ini.Set(scriptName,"Tag",customLCDName);
        var lcd = b as IMyTextSurfaceProvider;
        string surfaceSizeString = "";
        if(lcd != null){
            int count = lcd.SurfaceCount;
            for(int j = 0;j &lt; count;j++){
                surfaceSizeString += $"{lcd.GetSurface(j).SurfaceSize.ToString()},";
            }
        }
        ini.Set(scriptName,"SurfaceSizeList",surfaceSizeString);
        ini.Set(scriptName,"SpriteRecipe","");
    }
    string result = ini.ToString();
    if(result.Length == 0){
        return;
    }
    b.CustomData = (str == "" ? str : str + "\n" ) + result + "---";
}

private string FindMyConfig(string config)
{
    string[] del = {"---"};
    string[] split = config.Split(del, StringSplitOptions.RemoveEmptyEntries);
    foreach(string str in split){
        if(str.Contains(scriptName)){
            return str;
        }
    }
    return config;
}

private void ConfigHandler(bool initial)
{
    ini.Clear();
    MyIniParseResult result;
//---initialize---//
    if(!Me.CustomData.Contains(scriptName) || !ini.TryParse(Me.CustomData,out result)){
        Me.CustomData = "";
    }
//---config section---//
    MyIniValue value = ini.Get(scriptName,"intensity");
    if(!value.IsEmpty){
        intensity = value.ToSingle();
    }
    ini.Set(scriptName,"intensity",intensity);
    ini.SetComment(scriptName,"intensity","Tail intensity when braking");

    value = ini.Get(scriptName,"autoColoring");
    if(!value.IsEmpty){
        autoColoring = value.ToBoolean();
    }
    ini.Set(scriptName,"autoColoring",autoColoring);
    ini.SetComment(scriptName,"autoColoring","Automatically set light Color setting");

    value = ini.Get(scriptName,"lcdBlinkInterval");
    if(!value.IsEmpty){
        lcdBlinkInterval = value.ToInt32();
    }
    ini.Set(scriptName,"lcdBlinkInterval",lcdBlinkInterval);
    ini.SetComment(scriptName,"lcdBlinkInterval","LCD turn light blinks every x run times;");

    Me.CustomData = ini.ToString();
}</Program>
              <Storage />
              <DefaultRunArgument>setup</DefaultRunArgument>
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallWheel3x3</SubtypeName>
              <EntityId>111211882546454582</EntityId>
              <Min x="3" y="5" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="7" z="6" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="6" z="6" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>122639041755063672</EntityId>
              <Min x="3" y="5" z="6" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Access - Cargo Container</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockSmallContainer</SubtypeName>
              <EntityId>95900040748639804</EntityId>
              <Min x="-3" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Access - Cargo Container</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="6" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallWheel3x3</SubtypeName>
              <EntityId>93390435245487379</EntityId>
              <Min x="-3" y="5" z="3" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>true</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>138882971919153290</EntityId>
              <Min x="-1" y="5" z="2" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>73925024547736205</EntityId>
              <Min x="-1" y="4" z="3" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>125280095530362480</EntityId>
              <Min x="-3" y="5" z="11" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 9</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_LargeGatlingTurret">
              <SubtypeName>SmallGatlingTurret</SubtypeName>
              <EntityId>105203293231608469</EntityId>
              <Min x="-2" y="7" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.084</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>10</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Weapon - Gatling Turret</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsShooting>false</IsShooting>
              <IsShootingFromTerminal>false</IsShootingFromTerminal>
              <IsLargeTurret>true</IsLargeTurret>
              <MinFov>0.1</MinFov>
              <MaxFov>1.04719758</MaxFov>
              <RemainingAmmo>140</RemainingAmmo>
              <Target>0</Target>
              <IsPotentialTarget>true</IsPotentialTarget>
              <PreviousControlledEntityId xsi:nil="true" />
              <Rotation>0</Rotation>
              <Elevation>0</Elevation>
              <GunBase>
                <RemainingAmmo>140</RemainingAmmo>
                <CurrentAmmoMagazineName>NATO_25x184mm</CurrentAmmoMagazineName>
                <RemainingAmmosList />
                <LastShootTime>0</LastShootTime>
              </GunBase>
              <EnableIdleRotation>false</EnableIdleRotation>
              <PreviousIdleRotationState>true</PreviousIdleRotationState>
              <TargetCharacters>true</TargetCharacters>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>121427734841615500</EntityId>
              <Min x="1" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Compass - General Config]
Text surface name tag=Compass
Optional reference name tag=Reference
Draw bearing text box=true
;The rotation axis of the sun.
;Default value is configured to work with the easy start planet worlds.
Absolute north vector=X:0 Y:-1 Z:0

;Colors are defined with R,G,B,Alpha color codes where
;values can range from 0,0,0,0 [transparent] to 255,255,255,255 [white].
[Compass - Colors]
Background=0, 0, 0, 255
Line=150, 150, 150, 255
Text=150, 150, 150, 255
Needle=150, 150, 150, 255
Text Box=150, 150, 150, 255

[Compass - Text Surface Config]
Show on screen 0=true
Show on screen 1=false

[Compass - Appearance]
Draw radial compass - screen 0=true
Draw radial compass - screen 1=false
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB - Planetary Compass</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
/* 
/ //// / Whip's Planetary Compass Script / //// /

How do I use this? 

    1) Make a program block with this script loaded into it
    
    2) Make a ship controller (remote control, cockpit, or flight seat) pointing forward
        - (OPTIONAL) Add the phrase "Reference" somewhere in its name.
        - If no ship controller tagged "Reference" is detected, the code will use all ship controllers that it finds on the grid/subgrids
        
    3) Add "Compass" to the name of text panels or blocks with text surfaces that you want the compass displayed.
        - Blocks with text surfaces include: Cockpits, flight seats, programmable blocks
        - Configure which text surface the compass is displayed on within the block's custom data (You don't need to do this for text panels).

    4) You are good to go! :)

Be sure to drop by my workshop page and leave a comment :D
http://steamcommunity.com/sharedfiles/filedetails/?id=616627882

Code by Whiplash141 
*/

#region Fields
const string VERSION = "22.0.2";
const string DATE = "2020/04/22";

string _referenceNameTag = "Reference";
string _screenNameTag = "Compass";
const string SCREEN_NAME_TAG_COMPAT = "Bearing"; // For backwards compatibility

bool _clearSpriteCache = false;

List&lt;TextSurfaceConfig&gt; _textSurfaces = new List&lt;TextSurfaceConfig&gt;();
List&lt;IMyShipController&gt; _taggedControllers = new List&lt;IMyShipController&gt;();
List&lt;IMyShipController&gt; _allControllers = new List&lt;IMyShipController&gt;();
CircularBuffer&lt;Action&gt; _screenUpdateBuffer;

List&lt;IMyShipController&gt; ReferenceList
{
    get
    {
        return _taggedControllers.Count == 0 ? _allControllers : _taggedControllers;
    }
}

RuntimeTracker _runtimeTracker;
Compass _compass;
Scheduler _scheduler;
MyIni _ini = new MyIni();
MyIni _textSurfaceIni = new MyIni();
StringBuilder _customDataSB = new StringBuilder();
StringBuilder _detailedInfo = new StringBuilder();
ScheduledAction _setupScheduled;

const string INI_SECTION_GENERAL = "Compass - General Config";
const string INI_GENERAL_SCREEN_NAME = "Text surface name tag";
const string INI_GENERAL_REFERENCE_NAME = "Optional reference name tag";
const string INI_GENERAL_DRAW_BEARING = "Draw bearing text box";
const string INI_GENERAL_NORTH_VEC = "Absolute north vector";
const string INI_COMMENT_NORTH_VEC = "The rotation axis of the sun.\nDefault value is configured to work with the easy start planet worlds.";

const string INI_SECTION_COLORS = "Compass - Colors";
const string INI_COMMENT_COLORS = "Colors are defined with R,G,B,Alpha color codes where\nvalues can range from 0,0,0,0 [transparent] to 255,255,255,255 [white].";
const string INI_COLOR_BACKGROUND = "Background";
const string INI_COLOR_LINE = "Line";
const string INI_COLOR_TEXT = "Text";
const string INI_COLOR_PIP = "Needle";
const string INI_COLOR_TEXT_BOX = "Text Box";

const string INI_SECTION_APPEARANCE = "Compass - Appearance";
const string INI_APPEARANCE_RADIAL = "Draw radial compass";
const string INI_APPEARANCE_TEMPLATE_RADIAL = "Draw radial compass - screen {0}";

const string INI_SECTION_TEXT_SURF = "Compass - Text Surface Config";
const string INI_TEXT_SURF_TEMPLATE = "Show on screen {0}";

public struct CompassConfig
{
    public bool DrawBearing;
    public Vector3D AbsNorthVec;
    public Color BackgroundColor;
    public Color LineColor;
    public Color TextColor;
    public Color PipColor;
    public Color TextBoxColor;
}

CompassConfig _compassConfig = new CompassConfig()
{
    DrawBearing = true,
    AbsNorthVec = new Vector3D(0, -1, 0),
    BackgroundColor = new Color(0, 0, 0),
    LineColor = new Color(150, 150, 150),
    TextColor = new Color(150, 150, 150),
    PipColor = new Color(150, 150, 150),
    TextBoxColor = new Color(150, 150, 150),
};

public struct TextSurfaceConfig
{
    public readonly IMyTextSurface Surface;
    public bool DrawRadialCompass;
    
    public TextSurfaceConfig(IMyTextSurface surf)
    {
        Surface = surf;
        
        float ratio = surf.SurfaceSize.X / surf.SurfaceSize.Y;
        if (ratio &gt; 1)
            DrawRadialCompass = ratio &lt;= 2f;
        else
            DrawRadialCompass = ratio &gt;= 0.5f;
    }
}
#endregion

#region Entrypoints
Program()
{
    _runtimeTracker = new RuntimeTracker(this, 120, 0.005);
    _compass = new Compass(this, ref _compassConfig);
    _scheduler = new Scheduler(this);

    _screenUpdateBuffer = new CircularBuffer&lt;Action&gt;(10);
    _screenUpdateBuffer.Add(ComputeCompassParams);
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(0f / 9f, 1f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(1f / 9f, 2f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(2f / 9f, 3f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(3f / 9f, 4f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(4f / 9f, 5f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(5f / 9f, 6f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(6f / 9f, 7f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(7f / 9f, 8f / 9f));
    _screenUpdateBuffer.Add(() =&gt; UpdateScreenRange(8f / 9f, 9f / 9f));

    _setupScheduled = new ScheduledAction(Setup, 0.1);

    _scheduler.AddScheduledAction(_setupScheduled);
    _scheduler.AddScheduledAction(UpdateNextScreens, 60);
    _scheduler.AddScheduledAction(WriteDetailedInfo, 1);

    Setup();
    Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

void Main(string arg, UpdateType updateSource)
{
    _runtimeTracker.AddRuntime();
    _scheduler.Update();
    _runtimeTracker.AddInstructions();
}
#endregion

#region Detailed info
void WriteDetailedInfo()
{
    _detailedInfo.Append($"Whip's Planetary Compass\n(Version {VERSION} - {DATE})\n\n");
    _detailedInfo.Append($"Next block refresh in {Math.Max(0, _setupScheduled.RunInterval - _setupScheduled.TimeSinceLastRun):n0} seconds\n\n");

    bool error = false;
    if (_textSurfaces.Count == 0)
    {
        _detailedInfo.Append($"&gt; ERROR:\n   No text surfaces name tagged\n   \"{_screenNameTag}\" found!\n");
        error = true;
    }
    else
    {
        _detailedInfo.Append($"&gt; INFO:\n   Drawing {_textSurfaces.Count} screen(s).\n");
    }

    if (_taggedControllers.Count == 0)
    {
        _detailedInfo.Append($"&gt; INFO:\n   No ship controllers name tagged\n   \"{_referenceNameTag}\" found.\n   Using all ship controllers...\n");
        if (_allControllers.Count == 0)
        {
            _detailedInfo.Append($"&gt; ERROR:\n   No ship controllers found!\n");
            error = true;
        }
    }
    else
    {
        _detailedInfo.Append($"&gt; INFO:\n   Using name tagged ship\n   controllers...\n");
    }

    if (!error)
    {
        if (!_compass.InGravity)
        {
            _detailedInfo.Append($"&gt; WARN:\n   No natural gravity!\n");
        }
        else
        {
            _detailedInfo.Append($"&gt; INFO:\n   Bearing: {_compass.Bearing:n1}\n");
        }
    }
    
    _detailedInfo.Append(_runtimeTracker.Write());

    string output = _detailedInfo.ToString();
    Echo(output);
    _detailedInfo.Clear();
}
#endregion

#region Compass Work
void UpdateNextScreens()
{
    _screenUpdateBuffer.MoveNext().Invoke();
}

void UpdateScreenRange(float startProportion, float endProportion)
{
    int startInt = (int)Math.Round(startProportion * _textSurfaces.Count);
    int endInt = (int)Math.Round(endProportion * _textSurfaces.Count);

    for (int i = startInt; i &lt; endInt; ++i)
    {
        var surf = _textSurfaces[i];
        _compass.DrawScreen(surf.Surface, _clearSpriteCache, surf.DrawRadialCompass);
    }
}

void ComputeCompassParams()
{
    if (ReferenceList.Count == 0)
        return;

    IMyShipController reference = GetControlledShipController(ReferenceList);
    if (reference == null)
        return;

    Vector3D forward = reference.WorldMatrix.Forward;
    Vector3D gravity = reference.GetNaturalGravity();

    _compass.CalculateParameters(ref forward, ref gravity);
}

public bool IsClosed(IMyTerminalBlock block)
{
    return GridTerminalSystem.GetBlockWithId(block.EntityId) == null;
}

IMyShipController GetControlledShipController(List&lt;IMyShipController&gt; shipControllers)
{
    if (shipControllers.Count == 0)
        return null;

    IMyShipController mainControlled = null;
    IMyShipController controlled = null;
    IMyShipController notClosed = null;

    foreach (IMyShipController b in shipControllers)
    {
        if (IsClosed(b))
            continue;

        if (notClosed == null)
        {
            notClosed = b;
        }

        if (b.IsUnderControl &amp;&amp; b.CanControlShip)
        {
            if (controlled == null)
            {
                controlled = b;
            }

            if (b.IsMainCockpit)
            {
                mainControlled = b; // Only one per grid so no null check needed
            }
        }
    }

    if (mainControlled != null)
        return mainControlled;

    if (controlled != null)
        return controlled;

    return notClosed;
}

class Compass
{
    public bool InGravity = false;
    public double Bearing = 0;

    Vector3D _absNorthVec;
    Color _backgroundColor;
    Color _tickColor;
    Color _textColor;
    Color _pipColor;
    Color _textBoxColor;
    bool _drawBearing;

    readonly Program _program;
    readonly Vector2 PIP_SIZE = new Vector2(25f, 25f);
    readonly Vector2 TEXT_BOX_SIZE = new Vector2(FONT_SIZE * BASE_TEXT_HEIGHT_PX * 2.5f, FONT_SIZE * BASE_TEXT_HEIGHT_PX + 4f);
    readonly Vector2 TEXT_BOX_HORIZ_SPACING = new Vector2(FONT_SIZE * BASE_TEXT_HEIGHT_PX * 0.6f, 0);

    const double RAD_TO_DEG = 180.0 / Math.PI;
    const double FOV = 130;
    const double HALF_FOV = FOV * 0.5;
    const int MAJOR_TICK_INTERVAL = 45;
    const int MINOR_TICKS = 3;
    const int MINOR_TICK_INTERVAL = (int)(MAJOR_TICK_INTERVAL / MINOR_TICKS);

    const float FONT_SIZE = 1.8f;
    const float MAJOR_TICK_HEIGHT = 50f;
    const float MINOR_TICK_HEIGHT = MAJOR_TICK_HEIGHT / 2f;
    const float TICK_WIDTH = 6f;
    const float BASE_TEXT_HEIGHT_PX = 28.8f;
    const string FONT = "White";

    readonly Dictionary&lt;int, string&gt; _cardinalDirectionDict = new Dictionary&lt;int, string&gt;()
    {
        { 0,   "N"},
        { 45,  "NE" },
        { 90,  "E" },
        { 135, "SE" },
        { 180, "S" },
        { 225, "SW" },
        { 270, "W" },
        { 315, "NW" },
        { 360, "N" },
    };

    public Compass(Program program, ref CompassConfig compassConfig)
    {
        _program = program;
        // Easy access to Echo for debugging
        UpdateConfigValues(ref compassConfig);
    }

    public void UpdateConfigValues(ref CompassConfig compassConfig)
    {
        _drawBearing = compassConfig.DrawBearing;
        _absNorthVec = compassConfig.AbsNorthVec;
        _backgroundColor = compassConfig.BackgroundColor;
        _tickColor = compassConfig.LineColor;
        _textColor = compassConfig.TextColor;
        _pipColor = compassConfig.PipColor;
        _textBoxColor = compassConfig.TextBoxColor;
    }

    public void CalculateParameters(ref Vector3D forward, ref Vector3D gravity)
    {
        //check if grav vector exists 
        if (Vector3D.IsZero(gravity))
        {
            InGravity = false;
            return;
        }
        InGravity = true;

        //get east vector 
        Vector3D relativeEastVec = gravity.Cross(_absNorthVec);

        //get relative north vector 
        Vector3D relativeNorthVec;
        Vector3D.Cross(ref relativeEastVec, ref gravity, out relativeNorthVec);

        //project forward vector onto a plane comprised of the north and east vectors 
        Vector3D forwardProjNorthVec;
        VectorMathRef.Projection(ref forward, ref relativeNorthVec, out forwardProjNorthVec);
        Vector3D forwardProjEastVec;
        VectorMathRef.Projection(ref forward, ref relativeEastVec, out forwardProjEastVec);
        Vector3D forwardProjPlaneVec = forwardProjEastVec + forwardProjNorthVec;

        //find angle from abs north to projected forward vector measured clockwise 
        Bearing = VectorMathRef.AngleBetween(ref forwardProjPlaneVec, ref relativeNorthVec) * RAD_TO_DEG;

        //check direction of angle 
        if (Vector3D.Dot(forward, relativeEastVec) &lt; 0)
        {
            Bearing = 360 - Bearing; //because of how the angle is measured 
        }

        if (Bearing &gt;= 359.5)
            Bearing = 0;
    }

    public void DrawScreen(IMyTextSurface surf, bool refreshSpriteCache, bool drawRadialCompass)
    {
        surf.ContentType = ContentType.SCRIPT;
        surf.Script = "";
        surf.ScriptBackgroundColor = _backgroundColor;

        Vector2 textureSize = surf.TextureSize;
        Vector2 screenCenter = textureSize * 0.5f;
        Vector2 viewportSize = surf.SurfaceSize;
        Vector2 scaleVec = viewportSize / 512f;
        float compassHeight = FONT_SIZE * BASE_TEXT_HEIGHT_PX + MAJOR_TICK_HEIGHT + PIP_SIZE.Y + 4f;
        float referenceHeight = drawRadialCompass ? 512f : compassHeight;
        float scale = Math.Min(1, viewportSize.Y / referenceHeight);
        scale = Math.Min(scale, viewportSize.X / 512f);
        //_program._detailedInfo.Append($"{scale}: {viewportSize}\n");

        using (var frame = surf.DrawFrame())
        {
            if (refreshSpriteCache)
            {
                frame.Add(new MySprite());
            }

            if (drawRadialCompass)
                DrawRadialCompass(frame, ref screenCenter, ref viewportSize, scale);
            else
                DrawHorizontalCompass(frame, ref screenCenter, ref viewportSize, scale);
        }
    }

    void DrawHorizontalCompass(MySpriteDrawFrame frame, ref Vector2 screenCenter, ref Vector2 viewport, float scale)
    {
        double pxPerDeg = viewport.X / FOV; // NOTE: Not affected by scale because I want to fill the entire width

        double lowerAngle = Bearing - HALF_FOV;
        int lowerAngleMinor = (int)(lowerAngle - (lowerAngle % MINOR_TICK_INTERVAL)); // Round up to the nearest minor tick

        double upperAngle = Bearing + HALF_FOV;
        int upperAngleMinor = (int)(upperAngle - (upperAngle % MINOR_TICK_INTERVAL)); // Round down to the nearest minor tick

        int numMinorTicks = (upperAngleMinor - lowerAngleMinor) / MINOR_TICK_INTERVAL;

        Vector2 offsetCenterPos = screenCenter + new Vector2(0, 8f * scale);
        Vector2 majorTickSize = new Vector2(TICK_WIDTH, scale * MAJOR_TICK_HEIGHT);
        Vector2 minorTickSize = new Vector2(TICK_WIDTH, scale * MINOR_TICK_HEIGHT);
        Vector2 minorTickPosOffset = new Vector2(0, scale * (MAJOR_TICK_HEIGHT - MINOR_TICK_HEIGHT) * 0.5f);
        Vector2 majorTextPosOffset = new Vector2(0, -scale * (4f + FONT_SIZE * BASE_TEXT_HEIGHT_PX + 0.5f * MAJOR_TICK_HEIGHT));
        Vector2 pipPosOffset = new Vector2(0, scale * 0.5f * (PIP_SIZE.Y + MAJOR_TICK_HEIGHT));
        Vector2 textBoxPosOffset = majorTextPosOffset + new Vector2(0, 0.5f * scale * FONT_SIZE * BASE_TEXT_HEIGHT_PX);
        Vector2 textBoxTextPos = offsetCenterPos + majorTextPosOffset;

        // Create pip
        MySprite pipSprite = MySprite.CreateSprite("Triangle", offsetCenterPos + pipPosOffset, scale * PIP_SIZE);
        pipSprite.Color = _pipColor;
        frame.Add(pipSprite);

        // Create tick sprite to reuse
        MySprite tickSprite = MySprite.CreateSprite("SquareSimple", offsetCenterPos, Vector2.Zero);
        tickSprite.Color = _tickColor;

        // Draw tick marks and labels
        int angle = lowerAngleMinor;
        for (int i = 0; i &lt;= numMinorTicks; ++i)
        {
            double diff = angle - lowerAngle;

            tickSprite.Position = new Vector2((float)(diff * pxPerDeg), offsetCenterPos.Y);
            if (angle % MAJOR_TICK_INTERVAL == 0)
            { // Draw major tick
                tickSprite.Size = majorTickSize;
                int bearingAngle = GetBearingAngle(angle);
                string label = "";
                _cardinalDirectionDict.TryGetValue(bearingAngle, out label);
                MySprite text = MySprite.CreateText(label, FONT, _textColor, scale * FONT_SIZE);
                text.Position = tickSprite.Position + majorTextPosOffset;
                frame.Add(text);
            }
            else
            { // Draw minor tick
                tickSprite.Size = minorTickSize;
                tickSprite.Position += minorTickPosOffset;
            }
            frame.Add(tickSprite);
            angle += MINOR_TICK_INTERVAL;
        }

        if (_drawBearing)
        {
            // Draw angle text box
            Vector2 textBoxSize = scale * TEXT_BOX_SIZE;
            Vector2 textHorizOffset = TEXT_BOX_HORIZ_SPACING * scale;
            Vector2 textBoxCenter = offsetCenterPos + textBoxPosOffset;
            // background
            MySprite textBox = MySprite.CreateSprite("SquareSimple", textBoxCenter, textBoxSize);
            textBox.Color = _backgroundColor;
            frame.Add(textBox);
            // box
            textBox.Data = "AH_TextBox";
            textBox.Color = _textBoxColor;
            frame.Add(textBox);

            // Write digits
            string bearingStr = $"{Bearing:000}";
            // hundreds
            MySprite digit = MySprite.CreateText(bearingStr.Substring(0, 1), FONT, _textColor, FONT_SIZE * scale);
            digit.Position = textBoxTextPos - textHorizOffset;
            frame.Add(digit);
            // tens
            digit.Data = bearingStr.Substring(1, 1);
            digit.Position = textBoxTextPos;
            frame.Add(digit);
            // ones
            digit.Data = bearingStr.Substring(2, 1);
            digit.Position = textBoxTextPos + textHorizOffset;
            frame.Add(digit);
        }
    }

    const float RADIAL_COMPASS_LABEL_RADIUS = 150f;
    readonly Vector2 RADIAL_COMPASS_SIZE = new Vector2(500f, 500f);
    readonly Vector2 RADIAL_COMPASS_MAJOR_CLIP_SIZE = new Vector2(400f, 400f);
    readonly Vector2 RADIAL_COMPASS_MINOR_CLIP_SIZE = new Vector2(450f, 450f);
    readonly Vector2 RADIAL_COMPASS_LINE_SIZE = new Vector2(6f, 500f);
    readonly Vector2 RADIAL_COMPASS_PIP_LOCATION = new Vector2(0f, -190);
    void DrawRadialCompass(MySpriteDrawFrame frame, ref Vector2 screenCenter, ref Vector2 viewport, float scale)
    {
        double angleOffset = -Bearing;

        MySprite line = MySprite.CreateSprite("SquareSimple", screenCenter, scale * RADIAL_COMPASS_LINE_SIZE);
        line.Color = _tickColor;
        // Draw minor ticks
        for (int angle = 0; angle &lt; 180;  angle += MINOR_TICK_INTERVAL)
        {
            if (angle % MAJOR_TICK_INTERVAL == 0)
            {
                continue;
            }
            float rotation = (float)MathHelper.ToRadians(angle + angleOffset);
            line.RotationOrScale = rotation;
            frame.Add(line);
        }

        // Clip center of minor ticks
        MySprite circleClip = MySprite.CreateSprite("Circle", screenCenter, scale * RADIAL_COMPASS_MINOR_CLIP_SIZE);
        circleClip.Color = _backgroundColor;
        frame.Add(circleClip);

        float scaledFontSize = FONT_SIZE * scale;
        Vector2 fontVertOffset = new Vector2(0f, -scaledFontSize * BASE_TEXT_HEIGHT_PX * 0.5f);
        MySprite labelSprite = MySprite.CreateText("", FONT, _textColor, scaledFontSize);

        // Draw major ticks
        for (int angle = 0; angle &lt; 180; angle += MAJOR_TICK_INTERVAL)
        {
            float rotation = (float)MathHelper.ToRadians(angle + angleOffset);
            if (angle &lt; 180)
            {
                line.RotationOrScale = rotation;
                frame.Add(line);
            }
        }

        // Clip center of major ticks
        circleClip.Size = scale * RADIAL_COMPASS_MAJOR_CLIP_SIZE;
        frame.Add(circleClip);

        // Draw labels
        for (int angle = 0; angle &lt; 360; angle += MAJOR_TICK_INTERVAL)
        {
            if (angle % 90 != 0)
                continue;

            float rotation = (float)MathHelper.ToRadians(angle + angleOffset);
            string label = "";
            _cardinalDirectionDict.TryGetValue(angle, out label);
            Vector2 labelOffset = new Vector2(scale * RADIAL_COMPASS_LABEL_RADIUS * MyMath.FastSin(rotation), -scale * RADIAL_COMPASS_LABEL_RADIUS * MyMath.FastCos(rotation));
            labelSprite.Data = label;
            labelSprite.Position = screenCenter + labelOffset + fontVertOffset;
            frame.Add(labelSprite);
        }

        // Add pip indicator
        MySprite pipSprite = MySprite.CreateSprite("Triangle", screenCenter + scale * RADIAL_COMPASS_PIP_LOCATION, scale * PIP_SIZE);
        pipSprite.Color = _pipColor;
        frame.Add(pipSprite);

        if (_drawBearing)
        {
            // Draw angle text box
            Vector2 textBoxPos = screenCenter + fontVertOffset;
            Vector2 textBoxSize = scale * TEXT_BOX_SIZE;
            Vector2 textHorizOffset = TEXT_BOX_HORIZ_SPACING * scale;
            Vector2 textBoxCenter = screenCenter;
            // background
            MySprite textBox = MySprite.CreateSprite("SquareSimple", textBoxCenter, textBoxSize);
            textBox.Color = _backgroundColor;
            frame.Add(textBox);
            // box
            textBox.Data = "AH_TextBox";
            textBox.Color = _textBoxColor;
            frame.Add(textBox);

            // Write digits
            string bearingStr = $"{Bearing:000}";
            // hundreds
            MySprite digit = MySprite.CreateText(bearingStr.Substring(0, 1), FONT, _textColor, FONT_SIZE * scale);
            digit.Position = textBoxPos - textHorizOffset;
            frame.Add(digit);
            // tens
            digit.Data = bearingStr.Substring(1, 1);
            digit.Position = textBoxPos;
            frame.Add(digit);
            // ones
            digit.Data = bearingStr.Substring(2, 1);
            digit.Position = textBoxPos + textHorizOffset;
            frame.Add(digit);
        }
    }

    int GetBearingAngle(int angle)
    {
        if (angle &lt; 0)
        {
            return angle + 360;
        }

        if (angle &gt; 360)
        {
            return angle - 360;
        }
        return angle;
    }
}
#endregion

#region Setup
void Setup()
{
    _textSurfaces.Clear();
    _taggedControllers.Clear();
    _allControllers.Clear();
    _clearSpriteCache = !_clearSpriteCache;

    ParseGeneralIni();
    _compass.UpdateConfigValues(ref _compassConfig);

    GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(null, CollectFunction);
}

bool CollectFunction(IMyTerminalBlock b)
{
    if (b is IMyTextPanel &amp;&amp; (StringExtensions.Contains(b.CustomName, _screenNameTag) || StringExtensions.Contains(b.CustomName, SCREEN_NAME_TAG_COMPAT)))
    {
        AddTextSurfaces(b, _textSurfaces);
        return false;
    }

    if (b is IMyTextSurfaceProvider &amp;&amp; StringExtensions.Contains(b.CustomName, _screenNameTag))
    {
        AddTextSurfaces(b, _textSurfaces);
        // No return because cockpits can fit both criteria
    }

    if (b is IMyShipController)
    {
        var sc = (IMyShipController)b;
        _allControllers.Add(sc);
        if (StringExtensions.Contains(b.CustomName, _referenceNameTag))
        {
            _taggedControllers.Add(sc);
        }
        return false;
    }

    return false;
}

void AddTextSurfaces(IMyTerminalBlock block, List&lt;TextSurfaceConfig&gt; textSurfaces)
{
    var textSurface = block as IMyTextSurface;
    var surfaceProvider = block as IMyTextSurfaceProvider;

    if (textSurface == null &amp;&amp; surfaceProvider == null)
        return;

    _textSurfaceIni.Clear();
    bool parsed = _textSurfaceIni.TryParse(block.CustomData);
    if (!parsed &amp;&amp; !string.IsNullOrWhiteSpace(block.CustomData))
    {
        _textSurfaceIni.Clear();
        _textSurfaceIni.EndContent = block.CustomData;
    }

    if (textSurface != null)
    {
        var surfConfig = new TextSurfaceConfig(textSurface);

        surfConfig.DrawRadialCompass = _textSurfaceIni.Get(INI_SECTION_APPEARANCE, INI_APPEARANCE_RADIAL).ToBoolean(surfConfig.DrawRadialCompass);
        _textSurfaceIni.Set(INI_SECTION_APPEARANCE, INI_APPEARANCE_RADIAL, surfConfig.DrawRadialCompass);
        
        string iniStr = _textSurfaceIni.ToString();
        if (iniStr != block.CustomData)
            block.CustomData = iniStr;
        
        textSurfaces.Add(surfConfig);
        return;
    }
    // implied text surface provider

    int surfaceCount = surfaceProvider.SurfaceCount;
    for (int i = 0; i &lt; surfaceCount; ++i)
    {
        IMyTextSurface surf = surfaceProvider.GetSurface(i);
        
        string appearanceName = string.Format(INI_APPEARANCE_TEMPLATE_RADIAL, i);
        string iniKey = string.Format(INI_TEXT_SURF_TEMPLATE, i);
        bool display = _textSurfaceIni.Get(INI_SECTION_TEXT_SURF, iniKey).ToBoolean(i == 0);
        
        float ratio = surf.SurfaceSize.X / surf.SurfaceSize.Y;
        bool radialDefault = ratio &gt; 1 ? ratio &lt;= 2f : ratio &gt;= 0.5f;
        bool radial = _textSurfaceIni.Get(INI_SECTION_APPEARANCE, appearanceName).ToBoolean(radialDefault);
        if (display)
        {
            var surfConfig = new TextSurfaceConfig(surf);
            textSurfaces.Add(surfConfig);
        }

        _textSurfaceIni.Set(INI_SECTION_TEXT_SURF, iniKey, display);
        _textSurfaceIni.Set(INI_SECTION_APPEARANCE, appearanceName, radial);
    }

    string output = _textSurfaceIni.ToString();
    if (!string.Equals(output, block.CustomData))
        block.CustomData = output;
}
#endregion

#region Ini config
void ParseGeneralIni()
{
    _ini.Clear();
    if (_ini.TryParse(Me.CustomData))
    {
        _compassConfig.DrawBearing = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_DRAW_BEARING).ToBoolean(_compassConfig.DrawBearing);
        _screenNameTag = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_SCREEN_NAME).ToString(_screenNameTag);
        _referenceNameTag = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_REFERENCE_NAME).ToString(_referenceNameTag);
        _compassConfig.AbsNorthVec = MyIniHelper.GetVector3D(INI_SECTION_GENERAL, INI_GENERAL_NORTH_VEC, _ini, _compassConfig.AbsNorthVec);
        _compassConfig.BackgroundColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLOR_BACKGROUND, _ini, _compassConfig.BackgroundColor);
        _compassConfig.LineColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLOR_LINE, _ini, _compassConfig.LineColor);
        _compassConfig.TextColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLOR_TEXT, _ini, _compassConfig.TextColor);
        _compassConfig.PipColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLOR_PIP, _ini, _compassConfig.PipColor);
        _compassConfig.TextBoxColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLOR_TEXT_BOX, _ini, _compassConfig.TextBoxColor);
    }
    else if (!string.IsNullOrWhiteSpace(Me.CustomData))
    {
        _ini.Clear();
        _ini.EndContent = Me.CustomData;
    }

    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_SCREEN_NAME, _screenNameTag);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_REFERENCE_NAME, _referenceNameTag);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_DRAW_BEARING, _compassConfig.DrawBearing);
    MyIniHelper.SetVector3D(INI_SECTION_GENERAL, INI_GENERAL_NORTH_VEC, ref _compassConfig.AbsNorthVec, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLOR_BACKGROUND, _compassConfig.BackgroundColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLOR_LINE, _compassConfig.LineColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLOR_TEXT, _compassConfig.TextColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLOR_PIP,_compassConfig.PipColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLOR_TEXT_BOX, _compassConfig.TextBoxColor, _ini);

    _ini.SetSectionComment(INI_SECTION_COLORS, INI_COMMENT_COLORS);
    _ini.SetComment(INI_SECTION_GENERAL,INI_GENERAL_NORTH_VEC, INI_COMMENT_NORTH_VEC);

    string output = _ini.ToString();
    if (output != Me.CustomData)
        Me.CustomData = output;
}
#endregion

#region Helper Classes
public static class VectorMathRef
{
    /// &lt;summary&gt;
    ///  Normalizes a vector only if it is non-zero and non-unit
    /// &lt;/summary&gt;
    public static void SafeNormalize(ref Vector3D a, out Vector3D aNorm)
    {
        aNorm = Vector3D.Zero;
        if (IsZero(ref a))
            return;
        if (Vector3D.IsUnit(ref a))
            return;
        Vector3D.Normalize(ref a, out aNorm);
    }

    public static bool IsZero(ref Vector3D v, double epsilon = 1e-4)
    {
        if (Math.Abs(v.X) &gt; epsilon) return false;
        if (Math.Abs(v.Y) &gt; epsilon) return false;
        if (Math.Abs(v.Z) &gt; epsilon) return false;
        return true;
    }

    /// &lt;summary&gt;
    /// Reflects vector a over vector b with an optional rejection factor
    /// &lt;/summary&gt;
    public static void Reflection(ref Vector3D a, ref Vector3D b, out Vector3D result, double rejectionFactor = 1) //reflect a over b
    {
        Vector3D proj, rej;
        Projection(ref a, ref b, out proj);
        Vector3D.Subtract(ref a, ref proj, out rej);
        Vector3D.Multiply(ref rej, rejectionFactor, out rej);
        Vector3D.Subtract(ref proj, ref rej, out result);
    }

    /// &lt;summary&gt;
    /// Rejects vector a on vector b
    /// &lt;/summary&gt;
    public static void Rejection(ref Vector3D a, ref Vector3D b, out Vector3D result) //reject a on b
    {
        if (IsZero(ref a) || IsZero(ref b))
        {
            result = Vector3D.Zero;
            return;
        }

        Vector3D proj;
        Projection(ref a, ref b, out proj);
        Vector3D.Subtract(ref a, ref proj, out result);
    }

    /// &lt;summary&gt;
    /// Projects vector a onto vector b
    /// &lt;/summary&gt;
    public static void Projection(ref Vector3D a, ref Vector3D b, out Vector3D result)
    {
        if (IsZero(ref a) || IsZero(ref b))
        {
            result = Vector3D.Zero;
            return;
        }

        double dot;
        if (Vector3D.IsUnit(ref b))
        {
            Vector3D.Dot(ref a, ref b, out dot);
            Vector3D.Multiply(ref b, dot, out result);
            return;
        }

        double lenSq;
        Vector3D.Dot(ref a, ref b, out dot);
        lenSq = b.LengthSquared();
        Vector3D.Multiply(ref b, dot / lenSq, out result);
    }

    /// &lt;summary&gt;
    /// Scalar projection of a onto b
    /// &lt;/summary&gt;
    public static double ScalarProjection(ref Vector3D a, ref Vector3D b)
    {
        if (IsZero(ref a) || IsZero(ref b))
        {
            return 0;
        }

        double result;
        Vector3D.Dot(ref a, ref b, out result); // Dot prod
        if (Vector3D.IsUnit(ref b))
        {
            return result;
        }

        return result / b.Length(); // Divide by length to normalize b
    }

    /// &lt;summary&gt;
    /// Computes angle between 2 vectors in radians.
    /// &lt;/summary&gt;
    public static double AngleBetween(ref Vector3D a, ref Vector3D b)
    {
        if (IsZero(ref a) || IsZero(ref b))
        {
            return 0;
        }

        double cosBtwn = CosBetween(ref a, ref b);
        return Math.Acos(cosBtwn);
    }

    /// &lt;summary&gt;
    /// Computes cosine of the angle between 2 vectors.
    /// &lt;/summary&gt;
    public static double CosBetween(ref Vector3D a, ref Vector3D b)
    {
        if (IsZero(ref a) || IsZero(ref b))
        {
            return 0;
        }
        double dot;
        Vector3D.Dot(ref a, ref b, out dot);
        return MathHelper.Clamp(dot / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1);
    }

    /// &lt;summary&gt;
    /// Returns if the normalized dot product between two vectors is greater than the tolerance.
    /// This is helpful for determining if two vectors are "more parallel" than a tolerance.
    /// &lt;/summary&gt;
    public static bool IsDotProductWithinTolerance(ref Vector3D a, ref Vector3D b, double toleranceCos)
    {
        double dot;
        Vector3D.Dot(ref a, ref b, out dot);
        double num = a.LengthSquared() * b.LengthSquared() * toleranceCos * Math.Abs(toleranceCos);
        return Math.Abs(dot) * dot &gt; num;
    }
}

public static class StringExtensions
{
    public static bool Contains(string source, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
    {
        return source?.IndexOf(toCheck, comp) &gt;= 0;
    }
}

/// &lt;summary&gt;
/// Class for scheduling actions to occur at specific frequencies. Actions can be updated in parallel or in sequence (queued).
/// &lt;/summary&gt;
public class Scheduler
{
    public double CurrentTimeSinceLastRun = 0;

    ScheduledAction _currentlyQueuedAction = null;
    bool _firstRun = true;
    bool _inUpdate = false;

    readonly bool _ignoreFirstRun;
    readonly List&lt;ScheduledAction&gt; _actionsToAdd = new List&lt;ScheduledAction&gt;();
    readonly List&lt;ScheduledAction&gt; _scheduledActions = new List&lt;ScheduledAction&gt;();
    readonly List&lt;ScheduledAction&gt; _actionsToDispose = new List&lt;ScheduledAction&gt;();
    readonly Queue&lt;ScheduledAction&gt; _queuedActions = new Queue&lt;ScheduledAction&gt;();
    readonly Program _program;

    const double RUNTIME_TO_REALTIME = (1.0 / 60.0) / 0.0166666;

    /// &lt;summary&gt;
    /// Constructs a scheduler object with timing based on the runtime of the input program.
    /// &lt;/summary&gt;
    public Scheduler(Program program, bool ignoreFirstRun = false)
    {
        _program = program;
        _ignoreFirstRun = ignoreFirstRun;
    }

    /// &lt;summary&gt;
    /// Updates all ScheduledAcions in the schedule and the queue.
    /// &lt;/summary&gt;
    public void Update()
    {
        _inUpdate = true;
        double deltaTime = Math.Max(0, _program.Runtime.TimeSinceLastRun.TotalSeconds * RUNTIME_TO_REALTIME);

        if (_ignoreFirstRun &amp;&amp; _firstRun)
            deltaTime = 0;

        _firstRun = false;
        _actionsToDispose.Clear();
        foreach (ScheduledAction action in _scheduledActions)
        {
            CurrentTimeSinceLastRun = action.TimeSinceLastRun + deltaTime;
            action.Update(deltaTime);
            if (action.JustRan &amp;&amp; action.DisposeAfterRun)
            {
                _actionsToDispose.Add(action);
            }
        }

        // Remove all actions that we should dispose
        _scheduledActions.RemoveAll((x) =&gt; _actionsToDispose.Contains(x));

        if (_currentlyQueuedAction == null)
        {
            // If queue is not empty, populate current queued action
            if (_queuedActions.Count != 0)
                _currentlyQueuedAction = _queuedActions.Dequeue();
        }

        // If queued action is populated
        if (_currentlyQueuedAction != null)
        {
            _currentlyQueuedAction.Update(deltaTime);
            if (_currentlyQueuedAction.JustRan)
            {
                // Set the queued action to null for the next cycle
                _currentlyQueuedAction = null;
            }
        }
        _inUpdate = false;

        if (_actionsToAdd.Count &gt; 0)
        {
            _scheduledActions.AddRange(_actionsToAdd);
            _actionsToAdd.Clear();
        }
    }

    /// &lt;summary&gt;
    /// Adds an Action to the schedule. All actions are updated each update call.
    /// &lt;/summary&gt;
    public void AddScheduledAction(Action action, double updateFrequency, bool disposeAfterRun = false, double timeOffset = 0)
    {
        ScheduledAction scheduledAction = new ScheduledAction(action, updateFrequency, disposeAfterRun, timeOffset);
        if (!_inUpdate)
            _scheduledActions.Add(scheduledAction);
        else
            _actionsToAdd.Add(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds a ScheduledAction to the schedule. All actions are updated each update call.
    /// &lt;/summary&gt;
    public void AddScheduledAction(ScheduledAction scheduledAction)
    {
        if (!_inUpdate)
            _scheduledActions.Add(scheduledAction);
        else
            _actionsToAdd.Add(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds an Action to the queue. Queue is FIFO.
    /// &lt;/summary&gt;
    public void AddQueuedAction(Action action, double updateInterval)
    {
        if (updateInterval &lt;= 0)
        {
            updateInterval = 0.001; // avoids divide by zero
        }
        ScheduledAction scheduledAction = new ScheduledAction(action, 1.0 / updateInterval, true);
        _queuedActions.Enqueue(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds a ScheduledAction to the queue. Queue is FIFO.
    /// &lt;/summary&gt;
    public void AddQueuedAction(ScheduledAction scheduledAction)
    {
        _queuedActions.Enqueue(scheduledAction);
    }
}

public class ScheduledAction
{
    public bool JustRan { get; private set; } = false;
    public bool DisposeAfterRun { get; private set; } = false;
    public double TimeSinceLastRun { get; private set; } = 0;
    public double RunInterval
    {
        get
        {
            return _runInterval;
        }
        set
        {
            if (value == _runInterval)
                return;

            _runInterval = value &lt; Epsilon ? 0 : value;
            _runFrequency = value == 0 ? double.MaxValue : 1.0 / _runInterval;
        }
    }
    public double RunFrequency
    {
        get
        {
            return _runFrequency;
        }
        set
        {
            if (value == _runFrequency)
                return;

            if (value == 0)
                RunInterval = double.MaxValue;
            else
                RunInterval = 1.0 / value;
        }
    }

    double _runInterval = -1e9;
    double _runFrequency = -1e9;
    readonly Action _action;

    const double Epsilon = 1e-12;

    /// &lt;summary&gt;
    /// Class for scheduling an action to occur at a specified frequency (in Hz).
    /// &lt;/summary&gt;
    /// &lt;param name="action"&gt;Action to run&lt;/param&gt;
    /// &lt;param name="runFrequency"&gt;How often to run in Hz&lt;/param&gt;
    public ScheduledAction(Action action, double runFrequency = 0, bool removeAfterRun = false, double timeOffset = 0)
    {
        _action = action;
        RunFrequency = runFrequency; // Implicitly sets RunInterval
        DisposeAfterRun = removeAfterRun;
        TimeSinceLastRun = timeOffset;
    }

    public void Update(double deltaTime)
    {
        TimeSinceLastRun += deltaTime;

        if (TimeSinceLastRun + Epsilon &gt;= RunInterval)
        {
            _action.Invoke();
            TimeSinceLastRun = 0;

            JustRan = true;
        }
        else
        {
            JustRan = false;
        }
    }
}

/// &lt;summary&gt;
/// A simple, generic circular buffer class with a fixed capacity.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
public class CircularBuffer&lt;T&gt;
{
    public readonly int Capacity;

    T[] _array = null;
    int _setIndex = 0;
    int _getIndex = 0;

    /// &lt;summary&gt;
    /// CircularBuffer ctor.
    /// &lt;/summary&gt;
    /// &lt;param name="capacity"&gt;Capacity of the CircularBuffer.&lt;/param&gt;
    public CircularBuffer(int capacity)
    {
        if (capacity &lt; 1)
            throw new Exception($"Capacity of CircularBuffer ({capacity}) can not be less than 1");
        Capacity = capacity;
        _array = new T[Capacity];
    }

    /// &lt;summary&gt;
    /// Adds an item to the buffer. If the buffer is full, it will overwrite the oldest value.
    /// &lt;/summary&gt;
    /// &lt;param name="item"&gt;&lt;/param&gt;
    public void Add(T item)
    {
        _array[_setIndex] = item;
        _setIndex = ++_setIndex % Capacity;
    }

    /// &lt;summary&gt;
    /// Retrieves the current item in the buffer and increments the buffer index.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public T MoveNext()
    {
        T val = _array[_getIndex];
        _getIndex = ++_getIndex % Capacity;
        return val;
    }

    /// &lt;summary&gt;
    /// Retrieves the current item in the buffer without incrementing the buffer index.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public T Peek()
    {
        return _array[_getIndex];
    }
}

public static class MyIniHelper
{
    public static void SetVector3D(string sectionName, string vectorName, ref Vector3D vector, MyIni ini)
    {
        ini.Set(sectionName, vectorName, vector.ToString());
    }

    public static Vector3D GetVector3D(string sectionName, string vectorName, MyIni ini, Vector3D? defaultVector = null)
    {
        var vector = Vector3D.Zero;
        if (Vector3D.TryParse(ini.Get(sectionName, vectorName).ToString(), out vector))
            return vector;
        else if (defaultVector.HasValue)
            return defaultVector.Value;
        return default(Vector3D);
    }

    public static void SetColor(string sectionName, string itemName, Color color, MyIni ini)
    {
        string colorString = string.Format("{0}, {1}, {2}, {3}", color.R, color.G, color.B, color.A);
        ini.Set(sectionName, itemName, colorString);
    }

    public static Color GetColor(string sectionName, string itemName, MyIni ini, Color? defaultChar = null)
    {
        string rgbString = ini.Get(sectionName, itemName).ToString("null");
        string[] rgbSplit = rgbString.Split(',');

        int r = 0, g = 0, b = 0, a = 0;
        if (rgbSplit.Length != 4)
        {
            if (defaultChar.HasValue)
                return defaultChar.Value;
            else
                return Color.Transparent;
        }

        int.TryParse(rgbSplit[0].Trim(), out r);
        int.TryParse(rgbSplit[1].Trim(), out g);
        int.TryParse(rgbSplit[2].Trim(), out b);
        bool hasAlpha = int.TryParse(rgbSplit[3].Trim(), out a);
        if (!hasAlpha)
            a = 255;

        r = MathHelper.Clamp(r, 0, 255);
        g = MathHelper.Clamp(g, 0, 255);
        b = MathHelper.Clamp(b, 0, 255);
        a = MathHelper.Clamp(a, 0, 255);

        return new Color(r, g, b, a);
    }
}

/// &lt;summary&gt;
/// Class that tracks runtime history.
/// &lt;/summary&gt;
public class RuntimeTracker
{
    public int Capacity { get; set; }
    public double Sensitivity { get; set; }
    public double MaxRuntime {get; private set;}
    public double MaxInstructions {get; private set;}
    public double AverageRuntime {get; private set;}
    public double AverageInstructions {get; private set;}
    
    private readonly Queue&lt;double&gt; _runtimes = new Queue&lt;double&gt;();
    private readonly Queue&lt;double&gt; _instructions = new Queue&lt;double&gt;();
    private readonly StringBuilder _sb = new StringBuilder();
    private readonly int _instructionLimit;
    private readonly Program _program;

    public RuntimeTracker(Program program, int capacity = 100, double sensitivity = 0.01)
    {
        _program = program;
        Capacity = capacity;
        Sensitivity = sensitivity;
        _instructionLimit = _program.Runtime.MaxInstructionCount;
    }

    public void AddRuntime()
    {
        double runtime = _program.Runtime.LastRunTimeMs;
        AverageRuntime = Sensitivity * (runtime - AverageRuntime) + AverageRuntime;
        
        _runtimes.Enqueue(runtime);
        if (_runtimes.Count == Capacity)
        {
            _runtimes.Dequeue();
        }
        
        MaxRuntime = _runtimes.Max();
    }

    public void AddInstructions()
    {
        double instructions = _program.Runtime.CurrentInstructionCount;
        AverageInstructions = Sensitivity * (instructions - AverageInstructions) + AverageInstructions;
        
        _instructions.Enqueue(instructions);
        if (_instructions.Count == Capacity)
        {
            _instructions.Dequeue();
        }
        
        MaxInstructions = _instructions.Max();
    }

    public string Write()
    {
        _sb.Clear();
        _sb.AppendLine("\n_____________________________\nGeneral Runtime Info\n");
        _sb.AppendLine($"Avg instructions: {AverageInstructions:n2}");
        _sb.AppendLine($"Max instructions: {MaxInstructions:n0}");
        _sb.AppendLine($"Avg complexity: {MaxInstructions / _instructionLimit:0.000}%");
        _sb.AppendLine($"Avg runtime: {AverageRuntime:n4} ms");
        _sb.AppendLine($"Max runtime: {MaxRuntime:n4} ms");
        return _sb.ToString();
    }
}
#endregion
</Program>
              <Storage />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>SCRIPT</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <CustomizeScripts>true</CustomizeScripts>
                  <ScriptBackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="5" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenter</SubtypeName>
              <EntityId>138472615055258458</EntityId>
              <Min x="0" y="3" z="0" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="5" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="4" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="3" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="2" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="0" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="-1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="4" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="3" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="2" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="0" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="-1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="3" z="5" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="3" z="5" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="3" z="4" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="3" z="4" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="3" z="3" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="3" z="3" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_HydrogenEngine">
              <SubtypeName>SmallHydrogenEngine</SubtypeName>
              <EntityId>84521131895793849</EntityId>
              <Min x="-1" y="2" z="1" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hydrogen Engine 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Capacity>5000</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="3" z="0" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="3" z="0" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="3" z="-1" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="3" z="-1" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-2" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="2" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="-3" y="3" z="-2" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="3" y="3" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>134831218808512494</EntityId>
              <Min x="0" y="2" z="8" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.4972048</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorBlock</SubtypeName>
              <Min x="0" y="2" z="14" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>88458239908386234</EntityId>
              <Min x="0" y="2" z="17" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value> [trailer]
 front=true
 name=EONg1cargo</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Control - Trailer Hitch</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId xsi:nil="true" />
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>-1.57079637</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>2.96054956E-17</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>448000</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>89490511835005274</EntityId>
              <Min x="1" y="2" z="11" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Right 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>143045831087206587</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.125</Height>
              <MaxSteerAngle>0.2617994</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.15</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>100551085713435448</EntityId>
              <Min x="-2" y="2" z="11" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Left 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>110052051666077459</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.125</Height>
              <MaxSteerAngle>0.2617994</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.15</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3</SubtypeName>
              <EntityId>93647144869658989</EntityId>
              <Min x="1" y="2" z="14" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Right 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>74857459993885601</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.125</Height>
              <MaxSteerAngle>0.34906584</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.15</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallSuspension3x3mirrored</SubtypeName>
              <EntityId>105897854529695000</EntityId>
              <Min x="-2" y="2" z="14" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>Wheel Suspension 3x3 Left 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <TopBlockId>123908990955707163</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>-0.125</Height>
              <MaxSteerAngle>0.34906584</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>100.000008</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.15</StrengthNew>
              <FrictionNew>0.45</FrictionNew>
              <AirShockEnabled>true</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="10" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="11" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="12" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="13" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="14" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="15" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="10" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="11" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="12" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="13" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="14" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="15" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="4" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="4" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-3" y="4" z="17" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="3" y="4" z="17" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="-3" y="3" z="17" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopedCorner</SubtypeName>
              <Min x="3" y="3" z="17" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="-3" y="3" z="16" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="3" y="3" z="16" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="15" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="-1" y="2" z="10" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="1" y="2" z="15" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfArmorBlock</SubtypeName>
              <Min x="1" y="2" z="10" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="2" z="16" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallHeavyBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="2" z="16" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="-2" y="2" z="16" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="2" y="2" z="16" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="-3" y="2" z="16" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HeavyHalfSlopeArmorBlock</SubtypeName>
              <Min x="3" y="2" z="16" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>121306935705081898</EntityId>
              <Min x="0" y="2" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>135053569226160991</EntityId>
              <Min x="0" y="2" z="15" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-2" y="3" z="17" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
              <SubtypeName>ButtonPanelSmall</SubtypeName>
              <EntityId>138456297374668541</EntityId>
              <Min x="-1" y="3" z="17" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Button Panel 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Attach</Action>
                      <BlockEntityId>102506709836632072</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <AnyoneCanUse>false</AnyoneCanUse>
              <CustomButtonNames>
                <dictionary>
                  <item>
                    <Key>0</Key>
                    <Value>Hinge - Attach</Value>
                  </item>
                </dictionary>
              </CustomButtonNames>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>76064841061778649</EntityId>
              <Min x="0" y="3" z="17" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>PB - Trailer Manager</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>/*
 * Trailer Manager
 * ===============
 * 
 * There is no configuration to edit in this script. Configuration is set by means
 * of the Custom Data field in the trailer's hinges, the programmable block or in
 * any terminal block with a screen.
 * 
 * Hinge example:
 * --------------
 * 
 * [trailer]
 * front=true
 * name=Trailer Name
 * 
 * At least one hinge must have front set to "true". This is the hinge at the
 * front, by which the trailer is towed. If there is a hinge at the rear, change
 * front to "false" in that hinge's Custom Data. If there is a non-hitch hinge,
 * don't set this value.
 * 
 * The name of the trailer defaults to the name of the grid, if the name line is
 * missing.
 * 
 * Screen/Cockpit example:
 * -----------------------
 * 
 * [trailer]
 * display=0
 * scale=0.5
 * color=FF4500
 * 
 * Change the number to the screen that you wish to use; numbers start at 0, so a
 * five-screen cockpit has screens 0, 1, 2, 3 and 4.
 * 
 * Scale is a scaling factor; adjust this if the font size is wrong.
 * Color is optional, and allows the highlight color to be customised.
 * 
 * Programmable block example:
 * ---------------------------
 * 
 * [trailer]
 * autodeploy=true
 * mirror=true
 * 
 * Auto-deploy can be turned off by setting autodeploy to "false". This will stop
 * the script attempting to trigger the unpack or deploy function after a trailer
 * has been disconnected. Change to false if you don't want this sort of magic.
 * 
 * Mirroring causes the trailers' batteries, hydrogen tanks, engines &amp; generators,
 * and parking brakes to mirror those in use on the towing vehicle. 
 * 
 * Timer example:
 * --------------
 * 
 * [trailer]
 * task=stow
 * 
 * The task setting can be "stow" or "pack", in which case it will be used to stow
 * a trailer for travel. It can also be set to "deploy" or "unpack", in which case
 * it will be used to deploy a travel for separate use in-position. If not set, or
 * if set to some other value, it will be treated like any other timer: its name
 * will be shown in the trailer's menu, where it can be triggered.
 * 
 * If you have a timer that is used to both deploy and stow a trailer, set task to
 * "toggle".
 * 
 * Arguments
 * ---------
 * 
 * brakes on      Apply handbrakes
 * brakes off     Release handbrakes
 * deploy         Deploy / Unpack trailer at rear
 * unpack           "
 * allpack	       Pack all trailers for travel
 * detach         Detach the rear-most trailer
 * hitch          Couple a new trailer to the rear
 * attach           "
 * connector      Switch connectors on rear trailer
 * weapons on     Activate turrets
 * weapons off    De-activate turrets
 * rebuild        Check trailer consist for changes
 * LegacyUpdate   Attempt to identify trailers (ISL)
 * 
 * up             Move up one line on screen
 * down           Move down one line on screen
 * apply          Select current line on screen
 * select           "
 * back           Go back one menu screen
 */

const string Version = "1.0.7";
List&lt;IMyTerminalBlock&gt; Blocks = new List&lt;IMyTerminalBlock&gt;();
List&lt;IMyMotorAdvancedStator&gt; Hinges = new List&lt;IMyMotorAdvancedStator&gt;();
List&lt;IMyAttachableTopBlock&gt; HingeParts = new List&lt;IMyAttachableTopBlock&gt;();
Dictionary&lt;IMyCubeGrid, Trailer&gt; Trailers = new Dictionary&lt;IMyCubeGrid, Trailer&gt;();
Dictionary&lt;IMyCubeGrid, Coupling&gt; Couplings = new Dictionary&lt;IMyCubeGrid, Coupling&gt;();
List&lt;Trailer&gt; Consist = new List&lt;Trailer&gt;();
List&lt;IMyCubeGrid&gt; GridsFound = new List&lt;IMyCubeGrid&gt;();
const string Section = "trailer";
MyIni ini = new MyIni();
Trailer FirstTrailer;
List&lt;ManagedDisplay&gt; Displays = new List&lt;ManagedDisplay&gt;();
int selectedline = 0; // Menu selection position
Trailer selectedtrailer; // Selected trailer in menu (to recalculate selectedline in the event of a rebuild)
enum MenuOption { Top, AllTrailers, AllBatteries, AllHydrogen, Trailer, Config };
enum TimerTask { Menu, Stow, Deploy, Toggle };
MenuOption SelectedMenu = MenuOption.Top;
List&lt;MenuItem&gt; TopMenu = new List&lt;MenuItem&gt;();
List&lt;MenuItem&gt; AllTrailersMenu = new List&lt;MenuItem&gt;();
List&lt;MenuItem&gt; AllBatteriesMenu = new List&lt;MenuItem&gt;();
List&lt;MenuItem&gt; AllHydrogenMenu = new List&lt;MenuItem&gt;();
List&lt;MenuItem&gt; ConfigurationMenu = new List&lt;MenuItem&gt;();
IMyMotorAdvancedStator TractorHitch;
private bool UnidentifiedTrailer;

// Config settings
internal bool CfgAutoDeploy = true;
internal bool CfgMirror = true;

// Lists used for the mirror feature
private List&lt;IMyBatteryBlock&gt; Batteries = new List&lt;IMyBatteryBlock&gt;();
private List&lt;IMyPowerProducer&gt; Engines = new List&lt;IMyPowerProducer&gt;();
private List&lt;IMyGasTank&gt; HTanks = new List&lt;IMyGasTank&gt;();
private List&lt;IMyGasGenerator&gt; HGens = new List&lt;IMyGasGenerator&gt;();
private List&lt;IMyUserControllableGun&gt; Weapons = new List&lt;IMyUserControllableGun&gt;();
private IMyShipController Controller;

// Previous states for mirror feature (prevents continually applying changes)
ChargeMode PreviousChargeMode = ChargeMode.Auto;
bool PreviousBatteryEnabled = true;
bool PreviousStockpile = false;
bool PreviousGenerator = true;
bool PreviousEngines = true;
bool PreviousWeapons = false;
bool PreviousHandbrake = false;

public void ClearMirrorLists()
{
    Batteries.Clear();
    Engines.Clear();
    HTanks.Clear();
    HGens.Clear();
    Weapons.Clear();
    Controller = null;
}

// Methods for identifying the hydrogen blocks which lack unique interfaces.
// Many thanks to Vox Serico for these methods.

readonly MyDefinitionId
    _hydrogenEngineId = MyDefinitionId.Parse("MyObjectBuilder_HydrogenEngine/"),
    _hydrogenGasId = MyDefinitionId.Parse("MyObjectBuilder_GasProperties/Hydrogen"),
    _oxygenTankId = MyDefinitionId.Parse("MyObjectBuilder_OxygenTank/");

bool IsHydrogenEngine(IMyTerminalBlock block)
{
    return IsHydrogenEngine(block.BlockDefinition);
}
bool IsHydrogenEngine(MyDefinitionId blockId)
{
    return blockId.TypeId == _hydrogenEngineId.TypeId;
}
bool IsHydrogenTank(IMyTerminalBlock block)
{
    if (block.BlockDefinition.TypeId != _oxygenTankId.TypeId)
        return false;

    var resourceSink = block.Components.Get&lt;MyResourceSinkComponent&gt;();
    return resourceSink != null &amp;&amp; resourceSink.AcceptedResources.Contains(_hydrogenGasId);
}

struct MenuItem
{
    public string Sprite;
    public float SpriteRotation;
    public Color SpriteColor;
    public Color TextColor;
    public string MenuText;
    public Action Action;
}

struct Feedback
{
    public string Message;
    public string Sprite;
    public float SpriteRotation;
    public Color BackgroundColor;
    public Color TextColor;
    public int duration;
}

public void AllTrailersBatteryCharge(ChargeMode chargeMode)
{
    foreach (var trailer in Consist)
        trailer.SetBatteryChargeMode(chargeMode);
}
public void AllTrailersDisableBattery()
{
    foreach (var trailer in Consist)
        trailer.DisableBattery();
}
public void AllTrailersHydrogenStockpileOn()
{
    foreach (var trailer in Consist)
        trailer.HydrogenTankStockpileOn();
}
public void AllTrailersHydrogenStockpileOff()
{
    foreach (var trailer in Consist)
        trailer.HydrogenTankStockpileOff();
}
public void AllTrailersEnginesOff()
{
    foreach (var trailer in Consist)
        trailer.EnginesOff();
}
public void AllTrailersEnginesOn()
{
    foreach (var trailer in Consist)
        trailer.EnginesOn();
}
public void AllTrailersGasGeneratorsOn()
{
    foreach (var trailer in Consist)
        trailer.GeneratorsOn();
}
public void AllTrailersGasGeneratorsOff()
{
    foreach (var trailer in Consist)
        trailer.GeneratorsOff();
}
public void AllTrailersWheelsOff()
{
    foreach (var trailer in Consist)
        trailer.WheelsOff();
}
public void AllTrailersHandbrakeOn()
{
    foreach (var trailer in Consist)
        trailer.HandbrakeOn();
}
public void AllTrailersHandbrakeOff()
{
    foreach (var trailer in Consist)
        trailer.HandbrakeOff();
}
public void AllTrailersDeploy()
{
    foreach (var trailer in Consist)
        trailer.Deploy();
}
public void AllTrailersStow()
{
    foreach (var trailer in Consist)
        trailer.Stow();
}
public void DeployLastTrailer()
{
    if (Consist.Count &gt; 0) Consist[Consist.Count - 1].Deploy();
}
public void SwitchRearConnector()
{
    if (Consist.Count &gt; 0) Consist[Consist.Count - 1].SwitchConnector();
}
public void DetachLastTrailer()
{
    if (Consist.Count &gt; 0) Consist[Consist.Count - 1].Detach();
}
public void AttachLastTrailer()
{
    if (Consist.Count &gt; 0)
        Consist[Consist.Count - 1].Attach();
    else
        if (null != TractorHitch)
            TractorHitch.Attach();
}
public void AllTrailersWeaponsLive()
{
    foreach (var trailer in Consist)
        trailer.WeaponsLive();
}
public void AllTrailersWeaponsSafe()
{
    foreach (var trailer in Consist)
        trailer.WeaponsSafe();
}

public bool? StateToMirror(IEnumerable&lt;IMyFunctionalBlock&gt; blocks)
{
    bool? ReturnState = null;
    foreach (var block in blocks)
    {
        if (null == ReturnState)
            ReturnState = block.Enabled;
        if (block.Enabled != ReturnState.Value)
            return null;
    }
    return ReturnState;
}

public ChargeMode? ChargeToMirror(IEnumerable&lt;IMyBatteryBlock&gt; batteries)
{
    ChargeMode? ReturnState = null;
    foreach (var battery in batteries)
    {
        if (null == ReturnState)
            ReturnState = battery.ChargeMode;
        if (battery.ChargeMode != ReturnState)
            return null;
    }
    return ReturnState;
}

public bool? StockpileToMirror(IEnumerable&lt;IMyGasTank&gt; tanks)
{
    bool? ReturnState = null;
    foreach (var tank in tanks)
    {
        if (null == ReturnState)
            ReturnState = tank.Stockpile;
        if (tank.Stockpile != ReturnState)
            return null;
    }
    return ReturnState;
}

public void Mirror()
{
    bool? enabledState = null;
    ChargeMode? chargeMode = null;
    enabledState = StateToMirror(Batteries);
    if (enabledState.HasValue)
    {
        if (!enabledState.Value &amp;&amp; PreviousBatteryEnabled)
        {
            AllTrailersDisableBattery();
        }
        chargeMode = ChargeToMirror(Batteries);
        if ((enabledState.Value &amp;&amp; !PreviousBatteryEnabled) || (chargeMode.HasValue &amp;&amp; chargeMode != PreviousChargeMode))
        {
            AllTrailersBatteryCharge(chargeMode.Value);
            PreviousChargeMode = chargeMode.Value;
        }
        PreviousBatteryEnabled = enabledState.Value;
    }
    enabledState = StateToMirror(Weapons);
    if (enabledState.HasValue)
    {
        if (enabledState.Value != PreviousWeapons)
            if (enabledState.Value)
                AllTrailersWeaponsLive();
            else
                AllTrailersWeaponsSafe();
        PreviousWeapons = enabledState.Value;
    }
    enabledState = StateToMirror(Engines);
    if (enabledState.HasValue)
    {
        if (enabledState.Value != PreviousEngines)
            if (enabledState.Value)
                AllTrailersEnginesOn();
            else
                AllTrailersEnginesOff();
        PreviousEngines = enabledState.Value;
    }
    enabledState = StateToMirror(HGens);
    if (enabledState.HasValue)
    {
        if (enabledState.Value != PreviousGenerator)
            if (enabledState.Value)
                AllTrailersGasGeneratorsOn();
            else
                AllTrailersGasGeneratorsOff();
        PreviousGenerator = enabledState.Value;
    }
    enabledState = StockpileToMirror(HTanks);
    if (enabledState.HasValue)
    {
        if (enabledState.Value != PreviousStockpile)
            if (enabledState.Value)
                AllTrailersHydrogenStockpileOn();
            else
                AllTrailersHydrogenStockpileOff();
        PreviousStockpile = enabledState.Value;
    }
    if (null != Controller)
    {
        if (Controller.HandBrake &amp;&amp; !PreviousHandbrake)
        {
            AllTrailersHandbrakeOn();
            PreviousHandbrake = true;
        }
        else if (!Controller.HandBrake &amp;&amp; PreviousHandbrake)
        {
            AllTrailersHandbrakeOff();
            PreviousHandbrake = false;
        }
    }
}

public void LegacyUpdate()
{
    GridTerminalSystem.GetBlocksOfType(Blocks, block =&gt; block.IsSameConstructAs(Me) &amp;&amp; ((block is IMyMotorAdvancedStator) || (block is IMyTimerBlock)));
    Hinges = Blocks.OfType&lt;IMyMotorAdvancedStator&gt;().ToList();
    List&lt;IMyTimerBlock&gt; Timers = Blocks.OfType&lt;IMyTimerBlock&gt;().ToList();
    foreach (var hinge in Hinges)
    {
        ini.Clear();
        ini.TryParse(hinge.CustomData);
        if (!MyIni.HasSection(hinge.CustomData, Section))
        {
            if (hinge.CubeGrid == Me.CubeGrid &amp;&amp; hinge.CustomName.ToLower().Contains("hitch"))
            {
                this.TractorHitch = hinge;
                ini.Set(Section, "hitch", true);
            }
            else if (hinge.CustomName.Contains("Solar")|| hinge.CustomName.Contains("Ramp"))
            {
                // Definitely want to ignore these guys
                ;
            }
            else
            {
                // A new trailer has been identified, set a name and allow BuildAll() to run
                if ((hinge.CustomName.ToLower().EndsWith("front") || hinge.CustomName.ToLower().EndsWith("steering")))
                {
                    ini.Set(Section, "front", true);
                    ini.Set(Section, "name", hinge.CubeGrid.CustomName);
                    UnidentifiedTrailer = false;
                }
                else if (hinge.CustomName.ToLower().EndsWith("rear"))
                {
                    ini.Set(Section, "front", false);
                }
            }
            hinge.CustomData = ini.ToString();
        }
    }
    foreach (var timer in Timers)
    {
        ini.Clear();
        ini.TryParse(timer.CustomData);
        if (!MyIni.HasSection(timer.CustomData, Section))
        {
            if (timer.CustomName.ToLower().Contains("unpack"))
                ini.Set(Section, "task", "deploy");
            else if (timer.CustomName.ToLower().Contains("pack"))
                ini.Set(Section, "task", "stow");
            else if (timer.CustomName.ToLower().Contains("trailer") || timer.CustomName.ToLower().Contains("hook/unhook"))
                ini.Set(Section, "task", "toggle");
        }
        timer.CustomData = ini.ToString();
    }
    BuildAll();
}

private void BuildConsist()
{
    Trailers.Clear();
    Blocks.Clear();
    Hinges.Clear();
    HingeParts.Clear();
    ClearMirrorLists();
    FirstTrailer = null;
    // Populate Blocks, excluding hinges, which will instead populate either Trailers or Hinges
    GridTerminalSystem.GetBlocksOfType(Blocks, block =&gt; {
        if(!block.IsSameConstructAs(Me))
            return false;
        IMyMotorAdvancedStator hinge = block as IMyMotorAdvancedStator;
        if (null != hinge &amp;&amp; MyIni.HasSection(hinge.CustomData, Section) &amp;&amp; ini.TryParse(hinge.CustomData))
        {
            if (ini.Get(Section, "front").ToBoolean())
            {
                Trailers.Add(hinge.CubeGrid, new Trailer(this, hinge));
            }
            else
                Hinges.Add(hinge);
            if (hinge.IsAttached)
                HingeParts.Add(hinge.Top);
        }
        return true;
    });
    // Iterate remaining blocks, now that all the Trailers have been found
    // First the hinges
    foreach (var hinge in Hinges)
    {
        if (MyIni.HasSection(hinge.CustomData, Section) &amp;&amp; ini.TryParse(hinge.CustomData))
        {
            if (ini.ContainsKey(Section, "front") &amp;&amp; !ini.Get(Section, "front").ToBoolean())
            {
                if (Trailers.ContainsKey(hinge.CubeGrid))
                    Trailers[hinge.CubeGrid].RearHitch = hinge; // Regardless if already set
                if (hinge.CubeGrid.Equals(Me.CubeGrid))
                    TractorHitch = hinge;
            }
            else if (hinge.CubeGrid.Equals(Me.CubeGrid) &amp;&amp; ini.Get(Section, "hitch").ToBoolean())
            {
                TractorHitch = hinge;
            }
            else if (Trailers.ContainsKey(hinge.CubeGrid) &amp;&amp; Trailers[hinge.CubeGrid].RearHitch == null)
            {
                Trailers[hinge.CubeGrid].RearHitch = hinge;
            }
        }
    }

    // Now everything else
    foreach (var block in Blocks)
    {
        // Add battery to its trailer
        IMyBatteryBlock Battery = block as IMyBatteryBlock;
        if (null != Battery)
        {
            if (Me.CubeGrid == Battery.CubeGrid)
                Batteries.Add(Battery);
            else if (Trailers.ContainsKey(Battery.CubeGrid))
                Trailers[Battery.CubeGrid].AddBattery(Battery);
        }
        // Add wheel suspension to its trailer
        IMyMotorSuspension Wheel = block as IMyMotorSuspension;
        if (null != Wheel)
        {
            if (Trailers.ContainsKey(Wheel.CubeGrid))
                Trailers[Wheel.CubeGrid].AddWheel(Wheel);
        }
        // Add hydrogen engine to its trailer
        IMyPowerProducer Engine = block as IMyPowerProducer;
        if (null != Engine)
        {
            if (IsHydrogenEngine(Engine))
                if (Me.CubeGrid == Engine.CubeGrid)
                    Engines.Add(Engine);
                else if (Trailers.ContainsKey(Engine.CubeGrid))
                    Trailers[Engine.CubeGrid].AddEngine(Engine);
        }
        // Add hydrogen tank to its trailer
        IMyGasTank Tank = block as IMyGasTank;
        if (null != Tank)
        {
            if (IsHydrogenTank(Tank))
                if (Me.CubeGrid == Tank.CubeGrid)
                    HTanks.Add(Tank);
                else if (Trailers.ContainsKey(Tank.CubeGrid))
                    Trailers[Tank.CubeGrid].AddHTank(Tank);
        }
        // Add O2/H2 generator to its trailer
        IMyGasGenerator Gen = block as IMyGasGenerator;
        if (null != Gen)
        {
            if (Me.CubeGrid == Gen.CubeGrid)
                HGens.Add(Gen);
            else if (Trailers.ContainsKey(Gen.CubeGrid))
                Trailers[Gen.CubeGrid].AddHGen(Gen);
        }
        // Add weapon to its trailer
        IMyUserControllableGun Weapon = block as IMyUserControllableGun;
        if (null != Weapon)
        {
            if (Me.CubeGrid == Weapon.CubeGrid)
                Weapons.Add(Weapon);
            else if (Trailers.ContainsKey(Weapon.CubeGrid))
                Trailers[Weapon.CubeGrid].AddWeapon(Weapon);
        }
        // Add connector to its trailer
        IMyShipConnector Connector = block as IMyShipConnector;
        if (null != Connector)
        {
            if (Trailers.ContainsKey(Connector.CubeGrid))
                Trailers[Connector.CubeGrid].AddConnector(Connector);
        }
        // Add antenna to its trailer
        IMyRadioAntenna Antenna = block as IMyRadioAntenna;
        if (null != Antenna)
        {
            if (Trailers.ContainsKey(Antenna.CubeGrid))
                Trailers[Antenna.CubeGrid].AddAntenna(Antenna);
        }
        // Get a controller for the handbrake
        IMyShipController Controller = block as IMyShipController;
        if (null != Controller)
        {
            if (Controller.CanControlShip)
                if (Me.CubeGrid == Controller.CubeGrid)
                    this.Controller = Controller;
                else if (Trailers.ContainsKey(Controller.CubeGrid))
                    Trailers[Controller.CubeGrid].AddController(Controller);
        }
        // Add timer to its trailer
        string taskname;
        IMyTimerBlock Timer = block as IMyTimerBlock;
        if (null != Timer &amp;&amp; Trailers.ContainsKey(Timer.CubeGrid))
        {
            if (MyIni.HasSection(Timer.CustomData, Section) &amp;&amp; ini.TryParse(Timer.CustomData))
            {
                taskname = ini.Get(Section, "task").ToString();
                switch (taskname)
                {
                    case "stow":
                    case "pack":
                        Trailers[Timer.CubeGrid].AddTimer(Timer, task: TimerTask.Stow);
                        break;
                    case "deploy":
                    case "unpack":
                        Trailers[Timer.CubeGrid].AddTimer(Timer, task: TimerTask.Deploy);
                        break;
                    case "toggle":
                        Trailers[Timer.CubeGrid].AddTimer(Timer, task: TimerTask.Toggle);
                        break;
                    default:
                        Trailers[Timer.CubeGrid].AddTimer(Timer, taskName: taskname.Length &gt; 0 ? taskname : Timer.CustomName);
                        break;
                }
            }
        }
    }
    GridsFound.Clear();
    Couplings.Clear();
    // Find all grids with hinge parts on them (some of which will be all of the couplings)
    foreach (var part in HingeParts)
    {
        if (GridsFound.Contains(part.CubeGrid))
        {
            // This is the second hinge part
            Couplings[part.CubeGrid].AddPart(part);
        }
        else
        {
            // This is the first hinge part
            Couplings.Add(part.CubeGrid, new Coupling(part));
            GridsFound.Add(part.CubeGrid);
        }
    }
    // Now weed out the grids where a second hinge/rotor part wasn't found
    // Yes, some might have rotor parts, but that's not a problem
    // Just want to exclude any that would give us null values.
    foreach (var grid in Couplings.Keys.ToList())
    {
        if (!Couplings[grid].HasTwoParts())
            Couplings.Remove(grid);
    }
    // Hook up the first coupling to our tractor's tow hitch...
    IMyCubeGrid NextGrid;
    foreach (var coupling in Couplings.Values)
    {
        NextGrid = coupling.GetOtherGrid(Me.CubeGrid);
        if (null != NextGrid &amp;&amp; Trailers.ContainsKey(NextGrid))
            {
            FirstTrailer = Trailers[NextGrid];
            TractorHitch = (IMyMotorAdvancedStator)coupling.GetOtherHinge(NextGrid);
            break;
        }
    }
    if (null == FirstTrailer &amp;&amp; null != TractorHitch &amp;&amp; TractorHitch.IsAttached)
    {
        ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Maroon, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Unsupported Trailer" });
    }
    // ...and connect the trailers to each other
    foreach (var trailer in Trailers.Values)
    {
        trailer.DetectNextTrailer();
    }
}

private void ArrangeTrailersIntoTrain(Trailer first)
{
    Consist.Clear();
    var trailer = first;
    while (trailer != null)
    {
        Consist.Add(trailer);
        trailer = trailer.NextTrailer;
    }
}

private void ReadConfig()
{
    ini.Clear();
    ini.TryParse(Me.CustomData);
    CfgAutoDeploy = ini.Get(Section,"autodeploy").ToBoolean();
    CfgMirror = ini.Get(Section,"mirror").ToBoolean();
}

private void WriteConfig()
{
    ini.Clear();
    ini.TryParse(Me.CustomData);
    ini.Set(Section, "autodeploy", CfgAutoDeploy);
    ini.Set(Section, "mirror", CfgMirror);
    Me.CustomData = ini.ToString();
}

public Program()
{
    ReadConfig();
    BuildAll();
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
    Echo("Version "+Version);
}

private void ForceBuildAll()
{
    UnidentifiedTrailer = false;
    ReadConfig();
    BuildAll();
}

private void BuildAll()
{
    // If an unidentified trailer was found and hasn't been sorted, quit. This
    // isn't a cheap function.
    if (UnidentifiedTrailer) return;

    // BuildConsist populates Blocks, so we run that first.
    BuildConsist();
    FindDisplays();
    ArrangeTrailersIntoTrain(FirstTrailer);

    // Check whether we have something unidentified coupled to the end of our consist
    UnidentifiedTrailer = (Consist.Count &gt; 0 &amp;&amp; Consist[Consist.Count - 1].IsCoupled()) || (Consist.Count == 0 &amp;&amp; null != TractorHitch &amp;&amp; TractorHitch.IsAttached);

    BuildTopMenu();
    BuildAllTrailersMenu();
    BuildAllBatteriesMenu();
    BuildAllHydrogenMenu();
    BuildConfigurationMenu();

    RenderTopMenu();
    ActivateTopMenu();
}

public void ActivateAllBatteriesMenu()
{
    SelectedMenu = MenuOption.AllBatteries;
    selectedline = 0;
}
public void ActivateAllHydrogenMenu()
{
    SelectedMenu = MenuOption.AllHydrogen;
    selectedline = 0;
}
public void ActivateTopMenu()
{
    if (SelectedMenu == MenuOption.Config)
        selectedline = TopMenu.Count - 1;
    else if (SelectedMenu == MenuOption.Trailer)
        selectedline = Consist.IndexOf(selectedtrailer) + 1;
    else
        selectedline = 0;
    SelectedMenu = MenuOption.Top;
}
public void ActivateAllTrailersMenu()
{
    switch (SelectedMenu)
    {
        case MenuOption.AllBatteries:
            selectedline = 6;
            break;
        case MenuOption.AllHydrogen:
            selectedline = 7;
            break;
        default:
            selectedline = 0;
            break;
    }
    SelectedMenu = MenuOption.AllTrailers;
}
public void ActivateTrailerMenu()
{
    SelectedMenu = MenuOption.Trailer;
    selectedtrailer = Consist[selectedline - 1];
    selectedline = 0;
}
public void ActivateConfigurationMenu()
{
    SelectedMenu = MenuOption.Config;
    selectedline = 0;
}

private void BuildTopMenu()
{
    TopMenu.Clear();
    TopMenu.Add(new MenuItem() { MenuText = "All Trailers...", TextColor = Color.White, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_20.dds", SpriteColor = Color.White, SpriteRotation = (float)(0.5f * Math.PI), Action = ActivateAllTrailersMenu });
    foreach (var trailer in Consist)
        TopMenu.Add(new MenuItem() { MenuText = trailer.Name, TextColor = Color.Gray, Sprite = "AH_BoreSight", SpriteColor = Color.White, Action = ActivateTrailerMenu });
    TopMenu.Add(new MenuItem() { MenuText = "Configuration...", TextColor = Color.White, Sprite = "Construction", SpriteColor = Color.White, Action = ActivateConfigurationMenu });
}

private void BuildAllBatteriesMenu()
{
    AllBatteriesMenu.Clear();
    AllBatteriesMenu.Add(new MenuItem() { MenuText = "Back", TextColor = Color.Gray, Sprite = "AH_PullUp", SpriteColor = Color.White, SpriteRotation = (float)(1.5f * Math.PI), Action = ActivateAllTrailersMenu });
    AllBatteriesMenu.Add(new MenuItem() { MenuText = "All batteries recharge", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Yellow, Action = () =&gt; AllTrailersBatteryCharge(ChargeMode.Recharge) });
    AllBatteriesMenu.Add(new MenuItem() { MenuText = "All batteries auto", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Green, Action = () =&gt; AllTrailersBatteryCharge(ChargeMode.Auto) });
    AllBatteriesMenu.Add(new MenuItem() { MenuText = "All batteries discharge", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Cyan, Action = () =&gt; AllTrailersBatteryCharge(ChargeMode.Discharge) });
    AllBatteriesMenu.Add(new MenuItem() { MenuText = "All batteries off", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.DarkRed, Action = AllTrailersDisableBattery });
}

private void BuildAllTrailersMenu()
{
    AllTrailersMenu.Clear();
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Back", TextColor = Color.Gray, Sprite = "AH_PullUp", SpriteColor = Color.White, SpriteRotation = (float)(1.5f * Math.PI), Action = ActivateTopMenu });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Pack all trailers", Sprite = "Arrow", TextColor = Color.Gray, SpriteColor = Color.YellowGreen, Action = AllTrailersStow });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Unpack rearmost trailer", Sprite = "Arrow", SpriteColor = Color.Green, SpriteRotation = (float)Math.PI, TextColor = Color.Gray, Action = DeployLastTrailer });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Detach rearmost trailer", Sprite = "Cross", SpriteColor = Color.Red, SpriteRotation = (float)Math.PI, TextColor = Color.Gray, Action = DetachLastTrailer });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Handbrake On", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AllTrailersHandbrakeOn, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Handbrake Off", TextColor = Color.Gray, SpriteColor = Color.Yellow, Action = AllTrailersHandbrakeOff, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Batteries...", TextColor = Color.White, SpriteColor = Color.White, Action = ActivateAllBatteriesMenu, Sprite = "IconEnergy" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Hydrogen...", TextColor = Color.White, SpriteColor = Color.White, Action = ActivateAllHydrogenMenu, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Weapons Live", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AllTrailersWeaponsLive, Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Weapons Safe", TextColor = Color.Gray, SpriteColor = Color.Red, Action = AllTrailersWeaponsSafe, Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Switch Rear Connector", TextColor = Color.Gray, SpriteColor = Color.Yellow, Action = SwitchRearConnector, Sprite = "CircleHollow" });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Unpack all trailers", Sprite = "Arrow", SpriteColor = Color.Green, SpriteRotation = (float)Math.PI, TextColor = Color.Gray, Action = AllTrailersDeploy });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "Attach another trailer", Sprite = "Textures\\FactionLogo\\Traders\\TraderIcon_2.dds", TextColor = Color.Gray, SpriteColor = Color.YellowGreen, Action = AttachLastTrailer });
    AllTrailersMenu.Add(new MenuItem() { MenuText = "De-power wheels", TextColor = Color.Gray, SpriteColor = Color.Red, Action = AllTrailersWheelsOff, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds" });
}

private void BuildAllHydrogenMenu()
{
    AllHydrogenMenu.Clear();
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "Back", TextColor = Color.Gray, Sprite = "AH_PullUp", SpriteColor = Color.White, SpriteRotation = (float)(1.5f * Math.PI), Action = ActivateAllTrailersMenu });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "Engines on", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AllTrailersEnginesOn, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds" });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "Engines off", TextColor = Color.Gray, SpriteColor = Color.Red, Action = AllTrailersEnginesOff, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds" });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "H Tank Stockpile on", TextColor = Color.Gray, SpriteColor = Color.Cyan, Action = AllTrailersHydrogenStockpileOn, Sprite = "MyObjectBuilder_GasContainerObject/HydrogenBottle" });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "H Tank Stockpile off", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AllTrailersHydrogenStockpileOff, Sprite = "MyObjectBuilder_GasContainerObject/HydrogenBottle" });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "Generators on", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AllTrailersGasGeneratorsOn, Sprite = "MyObjectBuilder_Ore/Ice" });
    AllHydrogenMenu.Add(new MenuItem() { MenuText = "Generators off", TextColor = Color.Gray, SpriteColor = Color.Red, Action = AllTrailersGasGeneratorsOff, Sprite = "MyObjectBuilder_Ore/Ice" });
}

private void BuildConfigurationMenu()
{
    ConfigurationMenu.Clear();
    ConfigurationMenu.Add(new MenuItem() { MenuText = "Back", TextColor = Color.Gray, Sprite = "AH_PullUp", SpriteColor = Color.White, SpriteRotation = (float)(1.5f * Math.PI), Action = ActivateTopMenu });
    ConfigurationMenu.Add(new MenuItem() { MenuText = "Toggle AutoDeploy", TextColor = CfgAutoDeploy ? Color.Gray : Color.DarkGray, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_33.dds", SpriteColor = CfgAutoDeploy?Color.Green:Color.Red, Action = ToggleAutoDeploy });
    ConfigurationMenu.Add(new MenuItem() { MenuText = "Toggle Mirroring", TextColor = CfgAutoDeploy ? Color.Gray : Color.DarkGray, Sprite = "Textures\\FactionLogo\\Traders\\TraderIcon_2.dds", SpriteColor = CfgMirror?Color.Green:Color.Red, Action = ToggleMirror });
    ConfigurationMenu.Add(new MenuItem() { MenuText = "Rebuild consist", TextColor = Color.Gray, Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_16.dds", SpriteColor = Color.Cyan, Action = ForceBuildAll });
    ConfigurationMenu.Add(new MenuItem() { MenuText = "Detect trailer", TextColor = Color.Gray, Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_1.dds", SpriteColor = Color.OrangeRed, Action = LegacyUpdate });
}

private void ToggleAutoDeploy()
{
    CfgAutoDeploy = !CfgAutoDeploy;
    WriteConfig();
    BuildConfigurationMenu();
}

private void ToggleMirror()
{
    CfgMirror = !CfgMirror;
    WriteConfig();
    BuildConfigurationMenu();
}

private void FindDisplays()
{
    Displays.Clear();
    foreach (IMyTerminalBlock TextSurfaceProvider in Blocks.OfType&lt;IMyTextSurfaceProvider&gt;())
    {
        if (((IMyTextSurfaceProvider)TextSurfaceProvider).SurfaceCount &gt; 0 &amp;&amp; (MyIni.HasSection(TextSurfaceProvider.CustomData, Section)))
        {
            ini.TryParse(TextSurfaceProvider.CustomData);
            var displayNumber = ini.Get(Section, "display").ToUInt16();
            if (displayNumber &lt; ((IMyTextSurfaceProvider)TextSurfaceProvider).SurfaceCount || ((IMyTextSurfaceProvider)TextSurfaceProvider).SurfaceCount == 0)
            {
                var display = ((IMyTextSurfaceProvider)TextSurfaceProvider).GetSurface(ini.Get(Section, "display").ToInt16());
                float scale = ini.Get(Section, "scale").ToSingle(1.0f);
                string DefaultColor = "FF4500";
                string ColorStr = ini.Get(Section, "color").ToString(DefaultColor);
                if (ColorStr.Length &lt; 6)
                    ColorStr = DefaultColor;
                Color color = new Color() {
                    R = byte.Parse(ColorStr.Substring(0, 2), System.Globalization.NumberStyles.HexNumber),
                    G = byte.Parse(ColorStr.Substring(2, 2), System.Globalization.NumberStyles.HexNumber),
                    B = byte.Parse(ColorStr.Substring(4, 2), System.Globalization.NumberStyles.HexNumber),
                    A = 255
                };
                Displays.Add(new ManagedDisplay(display, scale, color));
            }
            else
            {
                Echo("Warning: " + TextSurfaceProvider.CustomName + " doesn't have a display number " + ini.Get(Section, "display").ToString());
            }
        }
    }
}

public void RenderTopMenu()
{
    // The main menu
    foreach (var display in Displays)
        display.RenderMenu(selectedline, TopMenu);
}

public void RenderAllTrailersMenu()
{
    // Menu with functions for all trailers
    foreach (var display in Displays)
        display.RenderMenu(selectedline, AllTrailersMenu);
}

public void RenderAllBatteriesMenu()
{
    // Menu with battery charge functions for all trailers
    foreach (var display in Displays)
        display.RenderMenu(selectedline, AllBatteriesMenu);
}

public void RenderAllHydrogenMenu()
{
    // Menu with battery charge functions for all trailers
    foreach (var display in Displays)
        display.RenderMenu(selectedline, AllHydrogenMenu);
}

public void RenderTrailerMenu()
{
    // Menu specific to a trailer
    selectedtrailer.BuildMenu(ActivateTopMenu);
    foreach (var display in Displays)
        display.RenderMenu(selectedline, selectedtrailer.Menu);
}

public void RenderConfigurationMenu()
{
    // The config menu
    foreach (var display in Displays)
        display.RenderMenu(selectedline, ConfigurationMenu);
}

public void Main(string argument, UpdateType updateSource)
{
    if ((updateSource &amp; (UpdateType.Terminal | UpdateType.Trigger)) != 0)
    {
        switch (argument.ToLower())
        {
            case "legacyupdate":
                LegacyUpdate();
                break;
            case "brakes on":
                AllTrailersHandbrakeOn();
                break;
            case "brakes off":
                AllTrailersHandbrakeOff();
                break;
            case "deploy":
            case "unpack":
                DeployLastTrailer();
                break;
            case "detach":
                DetachLastTrailer();
                break;
            case "hitch":
            case "attach":
                AttachLastTrailer();
                break;
            case "connector":
                SwitchRearConnector();
                break;
            case "allpack":
                AllTrailersDeploy();
                break;
            case "weapons on":
                AllTrailersWeaponsLive();
                break;
            case "weapons off":
                AllTrailersWeaponsSafe();
                break;
            case "rebuild":
                ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.DarkCyan, TextColor = Color.White, Message = "Rebuilding Train", Sprite = "Screen_LoadingBar", duration = 4 });
                ForceBuildAll();
                break;
            case "up":
                if (selectedline &gt; 0)
                    --selectedline;
                break;
            case "down":
                if (SelectedMenu == MenuOption.Top &amp;&amp; selectedline &lt; TopMenu.Count - 1)
                    ++selectedline;
                if (SelectedMenu == MenuOption.AllTrailers &amp;&amp; selectedline &lt; AllTrailersMenu.Count - 1)
                    ++selectedline;
                if (SelectedMenu == MenuOption.AllBatteries &amp;&amp; selectedline &lt; AllBatteriesMenu.Count - 1)
                    ++selectedline;
                if (SelectedMenu == MenuOption.AllHydrogen &amp;&amp; selectedline &lt; AllHydrogenMenu.Count - 1)
                    ++selectedline;
                if (SelectedMenu == MenuOption.Trailer &amp;&amp; selectedline &lt; selectedtrailer.Menu.Count - 1)
                    ++selectedline;
                if (SelectedMenu == MenuOption.Config &amp;&amp; selectedline &lt; ConfigurationMenu.Count - 1)
                    ++selectedline;
                break;
            case "back":
                if (SelectedMenu == MenuOption.AllBatteries || SelectedMenu == MenuOption.AllHydrogen)
                    ActivateAllTrailersMenu();
                else
                    ActivateTopMenu();
                break;
            case "apply":
            case "select":
                switch (SelectedMenu)
                {
                    case MenuOption.Top:
                        TopMenu[selectedline].Action();
                        break;
                    case MenuOption.AllTrailers:
                        AllTrailersMenu[selectedline].Action();
                        break;
                    case MenuOption.Trailer:
                        selectedtrailer.Menu[selectedline].Action();
                        break;
                    case MenuOption.Config:
                        ConfigurationMenu[selectedline].Action();
                        break;
                    case MenuOption.AllBatteries:
                        AllBatteriesMenu[selectedline].Action();
                        break;
                    case MenuOption.AllHydrogen:
                        AllHydrogenMenu[selectedline].Action();
                        break;
                    default:
                        selectedline = 0;
                        SelectedMenu = MenuOption.Top;
                        break;
                }
                break;
            default:
                break;
        }
    }

    if ((updateSource &amp; (UpdateType.Update10)) != 0)
    {
        ManagedDisplay.FeedbackTick();
        RefreshConsist();
    }

    switch (SelectedMenu)
    {
        case MenuOption.Top:
            RenderTopMenu();
            break;
        case MenuOption.AllTrailers:
            RenderAllTrailersMenu();
            break;
        case MenuOption.AllBatteries:
            RenderAllBatteriesMenu();
            break;
        case MenuOption.AllHydrogen:
            RenderAllHydrogenMenu();
            break;
        case MenuOption.Trailer:
            RenderTrailerMenu();
            break;
        case MenuOption.Config:
            RenderConfigurationMenu();
            break;
        default:
            break;
    }
}

private void RefreshConsist()
{
    // Deal with unexpectedly detached or attached first trailers
    if (null != TractorHitch)
        if (!TractorHitch.IsAttached &amp;&amp; Consist.Count &gt; 0)
        {
            // Something was attached and now it isn't
            FirstTrailer.Deploy();
            FirstTrailer = null;
            Consist.Clear();
            BuildTopMenu();
            ActivateTopMenu();
            ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Red, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Trailer detached" });
        }
        else if (TractorHitch.IsAttached &amp;&amp; Consist.Count == 0)
        {
            // Nothing was attached, but now something is
            BuildAll();
            if (UnidentifiedTrailer)
                ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Maroon, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Unknown trailer!" });
            else
                ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Green, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Trailer found" });
        }
    // Deal with unexpectedly detached or attached subsequent trailers
    for (int i = 0; i &lt; Consist.Count - 1; ++i)
    {
        if (!Consist[i].IsCoupled())
        {
            if (CfgAutoDeploy)
                Consist[i].NextTrailer.Deploy();
            Consist[i].NextTrailer = null;
            ArrangeTrailersIntoTrain(FirstTrailer);
            BuildTopMenu();
            ActivateTopMenu();
            ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Red, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Trailer detached" });
        }
    }
    if (Consist.Count &gt; 0 &amp;&amp; Consist[Consist.Count - 1].IsCoupled())
    {
        BuildAll();
        if (UnidentifiedTrailer)
            ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Maroon, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Unknown trailer!" });
        else
            ManagedDisplay.SetFeedback(new Feedback() { BackgroundColor = Color.Green, Sprite = "Danger", TextColor = Color.Yellow, duration = 8, Message = "Trailer found" });
    }
    // Mirror vehicle state in trailers
    if (CfgMirror)
        Mirror();
}

class Coupling
{
    private IMyAttachableTopBlock A, B;

    public Coupling(IMyAttachableTopBlock part)
    {
        this.A = part;
    }

    public void AddPart(IMyAttachableTopBlock part)
    {
        this.B = part;
    }

    public bool HasTwoParts()
    {
        return null != B &amp;&amp; !A.Equals(B);
    }

    public bool ContainsPart(IMyAttachableTopBlock part)
    {
        return (A.Equals(part) || B.Equals(part));
    }

    public IMyCubeGrid GetOtherGrid(IMyCubeGrid grid)
    {
        if (null == B) return null;
        if (grid.Equals(A.Base.CubeGrid) &amp;&amp; B.IsAttached)
            return B.Base.CubeGrid;
        if (grid.Equals(B.Base.CubeGrid) &amp;&amp; A.IsAttached)
            return A.Base.CubeGrid;
        return null;
    }
    public IMyMechanicalConnectionBlock GetOtherHinge(IMyCubeGrid grid)
    {
        if (null == B) return null;
        if (grid.Equals(A.Base.CubeGrid) &amp;&amp; B.IsAttached)
            return B.Base;
        if (grid.Equals(B.Base.CubeGrid) &amp;&amp; A.IsAttached)
            return A.Base;
        return null;
    }

}

class ManagedDisplay
{
    private IMyTextSurface surface;
    private RectangleF viewport;
    private MySpriteDrawFrame frame;
    private float StartHeight = 5f;
    private float HeadingHeight = 35f;
    private float LineHeight = 40f;
    private float BodyBeginsHeight = 65f; // StartHeight + HeadingHeight + 25;
    private float HeadingFontSize = 2.0f;
    private float RegularFontSize = 1.5f;
    private Vector2 Position;
    private Vector2 CursorDrawPosition;
    private int WindowSize;         // Number of lines shown on screen at once after heading
    private int WindowPosition = 0; // Number of lines scrolled away
    private int CursorMenuPosition; // Position of cursor within window
    static Program.Feedback Feedback;
    private float Scale;
    private Color HighlightColor;

    public ManagedDisplay(IMyTextSurface surface, float scale = 1.0f, Color highlightColor = new Color())
    {
        this.surface = surface;
        this.Scale = scale;
        this.HighlightColor = highlightColor;

        // Scale everything!
        StartHeight *= scale;
        HeadingHeight *= scale;
        LineHeight *= scale;
        BodyBeginsHeight *= scale;
        HeadingFontSize *= scale;
        RegularFontSize *= scale;

        surface.ContentType = ContentType.SCRIPT;
        surface.Script = "";
        surface.ScriptBackgroundColor = Color.Black;
        viewport = new RectangleF((surface.TextureSize - surface.SurfaceSize) / 2f, surface.SurfaceSize);
        WindowSize = ((int)((viewport.Height - BodyBeginsHeight - 10 * scale) / LineHeight));
    }

    public static void FeedbackTick()
    {
        --Feedback.duration;
    }

    public static void SetFeedback(Program.Feedback feedback)
    {
        Feedback = feedback;
    }

    private void ShowFeedback()
    {
        if (Feedback.duration &gt; 0)
        {
            frame.Add(new MySprite()
            {
                Type = SpriteType.TEXTURE,
                Data = "SquareSimple",
                Position = new Vector2(0, viewport.Y + LineHeight),
                Color = Feedback.BackgroundColor,
                Size = new Vector2(viewport.Width, LineHeight * 2)
            });
            frame.Add(new MySprite()
            {
                Type = SpriteType.TEXTURE,
                Data = Feedback.Sprite,
                Position = new Vector2(LineHeight, viewport.Y + LineHeight * 1.25f),
                Color = Feedback.TextColor,
                Alignment = TextAlignment.CENTER /* Center the text on the position */,
                Size = new Vector2(LineHeight, LineHeight),
                FontId = "White"
            });
            frame.Add(new MySprite()
            {
                Type = SpriteType.TEXT,
                Data = Feedback.Message,
                Position = new Vector2(2 * LineHeight, viewport.Y + HeadingHeight / 2),
                RotationOrScale = HeadingFontSize,
                Color = Feedback.TextColor,
                Alignment = TextAlignment.LEFT /* Center the text on the position */,
                FontId = "White"
            });
        }
    }

    private void DrawCursor()
    {
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXTURE,
            Data = "SquareSimple",
            Position = CursorDrawPosition,
            Color = HighlightColor,
            Size = new Vector2(viewport.Width, LineHeight)
        });
    }

    private void AddHeading(int menuLength)
    {
        Position = new Vector2(viewport.Width / 2f - LineHeight, StartHeight) + viewport.Position;
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXT,
            Data = "Trailer Manager",
            Position = Position,
            RotationOrScale = HeadingFontSize,
            Color = Color.White,
            Alignment = TextAlignment.CENTER /* Center the text on the position */,
            FontId = "White"
        });
        Position = new Vector2(viewport.Width - 2 * LineHeight, LineHeight) + viewport.Position;
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXTURE,
            Data = "AH_BoreSight",
            Color = (WindowPosition &gt; 0) ? HighlightColor : Color.Black.Alpha(0),
            RotationOrScale = 1.5f * (float)Math.PI,
            Size = new Vector2(LineHeight, LineHeight),
            Position = Position,
        });
        Position += new Vector2(LineHeight, 0);
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXTURE,
            Data = "AH_BoreSight",
            Color = (WindowPosition + WindowSize &lt; menuLength) ? HighlightColor : Color.Black.Alpha(0),
            RotationOrScale = 0.5f * (float)Math.PI,
            Size = new Vector2(LineHeight, LineHeight),
            Position = Position,
        });
        Position = new Vector2(viewport.Width / 2f - LineHeight, StartHeight + HeadingHeight) + viewport.Position;
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXT,
            Data = "----------------------------",
            Position = Position,
            RotationOrScale = RegularFontSize,
            Color = HighlightColor,
            Alignment = TextAlignment.CENTER,
            FontId = "White"
        });
    }

    private void AddMenuItem(MenuItem menuItem)
    {
        AddMenuItem(
            menuText: menuItem.MenuText,
            sprite: menuItem.Sprite,
            spriteRotation: menuItem.SpriteRotation,
            spriteColor: menuItem.SpriteColor,
            textColor: menuItem.TextColor
            );
    }

    private void AddMenuItem(string menuText, string sprite = "SquareSimple", float spriteRotation = 0, Color? spriteColor = null, Color? textColor = null)
    {
        if (null == spriteColor)
            spriteColor = Color.White;
        float SpriteOffset = 25f * Scale;
        Position += new Vector2(0, LineHeight);
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXTURE,
            Data = sprite,
            Position = Position + new Vector2(0, SpriteOffset),
            RotationOrScale = spriteRotation,
            Size = new Vector2(LineHeight, LineHeight),
            Color = spriteColor ?? Color.White,
        });
        frame.Add(new MySprite()
        {
            Type = SpriteType.TEXT,
            Data = menuText,
            Position = Position + new Vector2(LineHeight * 1.2f, 0),
            RotationOrScale = RegularFontSize,
            Color = textColor ?? Color.Gray,
            Alignment = TextAlignment.LEFT,
            FontId = "White"
        });
    }

    internal void RenderMenu(int selectedline, List&lt;MenuItem&gt; menuItems)
    {
        SetWindowPosition(selectedline);
        frame = surface.DrawFrame();
        CursorDrawPosition = new Vector2(0, BodyBeginsHeight + LineHeight + LineHeight * CursorMenuPosition) + viewport.Position;
        DrawCursor();
        AddHeading(menuItems.Count);
        Position.X = surface.TextPadding;
        int renderLineCount = 0;
        foreach (var menuItem in menuItems)
        {
            if (renderLineCount &gt;= WindowPosition &amp;&amp; renderLineCount &lt; WindowPosition + WindowSize)
                AddMenuItem(menuItem);
            ++renderLineCount;
        }
        ShowFeedback();
        frame.Dispose();
    }

    private void SetWindowPosition(int selectedline)
    {
        CursorMenuPosition = selectedline - WindowPosition;
        if (CursorMenuPosition &lt; 0)
        {
            CursorMenuPosition = 0;
            WindowPosition = selectedline;
        }
        if (CursorMenuPosition &gt;= WindowSize)
        {
            CursorMenuPosition = WindowSize - 1;
            WindowPosition = selectedline - (WindowSize - 1);
        }
    }
}

class Trailer
{
    private IMyMotorAdvancedStator ForwardHitch;
    public IMyMotorAdvancedStator RearHitch
    {
        get;
        set;
    }
    private IMyCubeGrid Grid;
    public string Name;
    public Trailer NextTrailer;
    private Program program;
    private List&lt;IMyBatteryBlock&gt; Batteries = new List&lt;IMyBatteryBlock&gt;();
    private List&lt;IMyMotorSuspension&gt; Wheels = new List&lt;IMyMotorSuspension&gt;();
    private List&lt;IMyPowerProducer&gt; Engines = new List&lt;IMyPowerProducer&gt;();
    private List&lt;IMyGasTank&gt; HTanks = new List&lt;IMyGasTank&gt;();
    private List&lt;IMyGasGenerator&gt; HGens = new List&lt;IMyGasGenerator&gt;();
    private List&lt;TimerWithTaskName&gt; TimersWithTask = new List&lt;TimerWithTaskName&gt;();
    private List&lt;IMyUserControllableGun&gt; Weapons = new List&lt;IMyUserControllableGun&gt;();
    private List&lt;IMyShipConnector&gt; Connectors = new List&lt;IMyShipConnector&gt;();
    private List&lt;IMyRadioAntenna&gt; Antennae = new List&lt;IMyRadioAntenna&gt;();
    private IMyShipController controller;
    private IMyTimerBlock StowTimer, DeployTimer;

    private struct TimerWithTaskName
    {
        public IMyTimerBlock Timer;
        public string TaskName;
    }

    internal List&lt;MenuItem&gt; Menu = new List&lt;MenuItem&gt;();

    public Trailer(Program program, IMyMotorAdvancedStator forwardHitch)
    {
        this.Grid = forwardHitch.CubeGrid;
        this.program = program;
        if (program.ini.TryParse(forwardHitch.CustomData))
        {
            this.Name = program.ini.Get(Program.Section, "name").ToString();
            if (null == this.Name || this.Name.Length == 0)
                this.Name = forwardHitch.CubeGrid.CustomName;
        }
        else
        {
            this.Name = forwardHitch.CubeGrid.CustomName;
        }
        this.ForwardHitch = forwardHitch;
    }

    public bool IsCoupled()
    {
        return null != RearHitch &amp;&amp; RearHitch.IsAttached;
    }

    public void Attach()
    {
        if (null != RearHitch &amp;&amp; !RearHitch.IsAttached)
            RearHitch.Attach();
    }

    public void AddBattery(IMyBatteryBlock battery)
    {
        Batteries.Add(battery);
    }
    public void AddWheel(IMyMotorSuspension wheel)
    {
        Wheels.Add(wheel);
    }
    public void AddEngine(IMyPowerProducer engine)
    {
        Engines.Add(engine);
    }
    public void AddHTank(IMyGasTank tank)
    {
        HTanks.Add(tank);
    }
    public void AddHGen(IMyGasGenerator generator)
    {
        HGens.Add(generator);
    }
    public void AddAntenna(IMyRadioAntenna antenna)
    {
        Antennae.Add(antenna);
    }
    public void AddController(IMyShipController controller)
    {
        this.controller = controller;
    }
    public void AddTimer(IMyTimerBlock timer, TimerTask task = TimerTask.Menu, string taskName = "")
    {
        // Pack is used to flag when a timer is for stowing (packing) or deploying (unpacking)
        if (task == TimerTask.Stow)
            StowTimer = timer;
        else if (task == TimerTask.Deploy)
            DeployTimer = timer;
        else if (task == TimerTask.Toggle)
        {
            DeployTimer = timer;
            StowTimer = timer;
        }
        else
        {
            TimersWithTask.Add(new TimerWithTaskName { Timer = timer, TaskName = taskName });
        }
    }
    public void AddWeapon(IMyUserControllableGun Weapon)
    {
        Weapons.Add(Weapon);
    }
    public void AddConnector(IMyShipConnector connector)
    {
        Connectors.Add(connector);
    }

    public void SetBatteryChargeMode(ChargeMode chargeMode)
    {
        foreach (var battery in Batteries)
        {
            battery.Enabled = true;
            battery.ChargeMode = chargeMode;
        }
        Color ChargeColor = Color.Green;
        if (chargeMode == ChargeMode.Recharge)
            ChargeColor = Color.Yellow;
        if (chargeMode == ChargeMode.Discharge)
            ChargeColor = Color.Cyan;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = ChargeColor, Message = chargeMode.ToString(), Sprite = "IconEnergy", duration = 4 });
    }
    public void DisableBattery()
    {
        foreach (var battery in Batteries)
        {
            battery.Enabled = false;
        }
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.DarkRed, Message = "Batteries off", Sprite = "IconEnergy", duration = 4 });
    }

    public void HydrogenTankStockpileOn()
    {
        foreach (var tank in HTanks)
            tank.Stockpile = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Cyan, Message = "Stockpile H On", Sprite = "IconHydrogen", duration = 4 });
    }
    public void HydrogenTankStockpileOff()
    {
        foreach (var tank in HTanks)
            tank.Stockpile = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Green, Message = "Stockpile H Off", Sprite = "IconHydrogen", duration = 4 });
    }

    public void EnginesOn()
    {
        foreach (var engine in Engines)
            engine.Enabled = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Green, Message = "Engines On", Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds", duration = 4 });
    }
    public void EnginesOff()
    {
        foreach (var engine in Engines)
            engine.Enabled = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Yellow, Message = "Engines Off", Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds", duration = 4 });
    }

    public void GeneratorsOn()
    {
        foreach (var gen in HGens)
            gen.Enabled = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Green, Message = "O2/H2 Gen On", Sprite = "MyObjectBuilder_Ore/Ice", duration = 4 });
    }
    public void GeneratorsOff()
    {
        foreach (var gen in HGens)
            gen.Enabled = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Yellow, Message = "O2/H2 Gen Off", Sprite = "MyObjectBuilder_Ore/Ice", duration = 4 });
    }
    public void AntennaeOn()
    {
        foreach (var antenna in Antennae)
            antenna.Enabled = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Green, Message = "Antenna On", Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_3.dds", duration = 4 });
    }
    public void AntennaeOff()
    {
        foreach (var antenna in Antennae)
            antenna.Enabled = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Red, Message = "Antenna Off", Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_3.dds", duration = 4 });
    }
    public void WheelsOff()
    {
        foreach (var Wheel in Wheels)
            Wheel.Enabled = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Blue, Message = "Wheels powered off", Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds", duration = 4 });
    }
    public void HandbrakeOn()
    {
        if (null != controller)
            controller.HandBrake = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Green, Message = "Handbrake engaged", Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds", duration = 4 });
    }
    public void HandbrakeOff()
    {
        if (null != controller)
            controller.HandBrake = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Yellow, Message = "Handbrake disengaged", Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds", duration = 4 });
    }
    public void Deploy()
    {
        if (null != DeployTimer)
        {
            // Put handbrakes and rotor lock on, assuming that the Timer will toggle these
            if (null != controller)
                controller.HandBrake = false;
            ForwardHitch.RotorLock = false;
            // Trigger the timer, which will run in the next frame
            DeployTimer.Trigger();
        }
        else
        {
            if (null != controller)
                controller.HandBrake = true;
            ForwardHitch.RotorLock = true;
        }
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Yellow, Message = "Trailer Deployed", Sprite = "Arrow", duration = 4 });
    }
    public void Stow()
    {
        if (null != StowTimer)
        {
            // Put handbrakes and rotor lock on, assuming that the Timer will toggle these
            if (null != controller)
                controller.HandBrake = true;
            ForwardHitch.RotorLock = true;
            // Trigger the timer, which will run in the next frame
            StowTimer.Trigger();
        }
        else
        {
            if (null != controller)
                controller.HandBrake = false;
            ForwardHitch.RotorLock = false;
        }
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.GreenYellow, Message = "Trailer Stowed", Sprite = "Arrow", SpriteRotation = (float)Math.PI, duration = 4 });
    }
    public void Detach()
    {
        if (program.CfgAutoDeploy)
            Deploy();
        // Get the grid that's towing me
        IMyCubeGrid TowingGrid = program.Couplings[ForwardHitch.TopGrid].GetOtherGrid(Grid);

        // Get the thing that's towing me to detach me
        program.Couplings[ForwardHitch.TopGrid].GetOtherHinge(Grid).Detach();

        // Now remove me and all subsequent trailers from the Consist
        if (TowingGrid == program.Me.CubeGrid)
        {
            // I'm being towed by the tractor vehicle
            program.FirstTrailer = null;
        }
        else
        {
            // I'm being towed by some trailer, let's find it
            program.Trailers[program.Couplings[ForwardHitch.TopGrid].GetOtherGrid(Grid)].NextTrailer = null;
        }
        // Now whatever is towing me, has forgotten me. Rebuild the Consist.
        program.ArrangeTrailersIntoTrain(program.FirstTrailer);
        program.BuildTopMenu();
        program.ActivateTopMenu();
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Maroon, TextColor = Color.Yellow, Message = "Detached", Sprite = "Cross", duration = 4 });
    }
    public void WeaponsLive()
    {
        foreach (var Weapon in Weapons)
            Weapon.Enabled = true;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Maroon, TextColor = Color.Green, Message = "Weapons Live", Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem", duration = 4 });
    }
    public void WeaponsSafe()
    {
        foreach (var Weapon in Weapons)
            Weapon.Enabled = false;
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.SaddleBrown, TextColor = Color.Red, Message = "Weapons Safe", Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem", duration = 4 });
    }
    public void SwitchConnector()
    {
        foreach (var Connector in Connectors)
            Connector.ToggleConnect();
        ManagedDisplay.SetFeedback(new Feedback { BackgroundColor = Color.Black, TextColor = Color.Yellow, Message = "Switch Connector", Sprite = "CircleHollow", duration = 4 });
    }

    public IMyCubeGrid GetGrid()
    {
        return this.Grid;
    }

    public bool DetectNextTrailer()
    {
        IMyCubeGrid NextGrid;
        foreach (var coupling in program.Couplings.Values)
        {
            if (null != RearHitch &amp;&amp; RearHitch.IsAttached &amp;&amp; coupling.ContainsPart(RearHitch.Top))
            {
                NextGrid = coupling.GetOtherGrid(this.Grid);
                if (null != NextGrid &amp;&amp; program.Trailers.ContainsKey(NextGrid))
                {
                    NextTrailer = program.Trailers[NextGrid];
                    return true;
                }
            }
        }
        return false;
    }

    public void BuildMenu(Action BackMenuAction)
    {
        Menu.Clear();
        Menu.Add(new MenuItem() { MenuText = Name, TextColor = Color.White, Sprite = "AH_PullUp", SpriteColor = Color.White, SpriteRotation = (float)(1.5f * Math.PI), Action = BackMenuAction });
        Menu.Add(new MenuItem() { MenuText = "Unpack / Deploy", Sprite = "Arrow", SpriteColor = Color.Green, SpriteRotation = (float)Math.PI, TextColor = Color.Gray, Action = Deploy });
        Menu.Add(new MenuItem() { MenuText = "Pack / Stow for travel", Sprite = "Arrow", SpriteColor = Color.Green, TextColor = Color.Gray, Action = Stow });
        Menu.Add(new MenuItem() { MenuText = "Detach this trailer", Sprite = "Cross", SpriteColor = Color.Red, TextColor = Color.Gray, Action = Detach });
        if (null != RearHitch &amp;&amp; !RearHitch.IsAttached)
            Menu.Add(new MenuItem() { MenuText = "Attach another trailer", Sprite = "Textures\\FactionLogo\\Traders\\TraderIcon_2.dds", TextColor = Color.Gray, SpriteColor = Color.YellowGreen, Action = RearHitch.Attach });
        if (Batteries.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "Batteries recharge", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Yellow, Action = () =&gt; SetBatteryChargeMode(ChargeMode.Recharge) });
            Menu.Add(new MenuItem() { MenuText = "Batteries auto", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Green, Action = () =&gt; SetBatteryChargeMode(ChargeMode.Auto) });
            Menu.Add(new MenuItem() { MenuText = "Batteries discharge", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.Cyan, Action = () =&gt; SetBatteryChargeMode(ChargeMode.Discharge) });
            Menu.Add(new MenuItem() { MenuText = "Batteries off", TextColor = Color.Gray, Sprite = "IconEnergy", SpriteColor = Color.DarkRed, Action = DisableBattery });
        }
        if (Engines.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "Engines on", TextColor = Color.Gray, SpriteColor = Color.Green, Action = EnginesOn, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds" });
            Menu.Add(new MenuItem() { MenuText = "Engines off", TextColor = Color.Gray, SpriteColor = Color.Red, Action = EnginesOff, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_27.dds" });
        }
        if (HTanks.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "H Tank Stockpile on", TextColor = Color.Gray, SpriteColor = Color.Cyan, Action = HydrogenTankStockpileOn, Sprite = "MyObjectBuilder_GasContainerObject/HydrogenBottle" });
            Menu.Add(new MenuItem() { MenuText = "H Tank Stockpile off", TextColor = Color.Gray, SpriteColor = Color.Green, Action = HydrogenTankStockpileOff, Sprite = "MyObjectBuilder_GasContainerObject/HydrogenBottle" });
        }
        if (HGens.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "Generators on", TextColor = Color.Gray, SpriteColor = Color.Green, Action = GeneratorsOn, Sprite = "MyObjectBuilder_Ore/Ice" });
            Menu.Add(new MenuItem() { MenuText = "Generators off", TextColor = Color.Gray, SpriteColor = Color.Red, Action = GeneratorsOff, Sprite = "MyObjectBuilder_Ore/Ice" });
        }
        if (Connectors.Count&gt;0)
        {
            Menu.Add(new MenuItem() { MenuText = "Switch Connector(s)", TextColor = Color.Gray, SpriteColor = Color.Yellow, Action = SwitchConnector, Sprite = "CircleHollow" });
        }
        if (Antennae.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "Antenna on", TextColor = Color.Gray, SpriteColor = Color.Green, Action = AntennaeOn, Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_3.dds" });
            Menu.Add(new MenuItem() { MenuText = "Antenna off", TextColor = Color.Gray, SpriteColor = Color.Red, Action = AntennaeOff, Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_3.dds" });
        }
        if (TimersWithTask.Count &gt; 0)
        {
            foreach (var TimerWithTask in TimersWithTask)
            {
                Menu.Add(new MenuItem() { MenuText = TimerWithTask.TaskName, TextColor = Color.Gray, SpriteColor = Color.Blue, Action = TimerWithTask.Timer.Trigger, Sprite = "Textures\\FactionLogo\\Builders\\BuilderIcon_1.dds" });
            }
        }
        if (Weapons.Count &gt; 0)
        {
            Menu.Add(new MenuItem() { MenuText = "Weapons Live", TextColor = Color.Gray, SpriteColor = Color.Green, Action = WeaponsLive, Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem" });
            Menu.Add(new MenuItem() { MenuText = "Weapons Safe", TextColor = Color.Gray, SpriteColor = Color.Red, Action = WeaponsSafe, Sprite = "MyObjectBuilder_PhysicalGunObject/PreciseAutomaticRifleItem" });
        }
        if (null != controller)
        {
            if (controller.HandBrake)
                Menu.Add(new MenuItem() { MenuText = "Disengage Handbrake", TextColor = Color.Gray, SpriteColor = Color.Yellow, Action = HandbrakeOff, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds" });
            else
                Menu.Add(new MenuItem() { MenuText = "Engage Handbrake", TextColor = Color.Gray, SpriteColor = Color.Green, Action = HandbrakeOn, Sprite = "Textures\\FactionLogo\\Others\\OtherIcon_22.dds" });
        }
    }
}</Program>
              <Storage />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>TEXT_AND_IMAGE</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <ContentType>TEXT_AND_IMAGE</ContentType>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
              <SubtypeName>ButtonPanelSmall</SubtypeName>
              <EntityId>108682826142841218</EntityId>
              <Min x="1" y="3" z="17" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Button Panel</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Detach</Action>
                      <BlockEntityId>102506709836632072</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <AnyoneCanUse>false</AnyoneCanUse>
              <CustomButtonNames>
                <dictionary>
                  <item>
                    <Key>0</Key>
                    <Value>Hinge - Detach</Value>
                  </item>
                </dictionary>
              </CustomButtonNames>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="2" y="3" z="17" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="3" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="3" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="3" z="16" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>116537073384632894</EntityId>
              <Min x="0" y="2" z="4" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.4972048</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="3" z="9" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="10" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="11" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="12" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="13" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="14" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="3" z="15" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="10" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="11" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="12" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="13" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="14" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="3" z="15" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="10" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="11" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="14" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="3" z="15" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>106928917706720379</EntityId>
              <Min x="0" y="2" z="6" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.4972048</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_OxygenTank">
              <SubtypeName>SmallHydrogenTankSmall</SubtypeName>
              <EntityId>86821904691907116</EntityId>
              <Min x="0" y="2" z="10" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.12</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Hydrogen Tank</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsStockpiling>false</IsStockpiling>
              <FilledRatio>0.4972048</FilledRatio>
              <AutoRefill>false</AutoRefill>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorSorter">
              <SubtypeName>SmallBlockConveyorSorter</SubtypeName>
              <EntityId>120614645453157455</EntityId>
              <Min x="0" y="3" z="14" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.064</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Conveyor Sorter 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsWhiteList>false</IsWhiteList>
              <DefinitionIds />
              <DefinitionTypes />
              <DrainAll>false</DrainAll>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmallCurved</SubtypeName>
              <EntityId>97704403130568020</EntityId>
              <Min x="0" y="3" z="15" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="10" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="11" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_HydrogenEngine">
              <SubtypeName>SmallHydrogenEngine</SubtypeName>
              <EntityId>81820209517599601</EntityId>
              <Min x="-1" y="2" z="12" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hydrogen Engine</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Capacity>5000</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="14" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="3" z="15" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>76999053404022909</EntityId>
              <Min x="0" y="3" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>138227388746960893</EntityId>
              <Min x="2" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>117490842497204375</EntityId>
              <Min x="-2" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>82518031774965743</EntityId>
              <Min x="1" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ConveyorConnector">
              <SubtypeName>ConveyorTubeSmall</SubtypeName>
              <EntityId>118362775579415250</EntityId>
              <Min x="-1" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Conveyor">
              <SubtypeName>SmallBlockConveyor</SubtypeName>
              <EntityId>139460536933076155</EntityId>
              <Min x="0" y="5" z="6" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>95321369414452399</EntityId>
              <Min x="0" y="6" z="6" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>false</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame100</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>900</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Reactor</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Capacity>1</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>77579394502762630</EntityId>
              <Min x="0" y="4" z="6" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>false</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame100</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>900</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Small Reactor 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Capacity>1</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>119259678702231530</EntityId>
              <Min x="-1" y="6" z="6" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <GyroPower>0.5</GyroPower>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>103878927289655964</EntityId>
              <Min x="1" y="6" z="6" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Gyroscope 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <GyroPower>0.5</GyroPower>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="6" z="6" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="6" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>96644555008583408</EntityId>
              <Min x="-3" y="5" z="7" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 10</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>123929559861229311</EntityId>
              <Min x="-3" y="5" z="15" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 7</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="7" z="10" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="7" z="14" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="7" z="10" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="5" z="14" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="5" z="10" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="14" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="5" z="10" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>94625502893523129</EntityId>
              <Min x="3" y="5" z="15" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 8</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="6" z="14" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="5" z="14" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="6" z="10" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="7" z="14" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="10" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>125769731963575836</EntityId>
              <Min x="3" y="5" z="7" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 11</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallLCDPanel</SubtypeName>
              <EntityId>80539067391590831</EntityId>
              <Min x="3" y="5" z="11" />
              <IntegrityPercent>0.5</IntegrityPercent>
              <BuildPercent>0.5</BuildPercent>
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <CustomName>LCD Panel 12</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>false</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-4" y="4" z="-1" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="4" y="4" z="4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-4" y="4" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="4" y="4" z="15" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-4" y="4" z="15" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="4" y="4" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-4" y="4" z="10" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="11" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="11" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="12" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="14" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="14" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="13" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="13" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="3" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="4" y="4" z="0" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="3" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="2" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="1" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-4" y="4" z="0" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CameraBlock">
              <SubtypeName>SmallCameraBlock</SubtypeName>
              <EntityId>117996123944700886</EntityId>
              <Min x="-2" y="7" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Control - Camera</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <IsActive>false</IsActive>
              <Fov>1.04719758</Fov>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_2</SubtypeName>
              <EntityId>129890806495635080</EntityId>
              <Min x="0" y="5" z="-2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Compass - Appearance]
Draw radial compass=false
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Control - Compass Screen</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <ContentType>SCRIPT</ContentType>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <Version>1</Version>
              <CustomizeScripts>true</CustomizeScripts>
              <ScriptBackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Sprites>
                  <MySerializableSprite>
                    <Position xsi:nil="true" />
                    <Size xsi:nil="true" />
                    <Color xsi:nil="true" />
                    <Alignment>LEFT</Alignment>
                    <Index>0</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="256" y="173.5" />
                    <Size x="25" y="25" />
                    <Color>4288059030</Color>
                    <Data>Triangle</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>1</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="-53.68335" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>2</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="5.393573" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>S</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>3</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="5.393573" y="136" />
                    <Size x="6" y="50" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>4</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="64.4705" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>5</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="123.547417" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>6</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="182.624344" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>SW</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>7</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="182.624344" y="136" />
                    <Size x="6" y="50" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>8</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="241.701263" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>9</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="300.7782" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>10</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="359.8551" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>W</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>11</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="359.8551" y="136" />
                    <Size x="6" y="50" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>12</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="418.932037" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>13</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="478.008972" y="148.5" />
                    <Size x="6" y="25" />
                    <Color>4288059030</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>14</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="256" y="81.08" />
                    <Size x="129.599991" y="55.8399963" />
                    <Color>4278190080</Color>
                    <Data>SquareSimple</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>15</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Position x="256" y="81.08" />
                    <Size x="129.599991" y="55.8399963" />
                    <Color>4288059030</Color>
                    <Data>AH_TextBox</Data>
                    <Alignment>LEFT</Alignment>
                    <Index>16</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="224.896" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>2</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>17</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="256" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>4</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>18</Index>
                  </MySerializableSprite>
                  <MySerializableSprite>
                    <Type>TEXT</Type>
                    <Position x="287.104" y="55.1600037" />
                    <Size xsi:nil="true" />
                    <Color>4288059030</Color>
                    <Data>4</Data>
                    <FontId>White</FontId>
                    <Alignment>LEFT</Alignment>
                    <RotationOrScale>1.8</RotationOrScale>
                    <Index>19</Index>
                  </MySerializableSprite>
                </Sprites>
                <Length>20</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="2" y="7" z="0" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-3" y="5" z="2" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="7" z="2" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>77883232208986601</EntityId>
              <Min x="-4" y="5" z="6" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Bottom</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Arrow</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>91393787386250965</EntityId>
              <Min x="4" y="5" z="6" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Bottom 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Arrow</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>91148270641952824</EntityId>
              <Min x="4" y="3" z="7" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Bottom 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Danger</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>143055720528877857</EntityId>
              <Min x="-4" y="3" z="7" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Bottom 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <SelectedImages>
                <string>Danger</string>
              </SelectedImages>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>2</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_1</SubtypeName>
              <EntityId>78154434428525713</EntityId>
              <Min x="4" y="2" z="7" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Top</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Red" />
              <FontSize>6.5</FontSize>
              <PublicDescription>Danger!
High Voltage</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <Alignment>Align_Center</Alignment>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>5</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_1</SubtypeName>
              <EntityId>100987166918748333</EntityId>
              <Min x="-4" y="2" z="7" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Top 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Red" />
              <FontSize>6.5</FontSize>
              <PublicDescription>Danger!
High Voltage</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <Alignment>Align_Center</Alignment>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>5</TextPadding>
              <PreserveAspectRatio>true</PreserveAspectRatio>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="5" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="5" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="5" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="3" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="4" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="5" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="0.55" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="4" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RadioAntenna">
              <SubtypeName>SmallBlockRadioAntenna</SubtypeName>
              <EntityId>123151218753151576</EntityId>
              <Min x="2" y="5" z="2" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Control - Antenna</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <BroadcastRadius>1499.99963</BroadcastRadius>
              <ShowShipName>true</ShowShipName>
              <EnableBroadcasting>true</EnableBroadcasting>
              <AttachedPB>0</AttachedPB>
              <IgnoreAllied>false</IgnoreAllied>
              <IgnoreOther>true</IgnoreOther>
              <HudText />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="3" y="6" z="2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="7" z="2" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>105069291553723553</EntityId>
              <Min x="-2" y="5" z="1" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Artificial Horizon - General]
Text surface name tag=Horizon
;Time before predicted collision that the AH will
;warn you to pull up (-1 disables warning)
Collision warning time threshold (s)=5
Collision warning sound name tag=Horizon
Collision warning sound loop interval (s)=0.166
Optional reference name tag=Reference
Surface to Sealevel transition alt. (m)=1000
Show XYZ axes in space=true
Sun rotation axis=X:0 Y:-1 Z:0

[Artificial Horizon - Colors]
Sky background=10, 30, 50, 255
Ground background=10, 10, 10, 255
Space background=0, 0, 0, 255
Prograde velocity=150, 150, 0, 255
Retrograde velocity=150, 0, 0, 255
Text=150, 150, 150, 100
Text box outline=150, 150, 150, 100
Text box background=10, 10, 10, 150
Horizon line=0, 0, 0, 255
Elevation lines=150, 150, 150, 255
Orientation indicator=150, 150, 150, 255
Space x-axis=100, 50, 0, 150
Space y-axis=0, 100, 0, 150
Space z-axis=0, 50, 100, 150

[Artificial Horizon - Text Surface Config]
Show on screen 0=false
Show on screen 1=false
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB - Artificial Horizon (Redux)</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>
#region In-game Script
/*
/ //// / Whip's Artificial Horizon Redux / //// /

HOW DO I USE THIS?

1. Place this script in a programmable block.
2. Place a ship controller.
3. Add "Horizon" to the name of text panels and text surfaces
    - Configure which surface the script is shown on in the
      Custom Data of the text surface (not needed for regular LCDs)
4. Enjoy!




=================================================
    DO NOT MODIFY VARIABLES IN THE SCRIPT!

 USE THE CUSTOM DATA OF THIS PROGRAMMABLE BLOCK!
=================================================


























HEY! DONT EVEN THINK ABOUT TOUCHING BELOW THIS LINE!

*/

const string VERSION = "1.9.1";
const string DATE = "2021/04/22";

#region Fields
List&lt;IMyShipController&gt; Controllers
{
    get
    {
        return _taggedControllers.Count &gt; 0 ? _taggedControllers : _allControllers;
    }
}

double _altitudeTransitionThreshold = 1000;
IMyShipController reference = null;
IMyShipController lastActiveShipController = null;
string _textSurfaceNameTag = "Horizon";
string _soundBlockNameTag = "Horizon";
string _referenceNameTag = "Reference";
string _lastSetupResult = "";
Vector3D _sunRotationAxis = new Vector3D(0, -1, 0);
Color _skyColor = new Color(10, 30, 50);
Color _groundColor = new Color(10, 10, 10);
Color _spaceBackgroundColor = new Color(0, 0, 0);
Color _progradeColor = new Color(150, 150, 0);
Color _retrogradeColor = new Color(150, 0, 0);
Color _textColor = new Color(150, 150, 150, 100);
Color _textBoxColor = new Color(150, 150, 150, 100);
Color _textBoxBackground = new Color(10, 10, 10, 150);
Color _horizonLineColor = new Color(0, 0, 0);
Color _elevationLineColor = new Color(150, 150, 150);
Color _orientationLineColor = new Color(150, 150, 150);
Color _altitudeWarningColor = Color.Red;
Color _xAxisColor = new Color(100, 50, 0, 150);
Color _yAxisColor = new Color(0, 100, 0, 150);
Color _zAxisColor = new Color(0, 50, 100, 150);
bool _showXYZAxis = true;
double _collisionSoundInterval = 0.166;
double _timeToCollisionThreshold = 5;

double _collisionSoundTimeSum = 141;
bool _lastCollisionWarningState = false;
bool _clearSpriteCache = false;

#region Ini Keys
const string INI_SECTION_GENERAL = "Artificial Horizon - General";
const string INI_GENERAL_TEXT_NAME = "Text surface name tag";
const string INI_GENERAL_SOUND_NAME = "Collision warning sound name tag";
const string INI_GENERAL_SOUND_INTERVAL = "Collision warning sound loop interval (s)";
const string INI_GENERAL_COLLISION_THRESH = "Collision warning time threshold (s)";
const string INI_GENERAL_REF_NAME = "Optional reference name tag";
const string INI_GENERAL_ALT_TRANS = "Surface to Sealevel transition alt. (m)"; //TODO: Add comment
const string INI_GENERAL_SHOW_XYZ = "Show XYZ axes in space";
const string INI_GENERAL_SUN_ROTATION = "Sun rotation axis";

const string INI_SECTION_COLORS = "Artificial Horizon - Colors";
const string INI_COLORS_SKY = "Sky background";
const string INI_COLORS_GROUND = "Ground background";
const string INI_COLORS_SPACE = "Space background";
const string INI_COLORS_PROGRADE = "Prograde velocity";
const string INI_COLORS_RETROGRADE = "Retrograde velocity";
const string INI_COLORS_TEXT = "Text";
const string INI_COLORS_TEXT_BOX_OUTLINE = "Text box outline";
const string INI_COLORS_TEXT_BOX_BACKGROUND = "Text box background";
const string INI_COLORS_HORIZON_LINE = "Horizon line";
const string INI_COLORS_ELEVATION_LINE = "Elevation lines";
const string INI_COLORS_ORENTATION = "Orientation indicator";
const string INI_COLORS_X_AXIS = "Space x-axis";
const string INI_COLORS_Y_AXIS = "Space y-axis";
const string INI_COLORS_Z_AXIS = "Space z-axis";

const string INI_SECTION_TEXT_SURF = "Artificial Horizon - Text Surface Config";
const string INI_TEXT_SURF_TEMPLATE = "Show on screen {0}";
#endregion

const double TICK = 1.0 / 60.0;

readonly List&lt;IMyShipController&gt; _allControllers = new List&lt;IMyShipController&gt;();
readonly List&lt;IMyShipController&gt; _taggedControllers = new List&lt;IMyShipController&gt;();
readonly List&lt;IMyTextSurface&gt; _textSurfaces = new List&lt;IMyTextSurface&gt;();
readonly List&lt;IMySoundBlock&gt; _soundBlocks = new List&lt;IMySoundBlock&gt;();
readonly MyIni _ini = new MyIni();
readonly MyIni _textSurfaceIni = new MyIni();
readonly ArtificialHorizon _artificialHorizon;
readonly Scheduler _scheduler;
readonly ScheduledAction _scheduledSetup;
readonly RuntimeTracker _runtimeTracker;
readonly RunningSymbol _runningSymbol = new RunningSymbol(new string[] { "", ".", "..", "...", "....", "...", "..", "." });
readonly CircularBuffer&lt;Action&gt; _buffer;
#endregion

#region Main methods
Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update1;

    _runtimeTracker = new RuntimeTracker(this);

    _artificialHorizon = new ArtificialHorizon(
            _sunRotationAxis,
            _skyColor,
            _groundColor,
            _progradeColor,
            _retrogradeColor,
            _textColor,
            _textBoxColor,
            _textBoxBackground,
            _horizonLineColor,
            _elevationLineColor,
            _spaceBackgroundColor,
            _orientationLineColor,
            _altitudeWarningColor,
            _xAxisColor,
            _yAxisColor,
            _zAxisColor,
            _altitudeTransitionThreshold,
            _timeToCollisionThreshold,
            _showXYZAxis,
            this);

    Setup();

    _scheduledSetup = new ScheduledAction(Setup, 0.1);

    _scheduler = new Scheduler(this);

    float step = 1f / 9f;
    _buffer = new CircularBuffer&lt;Action&gt;(10);
    _buffer.Add(CalculateAHParams);
    _buffer.Add(() =&gt; UpdateScreens(0 * step, 1 * step));
    _buffer.Add(() =&gt; UpdateScreens(1 * step, 2 * step));
    _buffer.Add(() =&gt; UpdateScreens(2 * step, 3 * step));
    _buffer.Add(() =&gt; UpdateScreens(3 * step, 4 * step));
    _buffer.Add(() =&gt; UpdateScreens(4 * step, 5 * step));
    _buffer.Add(() =&gt; UpdateScreens(5 * step, 6 * step));
    _buffer.Add(() =&gt; UpdateScreens(6 * step, 7 * step));
    _buffer.Add(() =&gt; UpdateScreens(7 * step, 8 * step));
    _buffer.Add(() =&gt; UpdateScreens(8 * step, 9 * step));

    // Scheduled actions
    _scheduler.AddScheduledAction(_scheduledSetup);
    _scheduler.AddScheduledAction(PrintDetailedInfo, 1);
    _scheduler.AddScheduledAction(PlaySounds, 6);
    _scheduler.AddScheduledAction(MoveNextScreens, 60);
}

void Main(string arg)
{
    _runtimeTracker.AddRuntime();
    _scheduler.Update();
    _runtimeTracker.AddInstructions();
}

void CalculateAHParams()
{
    reference = GetControlledShipController(Controllers); // Primary, get active controller
    if (reference == null)
    {
        if (lastActiveShipController != null)
        {
            // Backup, use last active controller
            reference = lastActiveShipController;
        }
        else if (reference == null &amp;&amp; Controllers.Count != 0)
        {
            // Last case, resort to the first controller in the list
            reference = Controllers[0];
        }
        else
        {
            return;
        }
    }

    _artificialHorizon.CalculateParameters(reference, 6);
    lastActiveShipController = reference;
}

void PlaySounds()
{
    if (_soundBlocks.Count == 0)
        return;

    _collisionSoundTimeSum += 10 * TICK;

    if (_collisionSoundTimeSum &lt; _collisionSoundInterval &amp;&amp; _artificialHorizon.CollisionWarning == _lastCollisionWarningState)
        return;

    _collisionSoundTimeSum = 0;

    foreach (var block in _soundBlocks)
    {
        if (_artificialHorizon.CollisionWarning)
            block.Play();
        else
            block.Stop();
    }

    _lastCollisionWarningState = _artificialHorizon.CollisionWarning;
}

void MoveNextScreens()
{
    _buffer.MoveNext().Invoke();
}

void UpdateScreens(float startProportion, float endProportion)
{
    int start = (int)(startProportion * _textSurfaces.Count);
    int end = (int)(endProportion * _textSurfaces.Count);
    for (int i = start; i &lt; end; ++i)
    {
        var textSurface = _textSurfaces[i];
        _artificialHorizon.Draw(textSurface, _clearSpriteCache);
    }
}

void PrintDetailedInfo()
{
    Echo($"WMI Artificial Horizon Redux{_runningSymbol.Iterate()}\n(Version {VERSION} - {DATE})\n\nCustomize variables in Custom Data!");
    Echo($"\nNext refresh in {Math.Max(_scheduledSetup.RunInterval - _scheduledSetup.TimeSinceLastRun, 0):N0} seconds");
    Echo($"{_lastSetupResult}");
    Echo($"Text surfaces: {_textSurfaces.Count}\n");
    Echo($"Reference seat:\n\"{(reference?.CustomName)}\"");
    Echo(_runtimeTracker.Write());
}
#endregion

#region Ini
void ParseIni()
{
    _ini.Clear();
    if (_ini.TryParse(Me.CustomData))
    {
        // General
        _textSurfaceNameTag = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_TEXT_NAME).ToString(_textSurfaceNameTag);
        _timeToCollisionThreshold = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_COLLISION_THRESH).ToDouble(_timeToCollisionThreshold);
        _soundBlockNameTag = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_SOUND_NAME).ToString(_soundBlockNameTag);
        _collisionSoundInterval = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_SOUND_INTERVAL).ToDouble(_collisionSoundInterval);
        _referenceNameTag = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_REF_NAME).ToString(_referenceNameTag);
        _altitudeTransitionThreshold = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_ALT_TRANS).ToDouble(_altitudeTransitionThreshold);
        _showXYZAxis = _ini.Get(INI_SECTION_GENERAL, INI_GENERAL_SHOW_XYZ).ToBoolean(_showXYZAxis);
        _sunRotationAxis = MyIniHelper.GetVector3D(INI_SECTION_GENERAL, INI_GENERAL_SUN_ROTATION, _ini, _sunRotationAxis);

        // Colors
        _skyColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_SKY, _ini, _skyColor);
        _groundColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_GROUND, _ini, _groundColor);
        _spaceBackgroundColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_SPACE, _ini, _spaceBackgroundColor);
        _progradeColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_PROGRADE, _ini, _progradeColor);
        _retrogradeColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_RETROGRADE, _ini, _retrogradeColor);
        _textColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_TEXT, _ini, _textColor);
        _textBoxColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_TEXT_BOX_OUTLINE, _ini, _textBoxColor);
        _textBoxBackground = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_TEXT_BOX_BACKGROUND, _ini, _textBoxBackground);
        _horizonLineColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_HORIZON_LINE, _ini, _horizonLineColor);
        _elevationLineColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_ELEVATION_LINE, _ini, _elevationLineColor);
        _orientationLineColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_ORENTATION, _ini, _orientationLineColor);
        _xAxisColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_X_AXIS, _ini, _xAxisColor);
        _yAxisColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_Y_AXIS, _ini, _yAxisColor);
        _zAxisColor = MyIniHelper.GetColor(INI_SECTION_COLORS, INI_COLORS_Z_AXIS, _ini, _zAxisColor);
    }
    else if (!string.IsNullOrWhiteSpace(Me.CustomData))
    {
        _ini.EndContent = Me.CustomData;
    }

    WriteIni();
}

void WriteIni()
{
    // General
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_TEXT_NAME, _textSurfaceNameTag);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_COLLISION_THRESH, _timeToCollisionThreshold);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_SOUND_NAME, _soundBlockNameTag);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_SOUND_INTERVAL, _collisionSoundInterval);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_REF_NAME, _referenceNameTag);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_ALT_TRANS, _altitudeTransitionThreshold);
    _ini.Set(INI_SECTION_GENERAL, INI_GENERAL_SHOW_XYZ, _showXYZAxis);
    MyIniHelper.SetVector3D(INI_SECTION_GENERAL, INI_GENERAL_SUN_ROTATION, ref _sunRotationAxis, _ini);

    // Colors
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_SKY, _skyColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_GROUND, _groundColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_SPACE, _spaceBackgroundColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_PROGRADE, _progradeColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_RETROGRADE, _retrogradeColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_TEXT, _textColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_TEXT_BOX_OUTLINE, _textBoxColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_TEXT_BOX_BACKGROUND, _textBoxBackground, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_HORIZON_LINE, _horizonLineColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_ELEVATION_LINE, _elevationLineColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_ORENTATION, _orientationLineColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_X_AXIS, _xAxisColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_Y_AXIS, _yAxisColor, _ini);
    MyIniHelper.SetColor(INI_SECTION_COLORS, INI_COLORS_Z_AXIS, _zAxisColor, _ini);

    _ini.SetComment(INI_SECTION_GENERAL, INI_GENERAL_COLLISION_THRESH, "Time before predicted collision that the AH will\nwarn you to pull up (-1 disables warning)");

    string output = _ini.ToString();
    if (!string.Equals(output, Me.CustomData))
        Me.CustomData = output;
}
#endregion

#region Setup
void Setup()
{
    _clearSpriteCache = !_clearSpriteCache;
    
    ParseIni();
    Log.Clear();

    if (_artificialHorizon != null)
    {
        _artificialHorizon.UpdateFields(
                _sunRotationAxis,
                _skyColor,
                _groundColor,
                _progradeColor,
                _retrogradeColor,
                _textColor,
                _textBoxColor,
                _textBoxBackground,
                _horizonLineColor,
                _elevationLineColor,
                _spaceBackgroundColor,
                _orientationLineColor,
                _altitudeWarningColor,
                _xAxisColor,
                _yAxisColor,
                _zAxisColor,
                _altitudeTransitionThreshold,
                _timeToCollisionThreshold,
                _showXYZAxis);
    }

    _textSurfaces.Clear();
    _taggedControllers.Clear();
    _allControllers.Clear();
    _soundBlocks.Clear();
    GridTerminalSystem.GetBlocksOfType&lt;IMyTerminalBlock&gt;(null, PopulateLists);

    if (_textSurfaces.Count == 0)
        Log.Error($"No text panels or text surface providers with name tag '{_textSurfaceNameTag}' were found.");

    if (_allControllers.Count == 0)
        Log.Error($"No ship controllers were found.");
    else
    {
        if (_taggedControllers.Count == 0)
            Log.Info($"No ship controllers with name tag \"{_referenceNameTag}\" were found. Using all available ship controllers. (This is NOT an error!)");
        else
            Log.Info($"One or more ship controllers with name tag \"{_referenceNameTag}\" were found. Using these to orient the artificial horizon.");
    }

    if (_soundBlocks.Count == 0)
        Log.Info($"No optional sound blocks with name tag \"{_soundBlockNameTag}\" were found. Sounds will not be played when ground collision is imminent.");

    _lastSetupResult = Log.Write();
}

bool PopulateLists(IMyTerminalBlock block)
{
    if (!block.IsSameConstructAs(Me))
        return false;

    if (StringContains(block.CustomName, _textSurfaceNameTag))
    {
        AddTextSurfaces(block, _textSurfaces);
    }

    var controller = block as IMyShipController;
    if (controller != null)
    {
        _allControllers.Add(controller);
        if (StringContains(block.CustomName, _referenceNameTag))
            _taggedControllers.Add(controller);
        return false;
    }

    var sound = block as IMySoundBlock;
    if (sound != null &amp;&amp; StringContains(block.CustomName, _soundBlockNameTag))
    {
        _soundBlocks.Add(sound);
        if (!sound.IsSoundSelected)
        {
            Log.Warning($"Sound block named \"{sound.CustomName}\" does not have a sound selected.");
        }
    }

    return false;
}

void AddTextSurfaces(IMyTerminalBlock block, List&lt;IMyTextSurface&gt; textSurfaces)
{
    var textSurface = block as IMyTextSurface;
    if (textSurface != null)
    {
        textSurfaces.Add(textSurface);
        return;
    }

    var surfaceProvider = block as IMyTextSurfaceProvider;
    if (surfaceProvider == null)
        return;

    _textSurfaceIni.Clear();
    bool parsed = _textSurfaceIni.TryParse(block.CustomData);

    if (!parsed &amp;&amp; !string.IsNullOrWhiteSpace(block.CustomData))
    {
        _textSurfaceIni.EndContent = block.CustomData;
    }

    int surfaceCount = surfaceProvider.SurfaceCount;
    for (int i = 0; i &lt; surfaceCount; ++i)
    {
        string iniKey = string.Format(INI_TEXT_SURF_TEMPLATE, i);
        bool display = _textSurfaceIni.Get(INI_SECTION_TEXT_SURF, iniKey).ToBoolean(i == 0 &amp;&amp; !(block is IMyProgrammableBlock));
        if (display)
            textSurfaces.Add(surfaceProvider.GetSurface(i));

        _textSurfaceIni.Set(INI_SECTION_TEXT_SURF, iniKey, display);
    }

    string output = _textSurfaceIni.ToString();
    if (!string.Equals(output, block.CustomData))
        block.CustomData = output;
}
#endregion

#region General methods
IMyShipController GetControlledShipController(List&lt;IMyShipController&gt; SCs)
{
    foreach (IMyShipController thisController in SCs)
    {
        if (thisController.IsUnderControl &amp;&amp; thisController.CanControlShip)
            return thisController;
    }

    return null;
}

public static bool StringContains(string source, string toCheck, StringComparison comp = StringComparison.OrdinalIgnoreCase)
{
    return source?.IndexOf(toCheck, comp) &gt;= 0;
}
#endregion

#region Artificial horizon
class ArtificialHorizon
{
    #region Fields
    public bool CollisionWarning { get; private set; } = false;

    Color _skyColor;
    Color _groundColor;
    Color _progradeColor;
    Color _retrogradeColor;
    Color _textColor;
    Color _horizonLineColor;
    Color _elevationLineColor;
    Color _spaceBackgroundColor;
    Color _textBoxBorderColor;
    Color _textBoxBackgroundColor;
    Color _orientationColor;
    Color _altitudeWarningColor;
    Color _xAxisColor;
    Color _yAxisColor;
    Color _zAxisColor;
    double _bearing;
    double _surfaceAltitude;
    double _sealevelAltitude;
    double _altitudeTransitionThreshold;
    double _lastSurfaceAltitude = 0;
    double _collisionTimeThreshold;
    double _verticalSpeed;
    float _speed;
    float _pitch;
    float _roll;
    float _rollCos;
    float _rollSin;
    float _acceleration;
    float _collisionTimeProportion;
    bool _inGravity;
    bool _movingBackwards;
    bool _showXYZAxis = true;
    bool _showPullUp = false;
    bool _lastCollisionWarning = false;
    Vector3D _sunRotationAxis;
    Vector3D _gravity;
    Vector3D _velocity;
    Vector3D _lastVelocity;
    Vector3D _axisZCosVector;
    Vector2 _flattenedVelocity;
    Vector2 _rollOffset;
    Vector2 _pitchOffset;
    Vector2 _xAxisFlattened;
    Vector2 _yAxisFlattened;
    Vector2 _zAxisFlattened;
    Vector2 _xAxisDirn;
    Vector2 _yAxisDirn;
    Vector2 _zAxisDirn;
    Vector2 _xAxisSign;
    Vector2 _yAxisSign;
    Vector2 _zAxisSign;

    Program _program;

    double Altitude
    {
        get
        {
            return _surfaceAltitude &gt;= _altitudeTransitionThreshold ? _sealevelAltitude : _surfaceAltitude;
        }
    }

    string AltitudeLabel
    {
        get
        {
            return _surfaceAltitude &gt;= _altitudeTransitionThreshold ? "Sea level" : "Surface";
        }
    }

    const string VERTICAL_SPEED = "Vertical";
    const string PULL_UP_TEXT = "PULL UP";
    const float PULL_UP_TEXT_SIZE = 1.5f;
    const float STATUS_TEXT_SIZE = 1.3f;
    const float ELEVATION_TEXT_SIZE = 0.8f;
    const float ELEVATION_CONSTANT = 1f;
    const float HORIZON_THICKNESS = 5f;
    const float VELOCITY_INDICATOR_LINE_WIDTH = 5f;
    const float ONE_OVER_HALF_PI = 1f / MathHelper.PiOver2;
    const float AXIS_LINE_WIDTH = 8f;
    const float AXIS_TEXT_OFFSET = 24f;
    const float AXIS_LENGTH_SCALE = 0.6f;
    readonly string[] _axisIcon = new string[3];
    readonly byte[] _axisDrawOrder = new byte[3];
    readonly Vector2 RETROGRADE_CROSS_SIZE = new Vector2(32, 4);
    readonly Vector2 VELOCITY_INDICATOR_SIZE = new Vector2(64, 64);
    readonly Vector2 ELEVATION_LADDER_SIZE = new Vector2(175, 32);
    readonly Vector2 TEXT_BOX_SIZE = new Vector2(120, 45);
    readonly Vector2 AXIS_MARKER_SIZE = new Vector2(24, 48);
    readonly Vector2 PULL_UP_CROSS_SIZE = new Vector2(128, 128);
    readonly StringBuilder _pullUpStringBuilder = new StringBuilder(8);
    readonly StringBuilder _heightStringBuilder = new StringBuilder();
    readonly Color _axisArrowBackColor = new Color(10, 10, 10);
    readonly CircularBuffer&lt;double&gt; _velocityBuffer = new CircularBuffer&lt;double&gt;(5);

    enum AxisEnum : byte { None = 0, X = 1, Y = 2, Z = 4 }
    const AxisEnum ALL_AXIS_ENUMS = AxisEnum.X | AxisEnum.Y | AxisEnum.Z;
    #endregion

    #region Ctor and updating fields
    public ArtificialHorizon(
            Vector3D sunRotationAxis,
            Color skyColor,
            Color groundColor,
            Color progradeColor,
            Color retrogradeColor,
            Color textColor,
            Color textBoxColor,
            Color textBackgroundColor,
            Color horizonLineColor,
            Color elevationLineColor,
            Color spaceBackgroundColor,
            Color orientationColor,
            Color altitudeWarningColor,
            Color xAxisColor,
            Color yAxisColor,
            Color zAxisColor,
            double altitudeTransitionThreshold,
            double collisionTimeThreshold,
            bool showXYZAxis,
            Program program)
    {
        UpdateFields(
                sunRotationAxis,
                skyColor,
                groundColor,
                progradeColor,
                retrogradeColor,
                textColor,
                textBoxColor,
                textBackgroundColor,
                horizonLineColor,
                elevationLineColor,
                spaceBackgroundColor,
                orientationColor,
                altitudeWarningColor,
                xAxisColor,
                yAxisColor,
                zAxisColor,
                altitudeTransitionThreshold,
                collisionTimeThreshold,
                showXYZAxis);
        _pullUpStringBuilder.Append(PULL_UP_TEXT);
        _heightStringBuilder.Append("X");
        _program = program;
    }

    public void UpdateFields(
            Vector3D sunRotationAxis,
            Color skyColor,
            Color groundColor,
            Color progradeColor,
            Color retrogradeColor,
            Color textColor,
            Color textBoxColor,
            Color textBackgroundColor,
            Color horizonLineColor,
            Color elevationLineColor,
            Color spaceBackgroundColor,
            Color orientationColor,
            Color altitudeWarningColor,
            Color xAxisColor,
            Color yAxisColor,
            Color zAxisColor,
            double altitudeTransitionThreshold,
            double collisionTimeThreshold,
            bool showXYZAxis)
    {
        _sunRotationAxis = sunRotationAxis;
        _skyColor = skyColor;
        _groundColor = groundColor;
        _progradeColor = progradeColor;
        _retrogradeColor = retrogradeColor;
        _textColor = textColor;
        _textBoxBorderColor = textBoxColor;
        _textBoxBackgroundColor = textBackgroundColor;
        _horizonLineColor = horizonLineColor;
        _elevationLineColor = elevationLineColor;
        _spaceBackgroundColor = spaceBackgroundColor;
        _orientationColor = orientationColor;
        _altitudeWarningColor = altitudeWarningColor;
        _xAxisColor = xAxisColor;
        _yAxisColor = yAxisColor;
        _zAxisColor = zAxisColor;
        _altitudeTransitionThreshold = altitudeTransitionThreshold;
        _collisionTimeThreshold = collisionTimeThreshold;
        _showXYZAxis = showXYZAxis;
    }
    #endregion

    #region Cached calculations
    public void CalculateParameters(IMyShipController controller, double updatesPerSecond)
    {
        _velocity = controller.GetShipVelocities().LinearVelocity;
        _acceleration = (float)((_velocity - _lastVelocity) * updatesPerSecond).Length();
        _lastVelocity = _velocity;

        if (!Vector3D.IsZero(_velocity, 1e-2))
        {
            Vector3D velocityNorm = _velocity;
            _speed = (float)velocityNorm.Normalize();
            Vector3D localVelocity = Vector3D.Rotate(velocityNorm, MatrixD.Transpose(controller.WorldMatrix));
            _flattenedVelocity.X = (float)Math.Asin(MathHelper.Clamp(localVelocity.X, -1, 1)) * ONE_OVER_HALF_PI;
            _flattenedVelocity.Y = (float)Math.Asin(MathHelper.Clamp(-localVelocity.Y, -1, 1)) * ONE_OVER_HALF_PI;
            _movingBackwards = localVelocity.Z &gt; 1e-3;
        }
        else
        {
            _speed = 0;
            _flattenedVelocity = Vector2.Zero;
            _movingBackwards = false;
        }

        _gravity = controller.GetNaturalGravity();
        _inGravity = !Vector3D.IsZero(_gravity);
        if (_inGravity)
        {
            CalculateArtificialHorizonParameters(controller, updatesPerSecond);
        }
        else
        {
            CalculateSpaceParameters(controller);
        }
    }

    void CalculateArtificialHorizonParameters(IMyShipController controller, double updatesPerSecond)
    {
        Vector3D up = -_gravity;
        Vector3D left = Vector3D.Cross(up, controller.WorldMatrix.Forward);
        Vector3D forward = Vector3D.Cross(left, up);

        var localUpVector = Vector3D.Rotate(up, MatrixD.Transpose(controller.WorldMatrix));
        var flattenedUpVector = new Vector3D(localUpVector.X, localUpVector.Y, 0);
        _roll = (float)VectorMath.AngleBetween(flattenedUpVector, Vector3D.Up) * Math.Sign(Vector3D.Dot(Vector3D.Right, flattenedUpVector));
        _pitch = (float)VectorMath.AngleBetween(forward, controller.WorldMatrix.Forward) * Math.Sign(Vector3D.Dot(up, controller.WorldMatrix.Forward));

        _rollCos = MyMath.FastCos(_roll);
        _rollSin = MyMath.FastSin(_roll);

        double alt;
        controller.TryGetPlanetElevation(MyPlanetElevation.Surface, out alt);
        _surfaceAltitude = alt;

        controller.TryGetPlanetElevation(MyPlanetElevation.Sealevel, out alt);
        _sealevelAltitude = alt;

        _velocityBuffer.Add((_lastSurfaceAltitude - _surfaceAltitude) * updatesPerSecond);
        double velocitySum = 0;
        for (int i = 0; i &lt; _velocityBuffer.Capacity; ++i)
        {
            velocitySum += _velocityBuffer.MoveNext();
        }
        
        double terrainHeightDerivative = velocitySum / _velocityBuffer.Capacity;
        double timeTillGroundCollision = _surfaceAltitude / (terrainHeightDerivative);
        _collisionTimeProportion = (float)(timeTillGroundCollision / _collisionTimeThreshold);
        CollisionWarning = terrainHeightDerivative &gt; 0 &amp;&amp; _speed &gt; 10 &amp;&amp; timeTillGroundCollision &lt;= _collisionTimeThreshold;
        if (_lastCollisionWarning != CollisionWarning)
            _showPullUp = true;
        else
            _showPullUp = !_showPullUp;

        _lastCollisionWarning = CollisionWarning;
        _lastSurfaceAltitude = _surfaceAltitude;

        Vector3D eastVec = Vector3D.Cross(_gravity, _sunRotationAxis);
        Vector3D northVec = Vector3D.Cross(eastVec, _gravity);
        Vector3D heading = VectorMath.Rejection(controller.WorldMatrix.Forward, _gravity);

        _bearing = MathHelper.ToDegrees(VectorMath.AngleBetween(heading, northVec));
        if (Vector3D.Dot(controller.WorldMatrix.Forward, eastVec) &lt; 0)
            _bearing = 360 - _bearing;
            
        _verticalSpeed = VectorMath.ScalarProjection(_velocity, -_gravity);
    }

    void CalculateSpaceParameters(IMyShipController controller)
    {
        // Flattening axes onto the screen surface
        MatrixD transposedMatrix = MatrixD.Transpose(controller.WorldMatrix);
        Vector3D xTrans = Vector3D.Rotate(Vector3D.UnitX, transposedMatrix);
        Vector3D yTrans = Vector3D.Rotate(Vector3D.UnitY, transposedMatrix);
        Vector3D zTrans = Vector3D.Rotate(Vector3D.UnitZ, transposedMatrix);

        _xAxisFlattened.X = (float)(xTrans.X) * AXIS_LENGTH_SCALE;
        _xAxisFlattened.Y = (float)(-xTrans.Y) * AXIS_LENGTH_SCALE;
        _yAxisFlattened.X = (float)(yTrans.X) * AXIS_LENGTH_SCALE;
        _yAxisFlattened.Y = (float)(-yTrans.Y) * AXIS_LENGTH_SCALE;
        _zAxisFlattened.X = (float)(zTrans.X) * AXIS_LENGTH_SCALE;
        _zAxisFlattened.Y = (float)(-zTrans.Y) * AXIS_LENGTH_SCALE;

        // Getting non-zero sign of vectors for positioning the axis label text
        _xAxisSign = Vector2.SignNonZero(_xAxisFlattened);
        _yAxisSign = Vector2.SignNonZero(_yAxisFlattened);
        _zAxisSign = Vector2.SignNonZero(_zAxisFlattened);

        // Get normalized axis directions for drawing arrow heads
        if (!Vector2.IsZero(ref _xAxisFlattened, MathHelper.EPSILON))
            _xAxisDirn = Vector2.Normalize(_xAxisFlattened);

        if (!Vector2.IsZero(ref _yAxisFlattened, MathHelper.EPSILON))
            _yAxisDirn = Vector2.Normalize(_yAxisFlattened);

        if (!Vector2.IsZero(ref _zAxisFlattened, MathHelper.EPSILON))
            _zAxisDirn = Vector2.Normalize(_zAxisFlattened);

        // Getting the icons for the axes based on if they are pointing at or away from the user
        _axisIcon[0] = GetAxisIcon(xTrans.Z);
        _axisIcon[1] = GetAxisIcon(yTrans.Z);
        _axisIcon[2] = GetAxisIcon(zTrans.Z);

        _axisZCosVector = new Vector3D(xTrans.Z, yTrans.Z, zTrans.Z);
        double max = _axisZCosVector.Max();
        double min = _axisZCosVector.Min();

        // Determining the order to draw the axes so that perspective looks correct.
        AxisEnum usedAxes = AxisEnum.None;
        if (max == _axisZCosVector.X)
        {
            _axisDrawOrder[2] = (byte)AxisEnum.X;
            usedAxes |= AxisEnum.X;
        }
        else if (max == _axisZCosVector.Y)
        {
            _axisDrawOrder[2] = (byte)AxisEnum.Y;
            usedAxes |= AxisEnum.Y;
        }
        else
        {
            _axisDrawOrder[2] = (byte)AxisEnum.Z;
            usedAxes |= AxisEnum.Z;
        }

        if (min == _axisZCosVector.X)
        {
            _axisDrawOrder[0] = (byte)AxisEnum.X;
            usedAxes |= AxisEnum.X;

        }
        else if (min == _axisZCosVector.Y)
        {
            _axisDrawOrder[0] = (byte)AxisEnum.Y;
            usedAxes |= AxisEnum.Y;
        }
        else
        {
            _axisDrawOrder[0] = (byte)AxisEnum.Z;
            usedAxes |= AxisEnum.Z;
        }

        _axisDrawOrder[1] = (byte)MathHelper.Clamp((byte)(ALL_AXIS_ENUMS &amp; ~usedAxes), 0, (byte)ALL_AXIS_ENUMS);
    }

    string GetAxisIcon(double z)
    {
        return z &lt; 0 ? "CircleHollow" : "Circle";
    }
    #endregion

    #region Draw functions
    public void Draw(IMyTextSurface surface, bool clearSpriteCache)
    {
        surface.ContentType = ContentType.SCRIPT;
        surface.Script = "";
        surface.BackgroundAlpha = 0;
        surface.ScriptBackgroundColor = _inGravity ? _groundColor : _spaceBackgroundColor;

        Vector2 surfaceSize = surface.TextureSize;
        Vector2 screenCenter = surfaceSize * 0.5f;
        Vector2 avgViewportSize = surface.SurfaceSize - 12f;

        Vector2 scaleVec = (surfaceSize + avgViewportSize) * 0.5f / 512f;
        float scale = Math.Min(scaleVec.X, scaleVec.Y);
        float minSideLength = Math.Min(avgViewportSize.X, avgViewportSize.Y);
        Vector2 squareViewportSize = new Vector2(minSideLength, minSideLength);
        avgViewportSize = (avgViewportSize + squareViewportSize) * 0.5f;

        using (var frame = surface.DrawFrame())
        {
            if (clearSpriteCache)
            {
                frame.Add(new MySprite());
            }
            
            if (_inGravity)
            {
                DrawArtificialHorizon(frame, screenCenter, scale, minSideLength);
                DrawTextBoxes(frame, surface, screenCenter, avgViewportSize, scale, $"{_speed:n1}", $"{Altitude:0}", $"{_bearing:0}°");
                DrawAltitudeWarning(frame, screenCenter, avgViewportSize, scale, surface);
            }
            else
            {
                DrawSpace(frame, screenCenter, minSideLength * 0.5f, scale);
                DrawTextBoxes(frame, surface, screenCenter, avgViewportSize, scale, $"{_speed:n1}", $"{_acceleration:n1}");
            }

            // Draw orientation indicator
            DrawLine(frame, new Vector2(0, screenCenter.Y), new Vector2(screenCenter.X - 64 * scale, screenCenter.Y), HORIZON_THICKNESS * scale, _orientationColor);
            DrawLine(frame, new Vector2(screenCenter.X + 64 * scale, screenCenter.Y), new Vector2(screenCenter.X * 2f, screenCenter.Y), HORIZON_THICKNESS * scale, _orientationColor);

            Vector2 scaledIconSize = VELOCITY_INDICATOR_SIZE * scale;
            MySprite centerSprite = new MySprite(SpriteType.TEXTURE, "AH_BoreSight", size: scaledIconSize * 1.2f, position: screenCenter + Vector2.UnitY * scaledIconSize * 0.5f, color: _orientationColor);
            centerSprite.RotationOrScale = -MathHelper.PiOver2;
            frame.Add(centerSprite);

            // Draw velocity indicator
            MySprite velocitySprite = new MySprite(SpriteType.TEXTURE, "AH_VelocityVector", size: scaledIconSize, color: !_movingBackwards ? _progradeColor : _retrogradeColor);
            float sign = _movingBackwards ? -1 : 1;
            velocitySprite.Position = screenCenter + (squareViewportSize * 0.5f * _flattenedVelocity * sign);
            frame.Add(velocitySprite);

            if (_movingBackwards)
            {
                Vector2 retrogradeCrossSize = RETROGRADE_CROSS_SIZE * scale;
                MySprite retrograteSprite = new MySprite(SpriteType.TEXTURE, "SquareSimple", size: retrogradeCrossSize, color: _retrogradeColor);
                retrograteSprite.Position = velocitySprite.Position;
                retrograteSprite.RotationOrScale = MathHelper.PiOver4;
                frame.Add(retrograteSprite);
                retrograteSprite.RotationOrScale += MathHelper.PiOver2;
                frame.Add(retrograteSprite);
            }
        }
    }

    void DrawTextBoxes(MySpriteDrawFrame frame, IMyTextSurface surface, Vector2 screenCenter, Vector2 screenSize, float scale, string leftText, string rightText, string topText = "")
    {
        Vector2 boxSize = TEXT_BOX_SIZE * scale;
        float textSize = STATUS_TEXT_SIZE * scale;
        Vector2 leftBoxPos = screenCenter + new Vector2(-0.5f * (screenSize.X - boxSize.X), boxSize.Y * 0.5f);//+ new Vector2(screenSize.X * -0.40f, boxSize.Y * 0.5f);
        Vector2 rightBoxPos = screenCenter + new Vector2(0.5f * (screenSize.X - boxSize.X), boxSize.Y * 0.5f); //+ new Vector2(screenSize.X * 0.40f, boxSize.Y * 0.5f);
        string leftTitle = "SPEED";
        string rightTitle = _inGravity ? "ALT" : "ACCEL";

        DrawTextBox(frame, surface, boxSize, leftBoxPos, _textColor, _textBoxBorderColor, _textBoxBackgroundColor, textSize, leftText, leftTitle);
        DrawTextBox(frame, surface, boxSize, rightBoxPos, _textColor, _textBoxBorderColor, _textBoxBackgroundColor, textSize, rightText, rightTitle);

        if (_inGravity)
        {
            MySprite altMode = MySprite.CreateText(AltitudeLabel, "Debug", _textColor, textSize * 0.75f, TextAlignment.CENTER);
            altMode.Position = screenCenter + new Vector2(0.5f * (screenSize.X - boxSize.X), boxSize.Y * 1.0f);
            frame.Add(altMode);
            
            MySprite verticalSpeedLabel = MySprite.CreateText(VERTICAL_SPEED, "Debug", _textColor, textSize * 0.75f, TextAlignment.CENTER);
            verticalSpeedLabel.Position = screenCenter + new Vector2(-0.5f * (screenSize.X - boxSize.X), boxSize.Y * 1.0f);
            frame.Add(verticalSpeedLabel);
            
            MySprite verticalSpeed = MySprite.CreateText($"{_verticalSpeed:n1}", "Debug", _textColor, textSize * 0.75f, TextAlignment.CENTER);
            verticalSpeed.Position = screenCenter + new Vector2(-0.5f * (screenSize.X - boxSize.X), boxSize.Y * 1.5f);
            frame.Add(verticalSpeed);
        }

        if (!string.IsNullOrWhiteSpace(topText))
        {
            Vector2 topBoxPos = screenCenter + new Vector2(0, screenSize.Y * -0.40f);
            DrawTextBox(frame, surface, boxSize, topBoxPos, _textColor, _textBoxBorderColor, _textBoxBackgroundColor, textSize, topText); //, drawBackground: false);
        }
    }

    void DrawTextBox(MySpriteDrawFrame frame, IMyTextSurface surface, Vector2 size, Vector2 position, Color textColor, Color borderColor, Color backgroundColor, float textSize, string text, string title = "")
    {
        Vector2 measuredTextSize = surface.MeasureStringInPixels(_heightStringBuilder, "Debug", textSize);
        
        Vector2 textPos = position;
        textPos.Y -= measuredTextSize.Y * 0.5f;

        Vector2 titlePos = position;
        titlePos.Y -= (size.Y + measuredTextSize.Y * 0.5f);

        MySprite background = new MySprite(SpriteType.TEXTURE, "SquareSimple", color: backgroundColor, size: size);
        background.Position = position;
        frame.Add(background);

        MySprite perimeter = new MySprite(SpriteType.TEXTURE, "AH_TextBox", color: borderColor, size: size);
        perimeter.Position = position;

        MySprite textSprite = MySprite.CreateText(text, "Debug", textColor, scale: textSize);
        textSprite.Position = textPos;

        frame.Add(perimeter);
        frame.Add(textSprite);

        if (!string.IsNullOrWhiteSpace(title))
        {
            MySprite titleSprite = MySprite.CreateText(title, "Debug", textColor, scale: textSize);
            titleSprite.Position = titlePos;
            frame.Add(titleSprite);
        }
    }

    void DrawArtificialHorizon(MySpriteDrawFrame frame, Vector2 screenCenter, float scale, float minSideLength)
    {
        Vector2 skySpriteSize = screenCenter * 6f;
        _rollOffset.Y = skySpriteSize.Y * 0.5f * (1 - _rollCos);
        _rollOffset.X = skySpriteSize.Y * 0.5f * (_rollSin);
        _pitchOffset.Y = _rollCos * minSideLength * 0.5f;
        _pitchOffset.X = -_rollSin * minSideLength * 0.5f;
        float pitchProportion = _pitch / MathHelper.PiOver2;

        MySprite skySprite = new MySprite(SpriteType.TEXTURE, "SquareSimple", color: _skyColor, size: skySpriteSize);
        skySprite.RotationOrScale = _roll;

        Vector2 skyMidPt = screenCenter + new Vector2(0, -skySpriteSize.Y * 0.5f); //surfaceSize.Y * new Vector2(0.5f, -1f);
        skySprite.Position = skyMidPt + _rollOffset + _pitchOffset * pitchProportion;
        frame.Add(skySprite);

        // Draw horizon line
        MySprite horizonLineSprite = new MySprite(SpriteType.TEXTURE, "SquareSimple", color: _horizonLineColor, size: new Vector2(skySpriteSize.X, HORIZON_THICKNESS * scale));
        horizonLineSprite.RotationOrScale = _roll;
        horizonLineSprite.Position = screenCenter + _pitchOffset * pitchProportion;
        frame.Add(horizonLineSprite);

        for (int i = -90; i &lt;= 90; i += 30)
        {
            if (i == 0)
                continue;
            DrawElevationLadder(frame, screenCenter, ELEVATION_LADDER_SIZE, pitchProportion, i, scale, _elevationLineColor, true);
        }
    }

    void DrawAltitudeWarning(MySpriteDrawFrame frame, Vector2 screenCenter, Vector2 screenSize, float scale, IMyTextSurface surface)
    {
        if (CollisionWarning)
        {
            if (_showPullUp)
            {
                float textSize = PULL_UP_TEXT_SIZE * scale;
                Vector2 textBoxSize = surface.MeasureStringInPixels(_pullUpStringBuilder, "Debug", textSize) + scale * 24f;
                Vector2 textPosition = screenCenter + new Vector2(0, screenSize.Y * 0.25f);
                DrawTextBox(frame, surface, textBoxSize, textPosition, _altitudeWarningColor, _altitudeWarningColor, _textBoxBackgroundColor, textSize, PULL_UP_TEXT);
            }

            Vector2 warningCrossSize = PULL_UP_CROSS_SIZE * scale;
            Vector2 warningCrossPosition = new Vector2(-screenSize.X * 0.5f * _collisionTimeProportion, 0);
            MySprite warningCrossHalf = MySprite.CreateSprite("AH_BoreSight", screenCenter + warningCrossPosition, warningCrossSize);
            warningCrossHalf.Color = _altitudeWarningColor;
            warningCrossHalf.RotationOrScale = 0;

            frame.Add(warningCrossHalf);

            warningCrossHalf.RotationOrScale = MathHelper.Pi;
            warningCrossHalf.Position = screenCenter - warningCrossPosition;

            frame.Add(warningCrossHalf);
        }
    }

    void DrawElevationLadder(MySpriteDrawFrame frame, Vector2 midPoint, Vector2 size, float basePitchProportion, float elevationAngleDeg, float scale, Color color, bool drawText)
    {
        float pitchProportion = MathHelper.ToRadians(-elevationAngleDeg) / MathHelper.PiOver2;
        string textureName = pitchProportion &lt;= 0 ? "AH_GravityHudPositiveDegrees" : "AH_GravityHudNegativeDegrees";
        Vector2 scaledSize = size * scale;

        MySprite ladderSprite = new MySprite(SpriteType.TEXTURE, textureName, color: _elevationLineColor, size: scaledSize);
        ladderSprite.RotationOrScale = _roll + (pitchProportion &lt;= 0 ? MathHelper.Pi : 0);
        ladderSprite.Position = midPoint + (pitchProportion + basePitchProportion) * _pitchOffset;
        frame.Add(ladderSprite);

        if (!drawText)
            return;

        Vector2 textHorizontalOffset = new Vector2(_rollCos, _rollSin) * (scaledSize.X + 48f * scale) * 0.5f;
        Vector2 textVerticalOffset = Vector2.UnitY * -24f * scale * (pitchProportion &lt;= 0 ? 0 : 1);

        MySprite text = MySprite.CreateText($"{elevationAngleDeg}", "Debug", _elevationLineColor);
        text.RotationOrScale = ELEVATION_TEXT_SIZE * scale;
        text.Position = ladderSprite.Position + textHorizontalOffset + textVerticalOffset;
        frame.Add(text);

        text.Position = ladderSprite.Position - textHorizontalOffset + textVerticalOffset;
        frame.Add(text);
    }

    void DrawSpace(MySpriteDrawFrame frame, Vector2 screenCenter, float halfExtent, float scale)
    {
        if (!_showXYZAxis)
            return;

        float textSize = scale * STATUS_TEXT_SIZE;
        float lineSize = scale * AXIS_LINE_WIDTH;
        float offset = scale * AXIS_TEXT_OFFSET;
        Vector2 markerSize = scale * AXIS_MARKER_SIZE;
        Vector2 xPos = screenCenter + _xAxisFlattened * halfExtent;
        Vector2 yPos = screenCenter + _yAxisFlattened * halfExtent;
        Vector2 zPos = screenCenter + _zAxisFlattened * halfExtent;

        MySprite xLine = DrawLine(screenCenter, xPos, lineSize, _xAxisColor);
        MySprite yLine = DrawLine(screenCenter, yPos, lineSize, _yAxisColor);
        MySprite zLine = DrawLine(screenCenter, zPos, lineSize, _zAxisColor);

        MySprite xLabel = MySprite.CreateText("X", "Debug", _xAxisColor, textSize, TextAlignment.CENTER);
        xLabel.Position = xPos + offset * _xAxisSign - Vector2.UnitY * markerSize.Y;

        MySprite yLabel = MySprite.CreateText("Y", "Debug", _yAxisColor, textSize, TextAlignment.CENTER);
        yLabel.Position = yPos + offset * _yAxisSign - Vector2.UnitY * markerSize.Y; ;

        MySprite zLabel = MySprite.CreateText("Z", "Debug", _zAxisColor, textSize, TextAlignment.CENTER);
        zLabel.Position = zPos + offset * _zAxisSign - Vector2.UnitY * markerSize.Y; ;

        foreach (var axis in _axisDrawOrder)
        {
            if (axis == (byte)AxisEnum.X)
            {
                DrawArrowHead(frame, xPos, AXIS_MARKER_SIZE * scale, _xAxisDirn, _axisZCosVector.X, _xAxisColor, _axisArrowBackColor);
                frame.Add(xLine);
                frame.Add(xLabel);
            }
            else if (axis == (byte)AxisEnum.Y)
            {
                DrawArrowHead(frame, yPos, AXIS_MARKER_SIZE * scale, _yAxisDirn, _axisZCosVector.Y, _yAxisColor, _axisArrowBackColor);
                frame.Add(yLine);
                frame.Add(yLabel);
            }
            else
            {
                DrawArrowHead(frame, zPos, AXIS_MARKER_SIZE * scale, _zAxisDirn, _axisZCosVector.Z, _zAxisColor, _axisArrowBackColor);
                frame.Add(zLine);
                frame.Add(zLabel);
            }
        }
    }

    MySprite DrawLine(Vector2 point1, Vector2 point2, float width, Color color)
    {
        Vector2 position = 0.5f * (point1 + point2);
        Vector2 diff = point1 - point2;
        float length = diff.Length();
        if (length &gt; 0)
            diff /= length;

        Vector2 size = new Vector2(length, width);
        float angle = (float)Math.Acos(Vector2.Dot(diff, Vector2.UnitX));
        angle *= Math.Sign(Vector2.Dot(diff, Vector2.UnitY));

        MySprite sprite = MySprite.CreateSprite("SquareSimple", position, size);
        sprite.RotationOrScale = angle;
        sprite.Color = color;
        return sprite;
    }

    void DrawLine(MySpriteDrawFrame frame, Vector2 point1, Vector2 point2, float width, Color color)
    {
        Vector2 position = 0.5f * (point1 + point2);
        Vector2 diff = point1 - point2;
        float length = diff.Length();
        if (length &gt; 0)
            diff /= length;

        Vector2 size = new Vector2(length, width);
        float angle = (float)Math.Acos(Vector2.Dot(diff, Vector2.UnitX));
        angle *= Math.Sign(Vector2.Dot(diff, Vector2.UnitY));

        MySprite sprite = MySprite.CreateSprite("SquareSimple", position, size);
        sprite.RotationOrScale = angle;
        sprite.Color = color;
        frame.Add(sprite);
    }

    void DrawArrowHead(MySpriteDrawFrame frame, Vector2 position, Vector2 arrowSize, Vector2 flattenedDirection, double depthSin, Color color, Color backColor)
    {
        if (Math.Abs(flattenedDirection.LengthSquared() - 1) &lt; MathHelper.EPSILON)
            flattenedDirection.Normalize();

        arrowSize.Y *= (float)Math.Sqrt(1 - depthSin * depthSin);
        Vector2 baseSize = Vector2.One * arrowSize.X;
        baseSize.Y *= (float)Math.Abs(depthSin);

        float angle = (float)Math.Acos(Vector2.Dot(flattenedDirection, -Vector2.UnitY));
        angle *= Math.Sign(Vector2.Dot(flattenedDirection, Vector2.UnitX));

        Vector2 trianglePosition = position + flattenedDirection * arrowSize.Y * 0.5f;

        MySprite circle = MySprite.CreateSprite("Circle", position, baseSize);
        circle.Color = depthSin &gt;= 0 ? color : backColor;
        circle.RotationOrScale = angle;

        MySprite triangle = MySprite.CreateSprite("Triangle", trianglePosition, arrowSize);
        triangle.Color = color;
        triangle.RotationOrScale = angle;

        frame.Add(triangle);
        frame.Add(circle);
    }
    #endregion
}
#endregion

#region Other classes
#region MyIni helper
public static class MyIniHelper
{
    /// &lt;summary&gt;
    /// Adds a Vector3D to a MyIni object
    /// &lt;/summary&gt;
    public static void SetVector3D(string sectionName, string vectorName, ref Vector3D vector, MyIni ini)
    {
        ini.Set(sectionName, vectorName, vector.ToString());
    }

    /// &lt;summary&gt;
    /// Parses a MyIni object for a Vector3D
    /// &lt;/summary&gt;
    public static Vector3D GetVector3D(string sectionName, string vectorName, MyIni ini, Vector3D? defaultVector = null)
    {
        var vector = Vector3D.Zero;
        if (Vector3D.TryParse(ini.Get(sectionName, vectorName).ToString(), out vector))
            return vector;
        else if (defaultVector.HasValue)
            return defaultVector.Value;
        return default(Vector3D);
    }

    /// &lt;summary&gt;
    /// Adds a Color to a MyIni object
    /// &lt;/summary&gt;
    public static void SetColor(string sectionName, string itemName, Color color, MyIni ini)
    {
        string colorString = string.Format("{0}, {1}, {2}, {3}", color.R, color.G, color.B, color.A);
        ini.Set(sectionName, itemName, colorString);
    }

    /// &lt;summary&gt;
    /// Parses a MyIni for a Color
    /// &lt;/summary&gt;
    public static Color GetColor(string sectionName, string itemName, MyIni ini, Color? defaultChar = null)
    {
        string rgbString = ini.Get(sectionName, itemName).ToString("null");
        string[] rgbSplit = rgbString.Split(',');

        int r = 0, g = 0, b = 0, a = 0;
        if (rgbSplit.Length != 4)
        {
            if (defaultChar.HasValue)
                return defaultChar.Value;
            else
                return Color.Transparent;
        }

        int.TryParse(rgbSplit[0].Trim(), out r);
        int.TryParse(rgbSplit[1].Trim(), out g);
        int.TryParse(rgbSplit[2].Trim(), out b);
        bool hasAlpha = int.TryParse(rgbSplit[3].Trim(), out a);
        if (!hasAlpha)
            a = 255;

        r = MathHelper.Clamp(r, 0, 255);
        g = MathHelper.Clamp(g, 0, 255);
        b = MathHelper.Clamp(b, 0, 255);
        a = MathHelper.Clamp(a, 0, 255);

        return new Color(r, g, b, a);
    }
}
#endregion

#region Vector math
public static class VectorMath
{
    /// &lt;summary&gt;
    ///  Normalizes a vector only if it is non-zero and non-unit
    /// &lt;/summary&gt;
    public static Vector3D SafeNormalize(Vector3D a)
    {
        if (Vector3D.IsZero(a))
            return Vector3D.Zero;

        if (Vector3D.IsUnit(ref a))
            return a;

        return Vector3D.Normalize(a);
    }

    /// &lt;summary&gt;
    /// Reflects vector a over vector b with an optional rejection factor
    /// &lt;/summary&gt;
    public static Vector3D Reflection(Vector3D a, Vector3D b, double rejectionFactor = 1) //reflect a over b
    {
        Vector3D project_a = Projection(a, b);
        Vector3D reject_a = a - project_a;
        return project_a - reject_a * rejectionFactor;
    }

    /// &lt;summary&gt;
    /// Rejects vector a on vector b
    /// &lt;/summary&gt;
    public static Vector3D Rejection(Vector3D a, Vector3D b) //reject a on b
    {
        if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
            return Vector3D.Zero;

        return a - a.Dot(b) / b.LengthSquared() * b;
    }

    /// &lt;summary&gt;
    /// Projects vector a onto vector b
    /// &lt;/summary&gt;
    public static Vector3D Projection(Vector3D a, Vector3D b)
    {
        if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
            return Vector3D.Zero;

        if (Vector3D.IsUnit(ref b))
            return a.Dot(b) * b;

        return a.Dot(b) / b.LengthSquared() * b;
    }

    /// &lt;summary&gt;
    /// Scalar projection of a onto b
    /// &lt;/summary&gt;
    public static double ScalarProjection(Vector3D a, Vector3D b)
    {
        if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
            return 0;

        if (Vector3D.IsUnit(ref b))
            return a.Dot(b);

        return a.Dot(b) / b.Length();
    }

    /// &lt;summary&gt;
    /// Computes angle between 2 vectors
    /// &lt;/summary&gt;
    public static double AngleBetween(Vector3D a, Vector3D b) //returns radians
    {
        if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
            return 0;
        else
            return Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1));
    }

    /// &lt;summary&gt;
    /// Computes cosine of the angle between 2 vectors
    /// &lt;/summary&gt;
    public static double CosBetween(Vector3D a, Vector3D b, bool useSmallestAngle = false) //returns radians
    {
        if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
            return 0;
        else
            return MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1);
    }

    /// &lt;summary&gt;
    /// Returns if the normalized dot product between two vectors is greater than the tolerance.
    /// This is helpful for determining if two vectors are "more parallel" than the tolerance.
    /// &lt;/summary&gt;
    public static bool IsDotProductWithinTolerance(Vector3D a, Vector3D b, double tolerance)
    {
        double dot = Vector3D.Dot(a, b);
        double num = a.LengthSquared() * b.LengthSquared() * tolerance * tolerance;
        return dot * dot &gt; num;
    }
}
#endregion

#region Circular Buffer
/// &lt;summary&gt;
/// A simple, generic circular buffer class with a fixed capacity.
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
public class CircularBuffer&lt;T&gt;
{
    public readonly int Capacity;

    T[] _array = null;
    int _setIndex = 0;
    int _getIndex = 0;

    /// &lt;summary&gt;
    /// CircularBuffer ctor.
    /// &lt;/summary&gt;
    /// &lt;param name="capacity"&gt;Capacity of the CircularBuffer.&lt;/param&gt;
    public CircularBuffer(int capacity)
    {
        if (capacity &lt; 1)
            throw new Exception($"Capacity of CircularBuffer ({capacity}) can not be less than 1");
        Capacity = capacity;
        _array = new T[Capacity];
    }

    /// &lt;summary&gt;
    /// Adds an item to the buffer. If the buffer is full, it will overwrite the oldest value.
    /// &lt;/summary&gt;
    /// &lt;param name="item"&gt;&lt;/param&gt;
    public void Add(T item)
    {
        _array[_setIndex] = item;
        _setIndex = ++_setIndex % Capacity;
    }

    /// &lt;summary&gt;
    /// Retrieves the current item in the buffer and increments the buffer index.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public T MoveNext()
    {
        T val = _array[_getIndex];
        _getIndex = ++_getIndex % Capacity;
        return val;
    }

    /// &lt;summary&gt;
    /// Retrieves the current item in the buffer without incrementing the buffer index.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public T Peek()
    {
        return _array[_getIndex];
    }
}
#endregion

#region Scheduler
/// &lt;summary&gt;
/// Class for scheduling actions to occur at specific frequencies. Actions can be updated in parallel or in sequence (queued).
/// &lt;/summary&gt;
public class Scheduler
{
    ScheduledAction _currentlyQueuedAction = null;
    bool _firstRun = true;
    
    readonly bool _ignoreFirstRun;
    readonly List&lt;ScheduledAction&gt; _scheduledActions = new List&lt;ScheduledAction&gt;();
    readonly List&lt;ScheduledAction&gt; _actionsToDispose = new List&lt;ScheduledAction&gt;();
    readonly Queue&lt;ScheduledAction&gt; _queuedActions = new Queue&lt;ScheduledAction&gt;();
    readonly Program _program;
    
    const double RUNTIME_TO_REALTIME = (1.0 / 60.0) / 0.0166666;

    /// &lt;summary&gt;
    /// Constructs a scheduler object with timing based on the runtime of the input program.
    /// &lt;/summary&gt;
    public Scheduler(Program program, bool ignoreFirstRun = false)
    {
        _program = program;
        _ignoreFirstRun = ignoreFirstRun;
    }

    /// &lt;summary&gt;
    /// Updates all ScheduledAcions in the schedule and the queue.
    /// &lt;/summary&gt;
    public void Update()
    {
        double deltaTime = Math.Max(0, _program.Runtime.TimeSinceLastRun.TotalSeconds * RUNTIME_TO_REALTIME);
        
        if (_ignoreFirstRun &amp;&amp; _firstRun)
            deltaTime = 0;

        _firstRun = false;
        _actionsToDispose.Clear();
        foreach (ScheduledAction action in _scheduledActions)
        {
            action.Update(deltaTime);
            if (action.JustRan &amp;&amp; action.DisposeAfterRun)
            {
                _actionsToDispose.Add(action);
            }
        }

        // Remove all actions that we should dispose
        _scheduledActions.RemoveAll((x) =&gt; _actionsToDispose.Contains(x));

        if (_currentlyQueuedAction == null)
        {
            // If queue is not empty, populate current queued action
            if (_queuedActions.Count != 0)
                _currentlyQueuedAction = _queuedActions.Dequeue();
        }

        // If queued action is populated
        if (_currentlyQueuedAction != null)
        {
            _currentlyQueuedAction.Update(deltaTime);
            if (_currentlyQueuedAction.JustRan)
            {
                // Set the queued action to null for the next cycle
                _currentlyQueuedAction = null;
            }
        }
    }

    /// &lt;summary&gt;
    /// Adds an Action to the schedule. All actions are updated each update call.
    /// &lt;/summary&gt;
    public void AddScheduledAction(Action action, double updateFrequency, bool disposeAfterRun = false, double timeOffset = 0)
    {
        ScheduledAction scheduledAction = new ScheduledAction(action, updateFrequency, disposeAfterRun, timeOffset);
        _scheduledActions.Add(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds a ScheduledAction to the schedule. All actions are updated each update call.
    /// &lt;/summary&gt;
    public void AddScheduledAction(ScheduledAction scheduledAction)
    {
        _scheduledActions.Add(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds an Action to the queue. Queue is FIFO.
    /// &lt;/summary&gt;
    public void AddQueuedAction(Action action, double updateInterval)
    {
        if (updateInterval &lt;= 0)
        {
            updateInterval = 0.001; // avoids divide by zero
        }
        ScheduledAction scheduledAction = new ScheduledAction(action, 1.0 / updateInterval, true);
        _queuedActions.Enqueue(scheduledAction);
    }

    /// &lt;summary&gt;
    /// Adds a ScheduledAction to the queue. Queue is FIFO.
    /// &lt;/summary&gt;
    public void AddQueuedAction(ScheduledAction scheduledAction)
    {
        _queuedActions.Enqueue(scheduledAction);
    }
}

public class ScheduledAction
{
    public bool JustRan { get; private set; } = false;
    public bool DisposeAfterRun { get; private set; } = false;
    public double TimeSinceLastRun { get; private set; } = 0;
    public readonly double RunInterval;

    readonly double _runFrequency;
    readonly Action _action;

    /// &lt;summary&gt;
    /// Class for scheduling an action to occur at a specified frequency (in Hz).
    /// &lt;/summary&gt;
    /// &lt;param name="action"&gt;Action to run&lt;/param&gt;
    /// &lt;param name="runFrequency"&gt;How often to run in Hz&lt;/param&gt;
    public ScheduledAction(Action action, double runFrequency, bool removeAfterRun = false, double timeOffset = 0)
    {
        _action = action;
        _runFrequency = runFrequency;
        RunInterval = 1.0 / _runFrequency;
        DisposeAfterRun = removeAfterRun;
        TimeSinceLastRun = timeOffset;
    }

    public void Update(double deltaTime)
    {
        TimeSinceLastRun += deltaTime;

        if (TimeSinceLastRun &gt;= RunInterval)
        {
            _action.Invoke();
            TimeSinceLastRun = 0;

            JustRan = true;
        }
        else
        {
            JustRan = false;
        }
    }
}
#endregion

#region Runtime tracking
/// &lt;summary&gt;
/// Class that tracks runtime history.
/// &lt;/summary&gt;
public class RuntimeTracker
{
    public int Capacity { get; set; }
    public double Sensitivity { get; set; }
    public double MaxRuntime { get; private set; }
    public double MaxInstructions { get; private set; }
    public double AverageRuntime { get; private set; }
    public double AverageInstructions { get; private set; }

    private readonly Queue&lt;double&gt; _runtimes = new Queue&lt;double&gt;();
    private readonly Queue&lt;double&gt; _instructions = new Queue&lt;double&gt;();
    private readonly StringBuilder _sb = new StringBuilder();
    private readonly int _instructionLimit;
    private readonly Program _program;

    public RuntimeTracker(Program program, int capacity = 100, double sensitivity = 0.01)
    {
        _program = program;
        Capacity = capacity;
        Sensitivity = sensitivity;
        _instructionLimit = _program.Runtime.MaxInstructionCount;
    }

    public void AddRuntime()
    {
        double runtime = _program.Runtime.LastRunTimeMs;
        AverageRuntime = Sensitivity * (runtime - AverageRuntime) + AverageRuntime;

        _runtimes.Enqueue(runtime);
        if (_runtimes.Count == Capacity)
        {
            _runtimes.Dequeue();
        }

        MaxRuntime = _runtimes.Max();
    }

    public void AddInstructions()
    {
        double instructions = _program.Runtime.CurrentInstructionCount;
        AverageInstructions = Sensitivity * (instructions - AverageInstructions) + AverageInstructions;

        _instructions.Enqueue(instructions);
        if (_instructions.Count == Capacity)
        {
            _instructions.Dequeue();
        }

        MaxInstructions = _instructions.Max();
    }

    public string Write()
    {
        _sb.Clear();
        _sb.AppendLine("\n_____________________________\nGeneral Runtime Info\n");
        _sb.AppendLine($"Avg instructions: {AverageInstructions:n2}");
        _sb.AppendLine($"Max instructions: {MaxInstructions:n0}");
        _sb.AppendLine($"Avg complexity: {MaxInstructions / _instructionLimit:0.000}%");
        _sb.AppendLine($"Avg runtime: {AverageRuntime:n4} ms");
        _sb.AppendLine($"Max runtime: {MaxRuntime:n4} ms");
        return _sb.ToString();
    }
}
#endregion

#region Running symbol
public class RunningSymbol
{
    int _runningSymbolVariant = 0;
    int _runningSymbolCount = 0;
    int _increment = 1;
    string[] _runningSymbols = new string[] { "−", "\\", "|", "/" };

    public RunningSymbol() { }

    public RunningSymbol(int increment)
    {
        _increment = increment;
    }

    public RunningSymbol(string[] runningSymbols)
    {
        if (runningSymbols.Length != 0)
            _runningSymbols = runningSymbols;
    }

    public RunningSymbol(int increment, string[] runningSymbols)
    {
        _increment = increment;
        if (runningSymbols.Length != 0)
            _runningSymbols = runningSymbols;
    }

    public string Iterate(int ticks = 1)
    {
        if (_runningSymbolCount &gt;= _increment)
        {
            _runningSymbolCount = 0;
            _runningSymbolVariant++;
            _runningSymbolVariant = _runningSymbolVariant++ % _runningSymbols.Length;
        }
        _runningSymbolCount += ticks;

        return this.ToString();
    }

    public override string ToString()
    {
        return _runningSymbols[_runningSymbolVariant];
    }
}
#endregion

#region Script Logging
public static class Log
{
    static StringBuilder _builder = new StringBuilder();
    static List&lt;string&gt; _errorList = new List&lt;string&gt;();
    static List&lt;string&gt; _warningList = new List&lt;string&gt;();
    static List&lt;string&gt; _infoList = new List&lt;string&gt;();
    const int _logWidth = 530; //chars, conservative estimate

    public static void Clear()
    {
        _builder.Clear();
        _errorList.Clear();
        _warningList.Clear();
        _infoList.Clear();
    }

    public static void Error(string text)
    {
        _errorList.Add(text);
    }

    public static void Warning(string text)
    {
        _warningList.Add(text);
    }

    public static void Info(string text)
    {
        _infoList.Add(text);
    }

    public static string Write(bool preserveLog = false)
    {
        if (_errorList.Count != 0 &amp;&amp; _warningList.Count != 0 &amp;&amp; _infoList.Count != 0)
            WriteLine("");

        if (_errorList.Count != 0)
        {
            for (int i = 0; i &lt; _errorList.Count; i++)
            {
                WriteLine("");
                WriteElememt(i + 1, "ERROR", _errorList[i]);
                //if (i &lt; _errorList.Count - 1)
            }
        }

        if (_warningList.Count != 0)
        {
            for (int i = 0; i &lt; _warningList.Count; i++)
            {
                WriteLine("");
                WriteElememt(i + 1, "WARNING", _warningList[i]);
                //if (i &lt; _warningList.Count - 1)
            }
        }

        if (_infoList.Count != 0)
        {
            for (int i = 0; i &lt; _infoList.Count; i++)
            {
                WriteLine("");
                WriteElememt(i + 1, "Info", _infoList[i]);
                //if (i &lt; _infoList.Count - 1)
            }
        }

        string output = _builder.ToString();

        if (!preserveLog)
            Clear();

        return output;
    }

    private static void WriteElememt(int index, string header, string content)
    {
        WriteLine($"{header} {index}:");

        string wrappedContent = TextHelper.WrapText(content, 1, _logWidth);
        string[] wrappedSplit = wrappedContent.Split('\n');

        foreach (var line in wrappedSplit)
        {
            _builder.Append("  ").Append(line).Append('\n');
        }
    }

    private static void WriteLine(string text)
    {
        _builder.Append(text).Append('\n');
    }
}

// Whip's TextHelper Class v2
public class TextHelper
{
    static StringBuilder textSB = new StringBuilder();
    const float adjustedPixelWidth = (512f / 0.778378367f);
    const int monospaceCharWidth = 24 + 1; //accounting for spacer
    const int spaceWidth = 8;

    #region bigass dictionary
    static Dictionary&lt;char, int&gt; _charWidths = new Dictionary&lt;char, int&gt;()
{
{'.', 9},
{'!', 8},
{'?', 18},
{',', 9},
{':', 9},
{';', 9},
{'"', 10},
{'\'', 6},
{'+', 18},
{'-', 10},

{'(', 9},
{')', 9},
{'[', 9},
{']', 9},
{'{', 9},
{'}', 9},

{'\\', 12},
{'/', 14},
{'_', 15},
{'|', 6},

{'~', 18},
{'&lt;', 18},
{'&gt;', 18},
{'=', 18},

{'0', 19},
{'1', 9},
{'2', 19},
{'3', 17},
{'4', 19},
{'5', 19},
{'6', 19},
{'7', 16},
{'8', 19},
{'9', 19},

{'A', 21},
{'B', 21},
{'C', 19},
{'D', 21},
{'E', 18},
{'F', 17},
{'G', 20},
{'H', 20},
{'I', 8},
{'J', 16},
{'K', 17},
{'L', 15},
{'M', 26},
{'N', 21},
{'O', 21},
{'P', 20},
{'Q', 21},
{'R', 21},
{'S', 21},
{'T', 17},
{'U', 20},
{'V', 20},
{'W', 31},
{'X', 19},
{'Y', 20},
{'Z', 19},

{'a', 17},
{'b', 17},
{'c', 16},
{'d', 17},
{'e', 17},
{'f', 9},
{'g', 17},
{'h', 17},
{'i', 8},
{'j', 8},
{'k', 17},
{'l', 8},
{'m', 27},
{'n', 17},
{'o', 17},
{'p', 17},
{'q', 17},
{'r', 10},
{'s', 17},
{'t', 9},
{'u', 17},
{'v', 15},
{'w', 27},
{'x', 15},
{'y', 17},
{'z', 16}
};
    #endregion

    public static int GetWordWidth(string word)
    {
        int wordWidth = 0;
        foreach (char c in word)
        {
            int thisWidth = 0;
            bool contains = _charWidths.TryGetValue(c, out thisWidth);
            if (!contains)
                thisWidth = monospaceCharWidth; //conservative estimate

            wordWidth += (thisWidth + 1);
        }
        return wordWidth;
    }

    public static string WrapText(string text, float fontSize, float pixelWidth = adjustedPixelWidth)
    {
        textSB.Clear();
        var words = text.Split(' ');
        var screenWidth = (pixelWidth / fontSize);
        int currentLineWidth = 0;
        foreach (var word in words)
        {
            if (currentLineWidth == 0)
            {
                textSB.Append($"{word}");
                currentLineWidth += GetWordWidth(word);
                continue;
            }

            currentLineWidth += spaceWidth + GetWordWidth(word);
            if (currentLineWidth &gt; screenWidth) //new line
            {
                currentLineWidth = GetWordWidth(word);
                textSB.Append($"\n{word}");
            }
            else
            {
                textSB.Append($" {word}");
            }
        }

        return textSB.ToString();
    }
}
#endregion
#endregion

#endregion
</Program>
              <Storage />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>96711377589317213</EntityId>
              <Min x="2" y="5" z="1" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Cockpit
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB CarTraSys</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Program>static readonly string VERSION = "Version: 1.71";
#region "Program"
static Program program;
class ControlReader
{
IMyShipController _controller = null;
bool _pressedQ = false;
bool _pressedE = false;
bool _pressedA = false;
bool _pressedD = false;
// bool _pressedS = false;
// bool _pressedW = false;
bool _pressedC = false;
bool _pressedSpace = false;
public event InputChangedHandler inputChangedArgs;
public ControlReader(IMyShipController controller)
{ _controller = controller; }
public void ReadInput()
{
if (!_controller.IsUnderControl)
return;
InputChangedEventArgs arg = new InputChangedEventArgs();
if (!_pressedE &amp;&amp; _controller.RollIndicator &gt; 0)
{ _pressedE = true; arg.Key = PressedKey.E; inputChangedArgs?.Invoke(this, arg); return; }
if (!_pressedQ &amp;&amp; _controller.RollIndicator &lt; 0)
{ _pressedQ = true; arg.Key = PressedKey.Q; inputChangedArgs?.Invoke(this, arg); return; }
if (Math.Abs(_controller.RollIndicator) &lt; 0.01)
{ _pressedE = false; _pressedQ = false; }
if (!_pressedD &amp;&amp; _controller.MoveIndicator.X &gt; 0)
{ _pressedD = true; arg.Key = PressedKey.D; inputChangedArgs?.Invoke(this, arg); return; }
if (!_pressedA &amp;&amp; _controller.MoveIndicator.X &lt; 0)
{ _pressedA = true; arg.Key = PressedKey.A; inputChangedArgs?.Invoke(this, arg); return; }
if (Math.Abs(_controller.MoveIndicator.X) &lt; 0.01)
{ _pressedD = false; _pressedA = false; }
if (_controller.MoveIndicator.Z &lt; 0) // !_pressedW &amp;&amp;
{ arg.Key = PressedKey.W; inputChangedArgs?.Invoke(this, arg); return; } // _pressedW = true;
if (_controller.MoveIndicator.Z &gt; 0)//!_pressedS &amp;&amp;
{ arg.Key = PressedKey.S; inputChangedArgs?.Invoke(this, arg); return; }//_pressedS = true;
//if (Math.Abs(_controller.MoveIndicator.Z) &lt; 0.01)
//{ _pressedS = false; _pressedW = false; }
if (!_pressedC &amp;&amp; _controller.MoveIndicator.Y &lt; 0)
{ _pressedC = true; arg.Key = PressedKey.C; inputChangedArgs?.Invoke(this, arg); return; }
if (!_pressedSpace &amp;&amp; _controller.MoveIndicator.Y &gt; 0)
{ _pressedSpace = true; arg.Key = PressedKey.Space; inputChangedArgs?.Invoke(this, arg); return; }
if (Math.Abs(_controller.MoveIndicator.Y) &lt; 0.01)
{ _pressedC = false; _pressedSpace = false; }
}
}
delegate void InputChangedHandler(object sender, InputChangedEventArgs e);
enum PressedKey { Q, E, A, D, S, W, C, Space };
class InputChangedEventArgs : EventArgs { public PressedKey Key; }
enum ConveyorSystemSize { Small, Big };
#endregion
class Cargo
{
public ConveyorSystemSize Size;
public IMyTerminalBlock Container;
public Cargo(ConveyorSystemSize size, IMyTerminalBlock container)
{ Size = size; Container = container; }
}
static MyFixedPoint GetSpareSpace(IMyTerminalBlock container)
{ return container.GetInventory().MaxVolume - container.GetInventory().CurrentVolume; }
class OrderPosition
{
public string[] NameWords;
public int Amount, Moved;
public int Left { get { return Amount - Moved; } }
public bool Done { get { return Amount - Moved &lt;= 0; } }
public OrderPosition(string[] name, int amount)
{ NameWords = name; Amount = amount; Moved = 0; }
public override string ToString()
{
StringBuilder sb = new StringBuilder();
foreach (string name in NameWords)
sb.Append(name + " ");
sb.Append("- " + Moved.ToString() + '/' + Amount.ToString());
return sb.ToString();
}
}
enum TypeFilter
{ All, Ore, Ingots, Components, Tools, Ammo };
class Order
{
public long CustomerID { get; private set; }
private string
customerName = "Operator",
orderArgument;
public long ConnectorID { get; private set; }
int connecotrNum = 0;
public int ConnectorNum { get { return connecotrNum; } }
public bool Unload { get; private set; } = false;
public bool CheckNames { get; private set; } = false;
public bool GetConnectorByID { get; private set; } = false;
public List&lt;OrderPosition&gt;
PositionsList = new List&lt;OrderPosition&gt;(),
CompletedList = new List&lt;OrderPosition&gt;();
TypeFilter Filter = TypeFilter.All;
// 1734867183641, gather 7127124942 "steel socks, slime rocks"
// 1734867183641, gather 7127124942
// 1734867183641, gather 7127124942 components
//by IGI
public bool TryParseOrder(long customerID, string argument)
{
customerName = customerID + " ID";
CustomerID = customerID;
GetConnectorByID = true;
orderArgument = argument;
return ParseArgument(argument);
}
//by operator
public bool TryParseOrder(string argument)
{
CustomerID = 0;
GetConnectorByID = false;
orderArgument = argument;
if (ParseArgument(argument))
{
connecotrNum--;
return true;
}
return false;
}
public Order() { }
public Order(int connetorNum, TypeFilter filter, bool unload)
{
connecotrNum = connetorNum;
Filter = filter;
Unload = unload;
orderArgument = unload ? "UNLOAD " : "GATHER " + connetorNum + " " + filter.ToString();
}
bool ParseArgument(string argument)
{
string[] words = argument.Split(' ');
switch (words[0].Trim().ToUpper())
{
case "GATHER": Unload = false; break;
case "UNLOAD": Unload = true; break;
default: return false;
}
if (GetConnectorByID)
{
long connectorID;
if (!long.TryParse(words[1], out connectorID))
return false;
ConnectorID = connectorID;
if (!cargoTransferSystem.GetNumFromIdDictionary(connectorID, out connecotrNum))
return false;
}
else
{
int connectorNum;
if (!int.TryParse(words[1], out connectorNum))
return false;
connecotrNum = connectorNum;
}
string[] NamesData = argument.Split('"');
if (NamesData.Length &gt; 1)
{
CheckNames = true;
ParseSubTypes(NamesData[1]);
}
else
{
CheckNames = false;
if (words.Length &gt; 2)
TryParseFilter(words[2]);
else
Filter = TypeFilter.All;
}
return true;
}
void ParseSubTypes(string argument)
{
PositionsList.Clear();
string[] namePairs = argument.Split(',');
for (int i = 0; i &lt; namePairs.Length; i++)
{
string[] orderItem = namePairs[i].Trim().Split('-');
string[] nameSubString = orderItem[0].Split(' ');
for (int p = 0; p &lt; nameSubString.Length; p++)
nameSubString[p] = nameSubString[p].Trim().ToUpper();
int amount = int.MaxValue;
if (orderItem.Length &gt; 1)
if (!int.TryParse(orderItem[1], out amount))
amount = int.MaxValue;
PositionsList.Add(new OrderPosition(nameSubString, amount));
}
}
public int CheckItemType(MyItemType itemType, ref StringBuilder message)
{
var itemInfo = itemType.GetItemInfo();
switch (Filter)
{
case TypeFilter.All:
return 0;
case TypeFilter.Ammo:
if (itemInfo.IsAmmo)
return 0;
break;
case TypeFilter.Components:
if (itemInfo.IsComponent)
return 0;
break;
case TypeFilter.Ingots:
if (itemInfo.IsIngot)
{
message.Append(" ingot");
return 0;
}
break;
case TypeFilter.Ore:
if (itemInfo.IsOre)
{
message.Append(" ore");
return 0;
}
break;
case TypeFilter.Tools:
if (itemInfo.IsTool)
return 0;
break;
}
return -1;
}
public int CheckItemSubtypeID(MyItemType itemType, ref StringBuilder message)
{
for (int i = 0; i &lt; PositionsList.Count; i++)
{
OrderPosition item = PositionsList[i];
string subtypeid = itemType.SubtypeId.ToUpper();
bool success = subtypeid.Contains(item.NameWords[0]);
for (int n = 1; n &lt; item.NameWords.Length &amp;&amp; success; n++)
success &amp;= subtypeid.Contains(item.NameWords[n]);
if (success)
return i;
}
return -1;
}
bool TryParseFilter(string str)
{
switch (str.Trim().ToUpper())
{
case "ALL":
Filter = TypeFilter.All;
break;
case "AMMO":
Filter = TypeFilter.Ammo;
break;
case "COMPONENTS":
Filter = TypeFilter.Components;
break;
case "INGOTS":
Filter = TypeFilter.Ingots;
break;
case "ORE":
Filter = TypeFilter.Ore;
break;
case "TOOLS":
Filter = TypeFilter.Tools;
break;
default:
return false;
}
return true;
}
public void AddToListAsStrings(ref List&lt;string&gt; strList)
{
strList.Add("   Customer: " + customerName);
strList.Add(orderArgument);
}
}
class CargoTransferSystem
{
#region "Fields"
enum SystemState
{
Idle,
Running,
Stop,
Startup,
Transfer,
ShutdownLogo,
Error
};
SystemState state = SystemState.Stop;
enum StartupState
{
GatherContainers,
RemoveDecor,
RemoveConetrollersTrash,
GatherOtherContainers,
GatherConnectors,
RemoveEjectors,
Ready,
ReadData,
MakeSprites
};
StartupState startupState = StartupState.ReadData;
enum TransferState
{
Prepear,
UnloadByType,
UnloadByName,
GatherByType,
GatherByName,
Report,
GetOpContainers,
GetOpAllContainers,
AfterGatherCheck,
Idle,
SortConveyorSystems,
Table
};
TransferState transferState = TransferState.Idle;
enum MessageBoxResult { IterruptTransfer, RemoveOrder };
MessageBoxResult messageBoxResult = MessageBoxResult.IterruptTransfer;
IMyUnicastListener USI = program.IGC.UnicastListener;
const string FONT = "Debug";
const float
FONT_SIZE = 0.45f,
HEADER_SIZE = 0.65f,
BORDER_SIZE = 2f;
int
orderPosition,
mySContainer = 0,
myLContainer = 0,
opSContainer = 0,
opLContainer = 0,
item = 0,
itemCounter = 0,
menu = 0,
connectorNum = 0,
surfaceNumber = 0,
filterInt = 0,
filterSlider = 0,
logSlider = 0,
orderListSlider = 0,
maxContentlines = 0,
block = 0,
gather = 6,
MaxCharsOnSurface = 0;
float
GUIScale = 1.0f,
fontSize = FONT_SIZE,
strHalf = 0,
headerFontSize = HEADER_SIZE,
borderSize = BORDER_SIZE,
progressBarLength = 0,
pBLH = 0;
bool
passBulky = false,
unload = false,
showMessageBox = false;
IMyShipController controller;
public IMyShipController Controller { get { return controller; } }
IMyTextSurface surface;
string
controllerName = "Cockpit",
surfaceProviderName = "Cockpit";
string[] filterNames = { "1 All", "2 Ore", "3 Ingots", "4 Components", "5 Tools", "6 Ammo" };
Vector2
surfaceAdjust = new Vector2(),
surfaceHalf = new Vector2(),
headerPosition = new Vector2();
MySprite[]
headerSprites = new MySprite[3],
statusBorderSprites = new MySprite[2],
contentBorderSprites = new MySprite[2],
standbySprites = new MySprite[4],
connectorMenuSprites = new MySprite[10],
commandsMenuSprites = new MySprite[4],
commandsButtonSprites = new MySprite[3],
connectorsButtonSprites = new MySprite[3],
logButtonSprites = new MySprite[3],
ordersButtonSprites = new MySprite[3],
progressBarSprites = new MySprite[3],
headerProgressBarSprites = new MySprite[3],
filterSprites = new MySprite[1],
contentSprites = new MySprite[1],
messageBox = new MySprite[10];
List&lt;string&gt;
logLines = new List&lt;string&gt;(),
ordersList = new List&lt;string&gt;();
List&lt;Color&gt; logColors = new List&lt;Color&gt;();
StringBuilder message = new StringBuilder();
string lastMessage = "";
MySprite patternLeft, patternRight, patternCenter;
List&lt;IMyShipConnector&gt; connectors = new List&lt;IMyShipConnector&gt;();
Dictionary&lt;long, int&gt; connectorsNumsFomId = new Dictionary&lt;long, int&gt;();
IMyInventory myInventory = null;
List&lt;IMyTerminalBlock&gt;
myContainers = new List&lt;IMyTerminalBlock&gt;(),
opContainers = new List&lt;IMyTerminalBlock&gt;(),
unsortedBlocks = new List&lt;IMyTerminalBlock&gt;();
List&lt;Order&gt; orders = new List&lt;Order&gt;();
Order currentOrder { get { return orders[0]; } }
List&lt;Cargo&gt;
mySCS = new List&lt;Cargo&gt;(),
myLCS = new List&lt;Cargo&gt;(),
opSCS = new List&lt;Cargo&gt;(),
opLCS = new List&lt;Cargo&gt;();
IMyInventory opInventory = null;
Color[] buttonsColor;
Color
colorBlack = new Color(0, 0, 0, 255),
colorBorders = new Color(110, 114, 120, 255),
colorBackground = new Color(37, 46, 53, 255),
colorText = new Color(203, 226, 233, 255),
colorHighlighted = new Color(146, 205, 218, 255),
colorButton = new Color(66, 75, 82, 255),
colorButtonText = new Color(203, 226, 233, 255),
colorInactive = new Color(33, 40, 45, 255),
colorSuccess = new Color(75, 215, 25, 255),
colorWarning = new Color(255, 255, 25, 255),
colorError = new Color(215, 65, 25, 255),
colorShadow = new Color(0, 0, 0, 125);
#endregion
#region "Initializers"
public CargoTransferSystem()
{
ReadData();
InitializeSystems();
program.Me.GetSurface(0).WriteText("", false);
}
void GetFirstWithName&lt;T&gt;(ref T block, string name) where T : class, IMyTerminalBlock
{
List&lt;T&gt; units = new List&lt;T&gt;();
program.GridTerminalSystem.GetBlocksOfType(units);
foreach (T unit in units)
if (unit.CubeGrid == program.Me.CubeGrid &amp;&amp; unit.CustomName.Contains(name))
{
block = unit;
return;
}
}
bool GetContainersFromUnsorted(ref List&lt;IMyTerminalBlock&gt; containers, IMyTerminalBlock target)
{
for (int i = 0; i &lt; 5 &amp;&amp; block &lt; unsortedBlocks.Count; i++, block++)
if (unsortedBlocks[block].IsSameConstructAs(target) &amp;&amp; unsortedBlocks[block].HasInventory)
containers.Add(unsortedBlocks[block]);
if (block &lt; unsortedBlocks.Count)
return false;
block = 0;
return true;
}
bool GetContainersFromUnsorted(ref List&lt;IMyTerminalBlock&gt; containers, IMyTerminalBlock target, string line)
{
for (int i = 0; i &lt; 5 &amp;&amp; block &lt; unsortedBlocks.Count; i++, block++)
if (unsortedBlocks[block].IsSameConstructAs(target) &amp;&amp;
unsortedBlocks[block].HasInventory &amp;&amp;
unsortedBlocks[block].BlockDefinition.SubtypeName.ToLower().Contains(line))
containers.Add(unsortedBlocks[block]);
if (block &lt; unsortedBlocks.Count)
return false;
block = 0;
return true;
}
void InitDictionary()
{
for (int i = 0; i &lt; connectors.Count; i++)
connectorsNumsFomId.Add(connectors[i].GetId(), i);
}
bool GetConnectorsFromUnsorted(ref List&lt;IMyTerminalBlock&gt; containers, ref List&lt;IMyShipConnector&gt; connectors, IMyTerminalBlock target)
{
for (int i = 0; i &lt; 5 &amp;&amp; block &lt; unsortedBlocks.Count; i++, block++)
if (unsortedBlocks[block].IsSameConstructAs(target) &amp;&amp;
unsortedBlocks[block].HasInventory &amp;&amp;
!unsortedBlocks[block].BlockDefinition.SubtypeName.ToLower().Contains("connectorsmall"))
{
connectors.Add(unsortedBlocks[block] as IMyShipConnector);
containers.Add(unsortedBlocks[block]);
}
if (block &lt; unsortedBlocks.Count)
return false;
block = 0;
return true;
}
bool GetOpponentContainersFromUnsorted()
{
for (int i = 0; i &lt; 5 &amp;&amp; block &lt; unsortedBlocks.Count; i++, block++)
if (unsortedBlocks[block].IsSameConstructAs(connectors[currentOrder.ConnectorNum].OtherConnector)
&amp;&amp; unsortedBlocks[block].HasInventory)
opContainers.Add(unsortedBlocks[block]);
if (block &lt; unsortedBlocks.Count)
return false;
block = 0;
return true;
}
bool GatherContainers(ref List&lt;IMyTerminalBlock&gt; containers, ref List&lt;IMyShipConnector&gt; connectors, IMyTerminalBlock target)
{
float A = unsortedBlocks.Count == 0 ? 0 : (float)block / unsortedBlocks.Count;
switch (gather)
{
case 1:
UppdateProgressBar(5f + A, 6);
if (GetContainersFromUnsorted(ref containers, target, "container"))
return true;
break;
case 2:
UppdateProgressBar(4f + A, 6);
if (GetConnectorsFromUnsorted(ref containers, ref connectors, target))
FillUnsortedWith&lt;IMyCargoContainer&gt;();
break;
case 3:
UppdateProgressBar(3f + A, 6);
if (GetContainersFromUnsorted(ref containers, target, "cockpit"))
FillUnsortedWith&lt;IMyShipConnector&gt;();
break;
case 4:
UppdateProgressBar(2f + A, 6);
if (GetContainersFromUnsorted(ref containers, target))
FillUnsortedWith&lt;IMyCockpit&gt;();
break;
case 5:
UppdateProgressBar(1f + A, 6);
if (GetContainersFromUnsorted(ref containers, target))
FillUnsortedWith&lt;IMyShipDrill&gt;();
break;
case 6:
UppdateProgressBar(0f + A, 6);
if (GetContainersFromUnsorted(ref containers, target))
FillUnsortedWith&lt;IMyShipGrinder&gt;();
break;
}
return false;
}
Color ColorFromWords(string[] words)
{
Color returnValue = new Vector3();
try
{ returnValue = new Color(int.Parse(words[1]), int.Parse(words[2]), int.Parse(words[3]), int.Parse(words[4])); }
catch { return new Color(); }
return returnValue;
}
string ColorToString(Color color)
{
return color.R.ToString() + ": " + color.G.ToString() + ": " + color.B.ToString() + ": " + color.A.ToString();
}
void ReadData()
{
if (string.IsNullOrWhiteSpace(program.Me.CustomData))
SaveData();
string[] Lines = program.Me.CustomData.Split('\n');
string[] Words;
try
{
Words = Lines[0].Split(':'); controllerName = Words[1].Trim();
Words = Lines[1].Split(':'); surfaceProviderName = Words[1].Trim();
Words = Lines[2].Split(':'); surfaceNumber = int.Parse(Words[1]);
if (surfaceNumber != 0) surfaceNumber--;
Words = Lines[3].Split(':'); GUIScale = float.Parse(Words[1]);
Words = Lines[4].Split(':'); colorBorders = ColorFromWords(Words);
Words = Lines[5].Split(':'); colorBackground = ColorFromWords(Words);
Words = Lines[6].Split(':'); colorText = ColorFromWords(Words);
Words = Lines[7].Split(':'); colorHighlighted = ColorFromWords(Words);
Words = Lines[8].Split(':'); colorButton = ColorFromWords(Words);
Words = Lines[9].Split(':'); colorButtonText = ColorFromWords(Words);
Words = Lines[10].Split(':'); colorInactive = ColorFromWords(Words);
Words = Lines[11].Split(':'); colorSuccess = ColorFromWords(Words);
Words = Lines[12].Split(':'); colorWarning = ColorFromWords(Words);
Words = Lines[13].Split(':'); colorError = ColorFromWords(Words);
}
catch { SaveData(); }
}
void SaveData()
{
StringBuilder sb = new StringBuilder("");
sb.Append("Controller name: " + controllerName + "\n");
sb.Append("Surface provider name: " + surfaceProviderName + "\n");
sb.Append("Surface number: " + surfaceNumber + "\n");
sb.Append("GIU Scale: " + GUIScale + "\n");
sb.Append("Borders Color: " + ColorToString(colorBorders) + "\n");
sb.Append("Background Color: " + ColorToString(colorBackground) + "\n");
sb.Append("Text Color: " + ColorToString(colorText) + "\n");
sb.Append("Highlighted Color: " + ColorToString(colorHighlighted) + "\n");
sb.Append("Button Color: " + ColorToString(colorButton) + "\n");
sb.Append("Button Text Color: " + ColorToString(colorButtonText) + "\n");
sb.Append("Inactive Color: " + ColorToString(colorInactive) + "\n");
sb.Append("Success Color: " + ColorToString(colorSuccess) + "\n");
sb.Append("Issue Color: " + ColorToString(colorWarning) + "\n");
sb.Append("Error Color: " + ColorToString(colorError) + "\n");
program.Me.CustomData = sb.ToString();
}
void InitializeSystems()
{
GetFirstWithName(ref controller, controllerName);
if (controller == null)
throw new Exception("Controller not found.");
IMyTerminalBlock surfaceProvider = null;
GetFirstWithName(ref surfaceProvider, surfaceProviderName);
if (surfaceProvider == null)
throw new Exception("Surface provider not found.");
IMyTextSurfaceProvider TSP = surfaceProvider as IMyTextSurfaceProvider;
if (TSP.SurfaceCount &gt; 0)
{
surfaceNumber %= TSP.SurfaceCount;
surface = TSP.GetSurface(surfaceNumber);
surfaceAdjust = (surface.TextureSize - surface.SurfaceSize) * 0.5f;
surfaceHalf = surface.SurfaceSize * 0.5f;
surface.ContentType = ContentType.SCRIPT;
surface.Script = "";
surface.ScriptBackgroundColor = colorBlack;
}
else throw new Exception("Surface provider have no surfaces.");
}
#endregion
#region "Make sprites"
void MakeStandBySprites()
{
Vector2 position = surfaceAdjust;
position.Y += surfaceHalf.Y;
position.X += surfaceHalf.X;
Vector2 size = surface.SurfaceSize - 10 * GUIScale;
standbySprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBorders);
size -= borderSize;
standbySprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBackground);
StringBuilder sb = new StringBuilder("Cargo Transfer System");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, headerFontSize);
standbySprites[2] = MySprite.CreateText("Cargo Transfer System", FONT, colorText, headerFontSize, TextAlignment.CENTER);
standbySprites[2].Position = new Vector2(position.X, position.Y - surfaceHalf.Y + 32 * GUIScale - strSize.Y * 0.5f);
standbySprites[3] = MySprite.CreateText("", FONT, colorText, headerFontSize, TextAlignment.CENTER);
standbySprites[3].Position = new Vector2(position.X, position.Y + surfaceHalf.Y - 32 * GUIScale - strSize.Y * 0.5f);
}
void MakeHeaderSprites()
{
headerPosition = surfaceAdjust;
headerPosition.Y += 20 * GUIScale;
headerPosition.X += surfaceHalf.X;
Vector2 size = surface.SurfaceSize - 10 * GUIScale;
headerSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
headerPosition, new Vector2(size.X, 30 * GUIScale), colorBorders);
headerSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
headerPosition, new Vector2(size.X - borderSize, 30 * GUIScale - borderSize), colorBackground);
StringBuilder sb = new StringBuilder(program.Me.CubeGrid.CustomName + " [" + program.Me.GetOwnerFactionTag() + "]");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, headerFontSize);
headerSprites[2] = MySprite.CreateText(sb.ToString(), FONT, colorText, headerFontSize, TextAlignment.CENTER);
headerSprites[2].Position = new Vector2(headerPosition.X, headerPosition.Y - strSize.Y * 0.5f);
}
void MakeStatusBorderSprites()
{
Vector2 position = surfaceAdjust;
position.Y += 52 * GUIScale;
position.X += surfaceHalf.X;
Vector2 size = surface.SurfaceSize - 10 * GUIScale;
statusBorderSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(size.X, 24 * GUIScale), colorBorders);
statusBorderSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(size.X - borderSize, 24 * GUIScale - borderSize), colorBackground);
}
void MakeContentBorderSprites()
{
Vector2 position = surfaceAdjust;
float freespace = (surface.SurfaceSize.Y - 64f * GUIScale);
position.Y += surface.SurfaceSize.Y - freespace * 0.5f;
position.X += surfaceHalf.X;
Vector2 size = surface.SurfaceSize - 10 * GUIScale;
size.Y = freespace - 10 * GUIScale;
contentBorderSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBorders);
size -= borderSize;
contentBorderSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBackground);
StringBuilder sb = new StringBuilder("Test");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, fontSize);
maxContentlines = (int)Math.Floor((freespace - 14) / (strSize.Y + 2));
}
void MakeButtonsSprites()
{
StringBuilder sb = new StringBuilder("connectors");
Vector2
position = surfaceAdjust,
strSize = surface.MeasureStringInPixels(sb, FONT, fontSize),
size = new Vector2(strSize.X + 4, 16 * GUIScale),
borders = size - borderSize;
position.Y += 52 * GUIScale;
float
textHeightPos = position.Y - strHalf,
Xoffset = (surface.SurfaceSize.X - surfaceAdjust.X - 10 * GUIScale - borderSize * 2) * 0.25f;
MySprite
buttonTextPattern = MySprite.CreateText("null", FONT, colorButtonText, fontSize, TextAlignment.CENTER),
buttonBordersPattern = new MySprite(SpriteType.TEXTURE, "SquareSimple", position, size, colorBorders),
buttonBackgroundPattern = new MySprite(SpriteType.TEXTURE, "SquareSimple", position, borders, colorInactive);
// connectors button
position.X += Xoffset * 0.5f + 5 * GUIScale + borderSize;
connectorsButtonSprites[0] = buttonBordersPattern;
connectorsButtonSprites[0].Position = position;
connectorsButtonSprites[1] = buttonBackgroundPattern;
connectorsButtonSprites[1].Position = position;
connectorsButtonSprites[2] = buttonTextPattern;
connectorsButtonSprites[2].Data = sb.ToString();
connectorsButtonSprites[2].Position = new Vector2(position.X, textHeightPos);
// commands button
sb.Clear(); sb.Append("commands");
position.X += Xoffset;
commandsButtonSprites[0] = buttonBordersPattern;
commandsButtonSprites[0].Position = position;
commandsButtonSprites[1] = buttonBackgroundPattern;
commandsButtonSprites[1].Position = position;
commandsButtonSprites[2] = buttonTextPattern;
commandsButtonSprites[2].Data = sb.ToString();
commandsButtonSprites[2].Position = new Vector2(position.X, textHeightPos);
// log button
sb.Clear(); sb.Append("log");
position.X += Xoffset;
logButtonSprites[0] = buttonBordersPattern;
logButtonSprites[0].Position = position;
logButtonSprites[1] = buttonBackgroundPattern;
logButtonSprites[1].Position = position;
logButtonSprites[2] = buttonTextPattern;
logButtonSprites[2].Data = sb.ToString();
logButtonSprites[2].Position = new Vector2(position.X, textHeightPos);
// order list button
sb.Clear(); sb.Append("orders");
position.X += Xoffset;
ordersButtonSprites[0] = buttonBordersPattern;
ordersButtonSprites[0].Position = position;
ordersButtonSprites[1] = buttonBackgroundPattern;
ordersButtonSprites[1].Position = position;
ordersButtonSprites[2] = buttonTextPattern;
ordersButtonSprites[2].Data = sb.ToString();
ordersButtonSprites[2].Position = new Vector2(position.X, textHeightPos);
}
void MakeFilterListSprites()
{
Vector2 position = new Vector2(10, 72);
position *= GUIScale;
position += surfaceAdjust;
StringBuilder sb = new StringBuilder("Test");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, fontSize);
float step = strSize.Y + 2;
position.Y += step * 2;
int maxLines = maxContentlines - 2 &gt;= filterNames.Length ? filterNames.Length : maxContentlines - 2;
filterSprites = new MySprite[maxLines];
for (int i = 0; i &lt; maxLines; i++)
{
MySprite line = patternLeft;
line.Position = new Vector2(position.X, position.Y);
filterSprites[i] = line;
position.Y += step;
}
UppdateFilterList();
}
void MakeCommandsMenuSprites()
{
Vector2 position = new Vector2(10, 72);
position *= GUIScale;
position += surfaceAdjust;
Vector2 positionRight = position;
positionRight.X = surfaceAdjust.X + surface.SurfaceSize.X - 10 * GUIScale;
StringBuilder sb = new StringBuilder("Connector: ");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, fontSize);
float line = strSize.Y + 2;
commandsMenuSprites[0] = patternLeft;
commandsMenuSprites[0].Data = sb.ToString();
commandsMenuSprites[0].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append(connectors[connectorNum].CustomName);
commandsMenuSprites[1] = patternRight;
commandsMenuSprites[1].Data = sb.ToString();
commandsMenuSprites[1].Position = new Vector2(positionRight.X, positionRight.Y);
positionRight.Y = position.Y += line;
sb.Clear(); sb.Append("Transfer state: ");
commandsMenuSprites[2] = patternLeft;
commandsMenuSprites[2].Data = sb.ToString();
commandsMenuSprites[2].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("Unload");
commandsMenuSprites[3] = patternRight;
commandsMenuSprites[3].Data = sb.ToString();
commandsMenuSprites[3].Color = colorWarning;
commandsMenuSprites[3].Position = new Vector2(positionRight.X, positionRight.Y);
}
void MakeConnectorInfoSprites()
{
Vector2 position = new Vector2(10, 72);
position *= GUIScale;
position += surfaceAdjust;
Vector2 positionRight = position;
positionRight.X = surfaceAdjust.X + surface.SurfaceSize.X - 10 * GUIScale;
StringBuilder sb = new StringBuilder("Connector:");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, fontSize);
float line = strSize.Y + 2;
connectorMenuSprites[0] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.LEFT);
connectorMenuSprites[0].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("");
connectorMenuSprites[1] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.RIGHT);
connectorMenuSprites[1].Position = new Vector2(positionRight.X, positionRight.Y);
positionRight.Y = position.Y += line;
sb.Clear(); sb.Append("Status: ");
connectorMenuSprites[2] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.LEFT);
connectorMenuSprites[2].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("");
connectorMenuSprites[3] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.RIGHT);
connectorMenuSprites[3].Position = new Vector2(positionRight.X, positionRight.Y);
//
sb.Clear(); sb.Append("Connected with: ");
positionRight.Y = position.Y += line;
connectorMenuSprites[4] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.LEFT);
connectorMenuSprites[4].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("");
connectorMenuSprites[5] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.RIGHT);
connectorMenuSprites[5].Position = new Vector2(positionRight.X, positionRight.Y);
sb.Clear(); sb.Append("Name: ");
positionRight.Y = position.Y += line;
connectorMenuSprites[6] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.LEFT);
connectorMenuSprites[6].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("");
connectorMenuSprites[7] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.RIGHT);
connectorMenuSprites[7].Position = new Vector2(positionRight.X, positionRight.Y);
sb.Clear(); sb.Append("Faction: ");
positionRight.Y = position.Y += line;
connectorMenuSprites[8] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.LEFT);
connectorMenuSprites[8].Position = new Vector2(position.X, position.Y);
sb.Clear(); sb.Append("");
connectorMenuSprites[9] = MySprite.CreateText(sb.ToString(), FONT, colorText, fontSize, TextAlignment.RIGHT);
connectorMenuSprites[9].Position = new Vector2(positionRight.X, positionRight.Y);
}
void MakeProgressBarSprites()
{
Vector2 position = surfaceAdjust + surface.SurfaceSize * 0.5f;
progressBarLength = surface.SurfaceSize.X - 36 * GUIScale;
pBLH = progressBarLength * 0.5f;
Vector2 size = new Vector2(surface.SurfaceSize.X - 32 * GUIScale, 26 * GUIScale);
progressBarSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBorders);
size -= borderSize;
progressBarSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBackground);
size -= borderSize;
progressBarSprites[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(progressBarLength, size.Y), colorButton);
}
void MakeHeaderProgressBarSprites()
{
Vector2 position = surfaceAdjust + surface.SurfaceSize * 0.5f;
progressBarLength = surface.SurfaceSize.X - 36 * GUIScale;
pBLH = progressBarLength * 0.5f;
position.Y = headerPosition.Y;
Vector2 size = new Vector2(surface.SurfaceSize.X - 32 * GUIScale, 26 * GUIScale);
headerProgressBarSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBorders);
size -= borderSize;
headerProgressBarSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, size, colorBackground);
size -= borderSize;
headerProgressBarSprites[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(progressBarLength, size.Y), colorButton);
}
void MakeLogListSprites()
{
Vector2 position = new Vector2(10, 72);
position *= GUIScale;
position += surfaceAdjust;
StringBuilder sb = new StringBuilder("Test");
Vector2 strSize = surface.MeasureStringInPixels(sb, FONT, fontSize);
float step = strSize.Y + 2;
contentSprites = new MySprite[maxContentlines];
for (int i = 0; i &lt; maxContentlines; i++)
{
MySprite line = patternLeft;
line.Position = new Vector2(position.X, position.Y);
contentSprites[i] = line;
position.Y += step;
}
}
void MakeMessageBoxSprites()
{
StringBuilder sb = new StringBuilder("Test");
//borders
Vector2 position = surfaceAdjust + surfaceHalf;
messageBox[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(192 * GUIScale, 36 * GUIScale), colorBorders);
messageBox[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(188 * GUIScale, 32 * GUIScale), colorBackground);
position.Y -= 7 * GUIScale;
//Message text
messageBox[3] = patternCenter;
messageBox[3].Data = "Test";
messageBox[3].Position = new Vector2(position.X, position.Y - strHalf * GUIScale);
//left button
position.Y += 13 * GUIScale;
position.X -= 68 * GUIScale;
messageBox[4] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(48 * GUIScale, 14 * GUIScale), colorBorders);
messageBox[4].Position = position;
messageBox[5] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(46 * GUIScale, 12 * GUIScale), colorBackground);
messageBox[5].Position = position;
messageBox[6] = patternCenter;
messageBox[6].Data = "No (Q)";
messageBox[6].Position = new Vector2(position.X, position.Y - strHalf);
//Right button
position.X += 136 * GUIScale;
messageBox[7] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(48 * GUIScale, 14 * GUIScale), colorBorders);
messageBox[7].Position = position;
messageBox[8] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(46 * GUIScale, 12 * GUIScale), colorBackground);
messageBox[8].Position = position;
messageBox[9] = patternCenter;
messageBox[9].Data = "Yes (E)";
messageBox[9].Position = new Vector2(position.X, position.Y - strHalf);
//shadow
position = surfaceAdjust + surfaceHalf;
position += 7 * GUIScale;
messageBox[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(192 * GUIScale, 34 * GUIScale), colorShadow);
}
#endregion
#region "Draw"
void DrawStartUp()
{
using (MySpriteDrawFrame frame = surface.DrawFrame())
DrawProgressBar(frame);
}
void DrawPanel()
{
using (MySpriteDrawFrame frame = surface.DrawFrame())
{
DrawHeader(frame);
DrawStatusBorders(frame);
DrawContentBorders(frame);
DrawContent(frame);
DrawButtons(frame);
if(showMessageBox)
DrawMessageBox(frame);
}
}
void DrawStandby()
{
using (MySpriteDrawFrame frame = surface.DrawFrame())
{
DrawLogo(frame);
DrawProgressBar(frame);
}
}
void DrawButtons(MySpriteDrawFrame frame)
{
frame.Add(logButtonSprites[0]);
frame.Add(logButtonSprites[1]);
frame.Add(logButtonSprites[2]);
frame.Add(connectorsButtonSprites[0]);
frame.Add(connectorsButtonSprites[1]);
frame.Add(connectorsButtonSprites[2]);
frame.Add(commandsButtonSprites[0]);
frame.Add(commandsButtonSprites[1]);
frame.Add(commandsButtonSprites[2]);
frame.Add(ordersButtonSprites[0]);
frame.Add(ordersButtonSprites[1]);
frame.Add(ordersButtonSprites[2]);
}
void DrawProgressBar(MySpriteDrawFrame frame)
{
frame.Add(progressBarSprites[0]);
frame.Add(progressBarSprites[1]);
frame.Add(progressBarSprites[2]);
}
void DrawLogo(MySpriteDrawFrame frame)
{
frame.Add(standbySprites[0]);
frame.Add(standbySprites[1]);
frame.Add(standbySprites[2]);
frame.Add(standbySprites[3]);
}
void DrawContent(MySpriteDrawFrame frame)
{
switch (menu)
{
case 0:
UppdateConnectorMenuInfo();
DrawConnectorInfo(frame);
break;
case 1:
UppdateCommandsMenuInfo();
DrawCommands(frame);
break;
case 2:
UppdateLogMenu(frame);
break;
case 3:
UppdateOrdersListMenu(frame);
break;
default:
menu = 0;
break;
}
}
void DrawConnectorInfo(MySpriteDrawFrame frame)
{
frame.Add(connectorMenuSprites[0]);
frame.Add(connectorMenuSprites[1]);
frame.Add(connectorMenuSprites[2]);
frame.Add(connectorMenuSprites[3]);
frame.Add(connectorMenuSprites[4]);
frame.Add(connectorMenuSprites[5]);
frame.Add(connectorMenuSprites[6]);
frame.Add(connectorMenuSprites[7]);
frame.Add(connectorMenuSprites[8]);
frame.Add(connectorMenuSprites[9]);
}
void DrawCommands(MySpriteDrawFrame frame)
{
frame.Add(commandsMenuSprites[0]);
frame.Add(commandsMenuSprites[1]);
frame.Add(commandsMenuSprites[2]);
frame.Add(commandsMenuSprites[3]);
if (connectors[connectorNum].Status == MyShipConnectorStatus.Connected)
for (int i = 0; i &lt; filterSprites.Length; i++)
frame.Add(filterSprites[i]);
}
void DrawHeader(MySpriteDrawFrame frame)
{
frame.Add(headerSprites[0]);
frame.Add(headerSprites[1]);
if (transferState != TransferState.Idle)
DrawHeaderProgressBar(frame);
else frame.Add(headerSprites[2]);
}
void DrawHeaderProgressBar(MySpriteDrawFrame frame)
{
frame.Add(headerProgressBarSprites[0]);
frame.Add(headerProgressBarSprites[1]);
frame.Add(headerProgressBarSprites[2]);
}
void DrawStatusBorders(MySpriteDrawFrame frame)
{
frame.Add(statusBorderSprites[0]);
frame.Add(statusBorderSprites[1]);
}
void DrawContentBorders(MySpriteDrawFrame frame)
{
frame.Add(contentBorderSprites[0]);
frame.Add(contentBorderSprites[1]);
}
private void DrawMessageBox(MySpriteDrawFrame frame)
{
frame.Add(messageBox[0]);
frame.Add(messageBox[1]);
frame.Add(messageBox[2]);
frame.Add(messageBox[3]);
frame.Add(messageBox[4]);
frame.Add(messageBox[5]);
frame.Add(messageBox[6]);
frame.Add(messageBox[7]);
frame.Add(messageBox[8]);
frame.Add(messageBox[9]);
}
#endregion
#region "Uppdate stuff"
void ResizeString(ref string str)
{
int pos = MaxCharsOnSurface;
while (pos &lt; str.Length)
{
pos = str.LastIndexOf(' ', pos);
str = str.Insert(pos, "\n");
pos += MaxCharsOnSurface;
}
/* pos -= pos - str.Length;
pos = str.LastIndexOf(' ', pos);
str.Insert(pos, "\n");*/
str.Trim();
}
void ShowMessageBox(string Message)
{
ResizeString(ref Message);
StringBuilder sb = new StringBuilder(Message);
Vector2 textSize = surface.MeasureStringInPixels(sb, FONT, FONT_SIZE);
Vector2 windowSize = new Vector2(192 * GUIScale, 36 * GUIScale);
//resize window
if (textSize.X &gt; 184 * GUIScale)
windowSize.X = textSize.X + 8 * GUIScale;
if (textSize.Y &gt; 10 * GUIScale)
windowSize.Y = textSize.Y + 24 * GUIScale;
messageBox[0].Size = windowSize;
messageBox[1].Size = windowSize;
messageBox[2].Size = windowSize - 4;
//message
Vector2 position = messageBox[2].Position.Value;
position.Y = position.Y - textSize.Y * 0.5f - 8 * GUIScale;
messageBox[3].Position = position;
messageBox[3].Data = Message;
//move buttons
position = messageBox[2].Position.Value;
position.Y = position.Y + textSize.Y * 0.5f + 1;
position.X -= 68 * GUIScale;
messageBox[4].Position = position;
messageBox[5].Position = position;
messageBox[6].Position = new Vector2(position.X, position.Y - strHalf);
position.X += 136 * GUIScale;
messageBox[7].Position = position;
messageBox[8].Position = position;
messageBox[9].Position = new Vector2(position.X, position.Y - strHalf);
showMessageBox = true;
}
void UppdateProgressBar(float value, float max)
{
Vector2 position = surfaceAdjust + surfaceHalf;
position.X -= pBLH;
position.X += pBLH * value / max;
Vector2 size = new Vector2(1, 22 * GUIScale);
size.X = progressBarLength * value / max;
progressBarSprites[2].Position = position;
progressBarSprites[2].Size = size;
position.Y = headerPosition.Y;
headerProgressBarSprites[2].Position = position;
headerProgressBarSprites[2].Size = size;
}
void UppdateConnectorMenuInfo()
{
StringBuilder sb = new StringBuilder("");
sb = new StringBuilder("Connector: N" + (connectorNum + 1) + "|" + connectors.Count);
connectorMenuSprites[0].Data = sb.ToString();
sb.Clear();
sb.Append(connectors[connectorNum].CustomName);
connectorMenuSprites[1].Data = sb.ToString();
Color color = colorText;
sb.Clear();
if (connectors[connectorNum].IsFunctional)
{
if (!connectors[connectorNum].Enabled)
{
color = colorWarning;
sb.Append("Disabled");
}
else
sb.Append(connectors[connectorNum].Status.ToString());
}
else
{
sb.Append("Damaged!");
color = colorError;
}
connectorMenuSprites[3].Data = sb.ToString();
connectorMenuSprites[3].Color = color;
if (connectors[connectorNum].Status == MyShipConnectorStatus.Connected)
{
string type = "Ship";
if (connectors[connectorNum].OtherConnector.CubeGrid.IsStatic)
type = "Station";
else if (connectors[connectorNum].OtherConnector.CubeGrid.GridSizeEnum == MyCubeSize.Small)
type = "Small " + type;
sb.Clear(); sb.Append(type);
connectorMenuSprites[5].Data = sb.ToString();
sb.Clear(); sb.Append(connectors[connectorNum].OtherConnector.CubeGrid.CustomName);
connectorMenuSprites[7].Data = sb.ToString();
sb.Clear(); sb.Append(connectors[connectorNum].OtherConnector.GetOwnerFactionTag());
connectorMenuSprites[9].Data = sb.ToString();
}
else
{
connectorMenuSprites[5].Data = "";
connectorMenuSprites[7].Data = "";
connectorMenuSprites[9].Data = "";
}
}
void UppdateCommandsMenuInfo()
{
StringBuilder sb;
sb = new StringBuilder("Connector: N" + (connectorNum + 1) + "|" + connectors.Count);
commandsMenuSprites[0].Data = sb.ToString();
sb.Clear(); sb.Append(connectors[connectorNum].CustomName);
commandsMenuSprites[1].Data = sb.ToString();
}
void UppdateLogMenu(MySpriteDrawFrame frame)
{
int i = logLines.Count &gt; maxContentlines ? logLines.Count - maxContentlines - logSlider : 0;
for (int l = 0; l &lt; maxContentlines &amp;&amp; i &lt; logLines.Count; i++, l++)
{
contentSprites[l].Data = logLines[i];
contentSprites[l].Color = logColors[i];
frame.Add(contentSprites[l]);
}
}
void UppdateOrdersListMenu(MySpriteDrawFrame frame)
{
ordersList.Clear();
foreach (Order order in orders)
order.AddToListAsStrings(ref ordersList);
for (int i = 0; i &lt; maxContentlines &amp;&amp; i &lt; ordersList.Count; i++)
{
contentSprites[i].Data = ordersList[i];
contentSprites[i].Color = colorText;
frame.Add(contentSprites[i]);
}
}
void SetButtonsColor()
{
buttonsColor = new Color[] { colorInactive, colorInactive, colorInactive, colorInactive };
buttonsColor[menu] = colorButton;
connectorsButtonSprites[1].Color = buttonsColor[0];
commandsButtonSprites[1].Color = buttonsColor[1];
logButtonSprites[1].Color = buttonsColor[2];
ordersButtonSprites[1].Color = buttonsColor[3];
}
void UppdateTransferStateLine()
{
if (unload) commandsMenuSprites[3].Data = "Unload";
else commandsMenuSprites[3].Data = "Gather";
}
void UppdateFilterList()
{
for (int i = 0; i &lt; filterSprites.Length; i++)
{
filterSprites[i].Color = colorText;
filterSprites[i].Data = filterNames[i + filterSlider];
}
filterSprites[filterInt - filterSlider].Color = colorHighlighted;
}
#endregion
#region "Input"
public bool GetNumFromIdDictionary(long id, out int num)
{
if (connectorsNumsFomId.ContainsKey(id))
{
num = connectorsNumsFomId[id];
return true;
}
num = 0;
return false;
}
void ConnectorsMenuInput(PressedKey Key)
{
switch (Key)
{
case PressedKey.D:
connectorNum++;
connectorNum %= connectors.Count;
break;
case PressedKey.A:
connectorNum--;
if (connectorNum &lt; 0) connectorNum = connectors.Count - 1;
break;
case PressedKey.C:
if (orders.Count &gt; 0 &amp;&amp; currentOrder.ConnectorNum == connectorNum)
{
ShowMessageBox("Are you sure you want to switch lock on this connector?This will interrupt current transfer.");
messageBoxResult = MessageBoxResult.IterruptTransfer;
}
else
connectors[connectorNum].ToggleConnect();
break;
case PressedKey.Space:
if (orders.Count &gt; 0 &amp;&amp; currentOrder.ConnectorNum == connectorNum)
{
ShowMessageBox("Are you sure you want to switch state on this connector?This will interrupt current transfer.");
messageBoxResult = MessageBoxResult.IterruptTransfer;
}
else
connectors[connectorNum].Enabled = !connectors[connectorNum].Enabled;
break;
}
}
void CommandsMenuInput(PressedKey Key)
{
switch (Key)
{
case PressedKey.W:
if (filterInt &gt; 0)
{
if (filterSlider == filterInt)
filterSlider--;
filterInt--;
}
UppdateFilterList();
break;
case PressedKey.S:
if (filterInt &lt; filterNames.Length - 1)
{
filterInt++;
if (filterInt - filterSlider &gt;= filterSprites.Length)
filterSlider++;
}
UppdateFilterList();
break;
case PressedKey.C:
unload = !unload;
UppdateTransferStateLine();
break;
case PressedKey.Space:
orders.Add(new Order(connectorNum, (TypeFilter)filterInt, unload));
program.Storage += "0 " + (unload ? "unload " : "gather ") + (connectorNum - 1) + " " + ((TypeFilter)filterInt).ToString() + '\n';
break;
}
}
void LogMenuInput(PressedKey Key)
{
switch (Key)
{
case PressedKey.C:
if (orders.Count &gt; 0)
{
ShowMessageBox("Are you sure you want to interrupt this transfer!?");
messageBoxResult = MessageBoxResult.IterruptTransfer;
}
break;
case PressedKey.W:
if (logSlider &lt; logLines.Count - maxContentlines)
{
logSlider += maxContentlines;
if (logSlider &gt; logLines.Count - maxContentlines)
logSlider = logLines.Count - maxContentlines;
}
break;
case PressedKey.S:
if (logSlider &gt; 0)
{
logSlider -= maxContentlines;
if (logSlider &lt; 0)
logSlider = 0;
}
break;
}
}
void OrdersListMenuInput(PressedKey Key)
{
switch (Key)
{
case PressedKey.W:
if (orderListSlider &lt; ordersList.Count - maxContentlines)
{
orderListSlider += maxContentlines;
if (orderListSlider &gt; ordersList.Count - maxContentlines)
orderListSlider = ordersList.Count - maxContentlines;
}
break;
case PressedKey.S:
if (orderListSlider &gt; 0)
{
orderListSlider -= maxContentlines;
if (orderListSlider &lt; 0)
orderListSlider = 0;
}
break;
}
}
void Input(PressedKey Key)
{
if (showMessageBox)
{
if (Key == PressedKey.Q)
showMessageBox = false;
if (Key == PressedKey.E)
{
switch (messageBoxResult)
{
case MessageBoxResult.IterruptTransfer:
ReportAndRemoveOrder("Interrupted", "Operator request");
break;
case MessageBoxResult.RemoveOrder:
break;
}
showMessageBox = false;
}
return;
}
if (Key == PressedKey.E)
{
menu++;
menu %= 4;
SetButtonsColor();
return;
}
if (Key == PressedKey.Q)
{
menu--;
if (menu &lt; 0)
menu = 3;
SetButtonsColor();
return;
}
switch (menu)
{
case 0:
ConnectorsMenuInput(Key);
break;
case 1:
CommandsMenuInput(Key);
break;
case 2:
LogMenuInput(Key);
break;
case 3:
OrdersListMenuInput(Key);
break;
default:
menu = 0;
break;
}
}
public void InterGridInput()
{
if (USI.HasPendingMessage)
{
MyIGCMessage message = USI.AcceptMessage();
//unload 13400530330569 "glass boots, golden potato"
string data = message.Data.ToString();
string[] words = data.Split(' ');
switch (words[0].Trim().ToUpper())
{
case "GATHER":
case "UNLOAD":
Order order = new Order();
if (order.TryParseOrder(message.Source, data))
{
orders.Add(order);
program.Storage += message.Source + " " + data + '\n';
}
break;
}
}
}
public void ManualInput(string argument)
{
if (string.IsNullOrWhiteSpace(argument))
return;
string[] words = argument.Split(' ');
//unload 1 "steel plates, copper ore, radiator"
//gather 2 "steel tubes, reinforced glass, ammo box"
//gather 2 ore
//unload 2 tools
switch (words[0].Trim().ToUpper())
{
case "E": Input(PressedKey.E); break;
case "Q": Input(PressedKey.Q); break;
case "A": Input(PressedKey.A); break;
case "D": Input(PressedKey.D); break;
case "W": Input(PressedKey.W); break;
case "S": Input(PressedKey.S); break;
case "SP": Input(PressedKey.Space); break;
case "C": Input(PressedKey.C); break;
case "GATHER":
case "UNLOAD":
Order order = new Order();
if (order.TryParseOrder(argument))
{
orders.Add(order);
program.Storage += "0 " + argument + '\n';
}
break;
}
}
public void MovementInput(object sender, InputChangedEventArgs e)
{ Input(e.Key); }
#endregion
#region "Transfer"
void NewLogEntry(string message, Color color)
{
lastMessage = message;
logLines.Add(message);
logColors.Add(color);
}
void SortConveyorSystems(int maxIterations, ref int number, List&lt;IMyTerminalBlock&gt; containers, ref List&lt;Cargo&gt; SmallConveyorSystem, ref List&lt;Cargo&gt; LargeConveyorSystem)
{
for (int i = 0; i &lt; maxIterations &amp;&amp; number &lt; containers.Count; i++, number++)
{
IMyInventory inventory = containers[number].GetInventory();
if (!inventory.CanTransferItemTo(connectors[currentOrder.ConnectorNum].GetInventory(), MyItemType.MakeTool("WelderItem")))
{
NewLogEntry("Line is damaged, blocked or doesn't exist.", colorWarning);
NewLogEntry(containers[number].CustomName + " -&gt; " + connectors[currentOrder.ConnectorNum].CustomName, colorWarning);
continue;
}
if (inventory.CanTransferItemTo(connectors[currentOrder.ConnectorNum].GetInventory(), MyItemType.MakeComponent("PowerCell")))
{
LargeConveyorSystem.Add(new Cargo(ConveyorSystemSize.Big, containers[number]));
SmallConveyorSystem.Add(new Cargo(ConveyorSystemSize.Big, containers[number]));
}
else
SmallConveyorSystem.Add(new Cargo(ConveyorSystemSize.Small, containers[number]));
}
}
void GetFromListOnlySubtypeId(string SubtypeId, int maxIterations, ref int number, ref List&lt;IMyTerminalBlock&gt; containers)
{
for (int i = 0; i &lt; maxIterations &amp;&amp; number &lt; containers.Count; i++)
{
if (!containers[number].BlockDefinition.SubtypeId.Contains(SubtypeId))
containers.RemoveAt(number);
else
number++;
}
}
List&lt;IMyShipConnector&gt; opConnectors = new List&lt;IMyShipConnector&gt;();
bool PreRunChecks()
{
if (currentOrder.ConnectorNum &lt; 0 || currentOrder.ConnectorNum &gt;= connectors.Count)
{
NewLogEntry("Connector number out of bounds.", colorError);
transferState = TransferState.Report;
return false;
}
return true;
}
void ReportAndRemoveOrder(string status, string message)
{
if (currentOrder.CustomerID != 0)
{
NewLogEntry("Sending report to customer: " + currentOrder.CustomerID, colorText);
if (program.IGC.SendUnicastMessage(currentOrder.CustomerID, "CarTraSys", status.ToUpper() + " " + currentOrder.ConnectorID + " " + message))
NewLogEntry("Success", colorSuccess);
else
NewLogEntry("Failed", colorError);
}
if (currentOrder.CheckNames)
{
NewLogEntry("Order list:", colorText);
foreach (OrderPosition oItem in currentOrder.PositionsList)
NewLogEntry(oItem.ToString(), colorWarning);
foreach (OrderPosition oItem in currentOrder.CompletedList)
NewLogEntry(oItem.ToString(), colorSuccess);
}
NewLogEntry("Transfer: " + status, colorText);
if (!string.IsNullOrWhiteSpace(message))
NewLogEntry(message, colorText);
orders.RemoveAt(0);
program.Storage = program.Storage.Remove(0, program.Storage.IndexOf('\n') + 1);
if (showMessageBox &amp;&amp; messageBoxResult == MessageBoxResult.IterruptTransfer)
showMessageBox = false;
transferState = TransferState.Idle;
}
int Transfer()
{
program.Echo("Transfer: " + transferState.ToString());
switch (transferState)
{
case TransferState.Prepear:
logLines.Clear();
logColors.Clear();
UppdateProgressBar(0, 1);
if (!PreRunChecks())
break;
SetButtonsColor();
if (connectors[currentOrder.ConnectorNum].Status != MyShipConnectorStatus.Connected)
{
ReportAndRemoveOrder("Failed", "Chosen connector isn't connected.");
break;
}
opContainers = new List&lt;IMyTerminalBlock&gt;();
FillUnsortedWith&lt;IMyCargoContainer&gt;();
NewLogEntry("Gathering containers data.", colorText);
if (currentOrder.Unload)
transferState = TransferState.GetOpContainers;
else
{
transferState = TransferState.GetOpAllContainers; gather = 6;
};
break;
// End Prepear
case TransferState.GetOpContainers:
if (GetOpponentContainersFromUnsorted())
transferState = TransferState.AfterGatherCheck;
break;
case TransferState.GetOpAllContainers:
if (GatherContainers(ref opContainers, ref opConnectors, connectors[currentOrder.ConnectorNum].OtherConnector))
transferState = TransferState.AfterGatherCheck;
break;
case TransferState.AfterGatherCheck:
if (opContainers.Count == 0)
{
ReportAndRemoveOrder("Failed", "Cant initialize opponents containers.");
break;
}
NewLogEntry("Separating conveyor lines.", colorText);
opConnectors.Clear();
mySContainer = opSContainer = item = 0;
itemCounter = 1;
mySCS.Clear(); myLCS.Clear();
opSCS.Clear(); opLCS.Clear();
passBulky = false;
transferState = TransferState.SortConveyorSystems;
break;
case TransferState.SortConveyorSystems:
UppdateProgressBar(mySContainer + opSContainer, mySCS.Count + opSCS.Count);
SortConveyorSystems(5, ref mySContainer, myContainers, ref mySCS, ref myLCS);
CheckShipsConnection();
SortConveyorSystems(5, ref opSContainer, opContainers, ref opSCS, ref opLCS);
if (opSContainer &gt;= opContainers.Count &amp;&amp; mySContainer &gt;= myContainers.Count)
{
if (opLCS.Count == 0 || myLCS.Count == 0)
{
NewLogEntry("Can't retrieve or pass large items.", colorWarning);
passBulky = true;
}
mySContainer = myLContainer = opSContainer = opLContainer = item = 0;
NewLogEntry("Transfer: begun.", colorText);
if (currentOrder.Unload)
transferState = currentOrder.CheckNames ? TransferState.UnloadByName : TransferState.UnloadByType;
else
transferState = currentOrder.CheckNames ? TransferState.GatherByName : TransferState.GatherByType;
}
break;
case TransferState.UnloadByName:
UppdateProgressBar(mySContainer + opSContainer, mySCS.Count + opSCS.Count);
Unload(currentOrder.CheckItemSubtypeID);
if (currentOrder.PositionsList.Count == 0)
transferState = TransferState.Report;
break;
case TransferState.UnloadByType:
UppdateProgressBar(mySContainer + opSContainer, mySCS.Count + opSCS.Count);
Unload(currentOrder.CheckItemType);
break;
case TransferState.GatherByName:
UppdateProgressBar(mySContainer + opSContainer, mySCS.Count + opSCS.Count);
Gather(currentOrder.CheckItemSubtypeID);
if (currentOrder.PositionsList.Count == 0)
transferState = TransferState.Report;
break;
case TransferState.GatherByType:
UppdateProgressBar(mySContainer + opSContainer, mySCS.Count + opSCS.Count);
Gather(currentOrder.CheckItemType);
break;
// transfer end
case TransferState.Report:
UppdateProgressBar(1, 1);
ReportAndRemoveOrder("Over", "");
break;
case TransferState.Idle:
break;
}
return 0;
}
void Gather(DelegateCheckItem delegateCheckItem)
{
if (CheckOpponentSystems() != 0)
{ NextOpContainer(); return; }
if (PreTransferChecks() != 0) return;
opInventory = opSCS[opSContainer].Container.GetInventory();
if (opInventory == null || opInventory.ItemCount == 0 || item &gt;= opInventory.ItemCount)
{
NextOpContainer();
return;
}
var itemType = opInventory.GetItemAt(item).Value.Type;
message.Clear();
message.Append(itemCounter + "-" + itemType.SubtypeId);
var itemInfo = itemType.GetItemInfo();
orderPosition = delegateCheckItem.Invoke(itemType, ref message);
if (orderPosition &lt; 0)
{
OpNextItem();
return;
}
if (CheckOpponentSystems() != 0)
{ NextOpContainer(); return; }
bool bulky = !(itemInfo.IsIngot || itemInfo.IsOre || itemInfo.IsTool) &amp;&amp; itemInfo.Size.Length() &gt;= 0.4d;
if (bulky)
{
if (passBulky)
{
OpNextItem();
return;
}
if (opSCS[opSContainer].Size == ConveyorSystemSize.Small)
{
NewLogEntry(message.ToString(), colorWarning);
NewLogEntry("To huge to get from.", colorWarning);
NewLogEntry(opSCS[opSContainer].Container.CustomName, colorWarning);
OpNextItem();
itemCounter++;
return;
}
if (myLContainer &gt;= myLCS.Count)
{
NewLogEntry("No more space for large items.", colorWarning);
passBulky = true;
itemCounter++;
return;
}
// Big
if (CheckContainer(myLCS, myLContainer) != 0)
return;
MoveItem(opSCS, opSContainer, myLCS, myLContainer, NextMyBigContainer, OpNextItem);
}
else
MoveItem(opSCS, opSContainer, mySCS, mySContainer, NextMyContainer, OpNextItem);
}
void Unload(DelegateCheckItem delegateCheckItem)
{
if (PreTransferChecks() != 0) return;
myInventory = mySCS[mySContainer].Container.GetInventory();
if (myInventory == null || myInventory.ItemCount == 0 || item &gt;= myInventory.ItemCount)
{
NextMyContainer();
return;
}
var itemType = myInventory.GetItemAt(item).Value.Type;
var itemInfo = itemType.GetItemInfo();
message.Clear();
message.Append(itemCounter + "-" + itemType.SubtypeId);
orderPosition = delegateCheckItem.Invoke(itemType, ref message);
if (orderPosition &lt; 0)
{
MyNextItem();
return;
}
bool bulky = !(itemInfo.IsIngot || itemInfo.IsOre || itemInfo.IsTool) &amp;&amp; itemInfo.Size.Length() &gt;= 0.4d;
if (bulky)
{
if (passBulky)
{
MyNextItem();
return;
}
if (mySCS[mySContainer].Size == ConveyorSystemSize.Small)
{
NewLogEntry(message.ToString() + ". To large.", colorWarning);
//NewLogEntry("To huge to get from.", WarningColor);
//NewLogEntry(_mySCS[_mySContainer].Container.CustomName, WarningColor);
MyNextItem();
itemCounter++;
return;
}
if (opLContainer &gt;= opLCS.Count)
{
NewLogEntry(message.ToString(), colorWarning);
NewLogEntry("No more space for large items.", colorWarning);
passBulky = true;
itemCounter++;
return;
}
if (CheckContainer(opLCS, opLContainer) != 0) return;
// Big
MoveItem(mySCS, mySContainer, opLCS, opLContainer, NextOpBigContainer, MyNextItem);
}
else
MoveItem(mySCS, mySContainer, opSCS, opSContainer, NextOpContainer, MyNextItem);
}
delegate int DelegateCheckItem(MyItemType itemType, ref StringBuilder message);
delegate void DelegateNextContainer();
delegate void DelegateNextItem();
int CheckOpponentSystems()
{
if (opSCS[opSContainer].Container == null)
{
NewLogEntry("Opponent's container was destroyed!", colorError);
return 202;
}
if (!opSCS[opSContainer].Container.IsFunctional)
{
NewLogEntry("Opponent's container is damaged!", colorWarning);
return 203;
}
if (!connectors[currentOrder.ConnectorNum].OtherConnector.GetInventory().IsConnectedTo(opSCS[opSContainer].Container.GetInventory()))
{
NewLogEntry("Line is damaged, blocked or doesn't exist.", colorWarning);
NewLogEntry(connectors[currentOrder.ConnectorNum].OtherConnector.CustomName + " -&gt; " + opSCS[opSContainer].Container.CustomName, colorWarning);
return 205;
}
return 0;
}
int CheckContainer(List&lt;Cargo&gt; fromConveyor, int fromContainer)
{
if (fromConveyor[fromContainer].Container == null)
{
NewLogEntry("Recipient container was destroyed!", colorError);
return 200;
}
if (!fromConveyor[fromContainer].Container.IsFunctional)
{
NewLogEntry("Recipient container is unfunctional!", colorError);
NewLogEntry(fromConveyor[fromContainer].Container.CustomName, colorWarning);
return 200;
}
return 0;
}
void MoveItem(List&lt;Cargo&gt; fromConveyor, int fromContainer, List&lt;Cargo&gt; toConveyor, int toContainer, DelegateNextContainer delNextContainer, DelegateNextItem delNextItem)
{
IMyInventory
fromInventory = fromConveyor[fromContainer].Container.GetInventory(),
toInventory = toConveyor[toContainer].Container.GetInventory();
MyFixedPoint opSpareSpace = GetSpareSpace(toConveyor[toContainer].Container);
var itemType = fromInventory.GetItemAt(item).Value.Type;
var itemInfo = itemType.GetItemInfo();
// free space of 1 liter volume
if (opSpareSpace &lt; (MyFixedPoint)0.001)
{
delNextContainer.Invoke();
return;
}
MyFixedPoint
itemAmount,
itemStackVolume = fromInventory.GetItemAmount(itemType) * itemInfo.Volume;
if (opSpareSpace &gt; itemStackVolume)
itemAmount = fromInventory.GetItemAmount(itemType);
else
itemAmount = (MyFixedPoint)((float)(itemStackVolume - (itemStackVolume - opSpareSpace)) / itemInfo.Volume);
if (!itemInfo.UsesFractions &amp;&amp; itemAmount &lt; 1)
{
delNextContainer.Invoke();
return;
}
if (currentOrder.CheckNames)
{
if (currentOrder.PositionsList[orderPosition].Left &lt; itemAmount)
itemAmount = currentOrder.PositionsList[orderPosition].Left;
currentOrder.PositionsList[orderPosition].Moved += (int)Math.Floor((double)itemAmount);
if (currentOrder.PositionsList[orderPosition].Done)
{
currentOrder.CompletedList.Add(currentOrder.PositionsList[orderPosition]);
currentOrder.PositionsList.RemoveAt(orderPosition);
}
}
message.Append(":" + Math.Round((double)itemAmount, 2) + " -&gt; ");
if (fromInventory.TransferItemTo(toInventory, item, null, true, itemAmount))
{
NewLogEntry(message.ToString() + "done.", colorSuccess);
}
else
{
NewLogEntry(message.ToString() + "error.", colorError);
NewLogEntry("Cannot transfer this item to opponent's ship.", colorWarning);
delNextItem.Invoke();
}
itemCounter++;
}
int PreTransferChecks()
{
if (connectors[currentOrder.ConnectorNum] == null)
{
ReportAndRemoveOrder("Failed", "Connector is destroyed!");
UppdateProgressBar(1, 1);
return 100;
}
if (!connectors[currentOrder.ConnectorNum].IsFunctional)
{
ReportAndRemoveOrder("Failed", "Connector is unfunctional!");
UppdateProgressBar(1, 1);
return 101;
}
if (CheckShipsConnection() != 0) return 102;
if (mySCS[mySContainer].Container == null)
{
NewLogEntry("Container was destroyed!", colorError);
NextMyContainer();
return 200;
}
if (!mySCS[mySContainer].Container.IsFunctional)
{
NewLogEntry("Container is unfunctional!", colorWarning);
NewLogEntry(mySCS[mySContainer].Container.CustomName, colorWarning);
NextMyContainer();
return 201;
}
if (!mySCS[mySContainer].Container.GetInventory().IsConnectedTo(connectors[currentOrder.ConnectorNum].GetInventory()))
{
NewLogEntry("Line is damaged, blocked or doesn't exist.", colorWarning);
NewLogEntry(mySCS[mySContainer].Container.CustomName + " -&gt; " + connectors[currentOrder.ConnectorNum].CustomName, colorWarning);
NextMyContainer();
return 204;
}
return 0;
}
void MyNextItem()
{
item++;
if (item &gt;= myInventory.ItemCount)
NextMyContainer();
}
void OpNextItem()
{
item++;
if (item &gt;= opInventory.ItemCount)
NextOpContainer();
}
int CheckShipsConnection()
{
if (connectors[currentOrder.ConnectorNum].Status != MyShipConnectorStatus.Connected)
{
UppdateProgressBar(1, 1);
ReportAndRemoveOrder("Failed", "Connection lost!");
return 1;
}
return 0;
}
void NextMyContainer()
{
mySContainer++;
item = 0;
if (mySContainer &gt;= mySCS.Count)
transferState = TransferState.Report;
}
void NextMyBigContainer()
{
myLContainer++;
}
void NextOpContainer()
{
opSContainer++;
if (opSContainer &gt;= opSCS.Count)
transferState = TransferState.Report;
}
void NextOpBigContainer()
{
opLContainer++;
}
#endregion
void FillUnsortedWith&lt;T&gt;() where T : class, IMyTerminalBlock
{
unsortedBlocks.Clear();
program.GridTerminalSystem.GetBlocksOfType&lt;T&gt;(unsortedBlocks);
gather--;
}
public void Startup()
{
switch (startupState)
{
case StartupState.ReadData:
ReadData();
fontSize = FONT_SIZE * GUIScale;
headerFontSize = HEADER_SIZE * GUIScale;
borderSize = BORDER_SIZE * GUIScale;
StringBuilder sb = new StringBuilder("a");
strHalf = surface.MeasureStringInPixels(sb, FONT, fontSize).Y * 0.5f;
float charWidth = surface.MeasureStringInPixels(sb, FONT, fontSize).X;
MaxCharsOnSurface = (int)(surface.SurfaceSize.X / charWidth) - 2;
MakeStandBySprites();
MakeProgressBarSprites();
myContainers.Clear();
FillUnsortedWith&lt;IMyShipWelder&gt;();
gather = 6;
startupState = StartupState.GatherContainers;
UppdateProgressBar(0, 1);
connectors.Clear();
connectorsNumsFomId.Clear();
break;
case StartupState.GatherContainers:
if (GatherContainers(ref myContainers, ref connectors, program.Me))
startupState = StartupState.MakeSprites;
break;
case StartupState.MakeSprites:
UppdateProgressBar(1, 1);
if (connectors.Count == 0)
{
state = SystemState.Error;
standbySprites[3].Data = "Error:\nThis construction lacks of connectors.";
program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
break;
}
InitDictionary();
patternLeft = MySprite.CreateText("", FONT, colorText, fontSize, TextAlignment.LEFT);
patternRight = MySprite.CreateText("", FONT, colorText, fontSize, TextAlignment.RIGHT);
patternCenter = MySprite.CreateText("", FONT, colorText, fontSize, TextAlignment.CENTER);
MakeHeaderSprites();
MakeStatusBorderSprites();
MakeContentBorderSprites();
MakeConnectorInfoSprites();
MakeCommandsMenuSprites();
MakeFilterListSprites();
MakeLogListSprites();
MakeButtonsSprites();
SetButtonsColor();
UppdateTransferStateLine();
MakeHeaderProgressBarSprites();
MakeMessageBoxSprites();
startupState = StartupState.Ready;
break;
case StartupState.Ready:
UppdateProgressBar(1, 1);
ReadStorageForOrders();
state = SystemState.Running;
break;
}
}
bool ReadStorageForOrders()
{
program.Storage = program.Storage.Trim();
if (!string.IsNullOrWhiteSpace(program.Storage))
{
string[] data = program.Storage.Split('\n');
for (int i = 0; i &lt; data.Length - 1; i++)
{
string strID = data[i].Split(' ')[0].Trim();
long ID = long.Parse(strID);
Order order = new Order();
if (order.TryParseOrder(ID, data[i].Remove(0, strID.Length + 1)))
orders.Add(order);
}
return true;
}
return false;
}
void Wakeup()
{
surface.ContentType = ContentType.SCRIPT;
surface.Script = "";
state = SystemState.Startup;
startupState = StartupState.ReadData;
program.Runtime.UpdateFrequency = UpdateFrequency.Update10;
UppdateProgressBar(0, 8);
DrawStartUp();
}
public int Main()
{
program.Echo(VERSION);
program.Echo("Last log: " + lastMessage);
program.Echo("State: " + state.ToString());
try
{
switch (state)
{
case SystemState.Startup:
program.Echo("Startup: " + startupState.ToString());
Startup();
DrawStartUp();
break;
case SystemState.Idle:
if (controller.IsUnderControl || orders.Count &gt; 0)
Wakeup();
break;
case SystemState.Running:
if (orders.Count &gt; 0)
{
state = SystemState.Transfer;
transferState = TransferState.Prepear;
break;
}
if (!controller.IsUnderControl &amp;&amp; transferState == TransferState.Idle)
{
state = SystemState.ShutdownLogo;
standbySprites[3].Data = "Now you can turn off the power.";
using (MySpriteDrawFrame frame = surface.DrawFrame())
DrawLogo(frame);
program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
break;
}
DrawPanel();
break;
case SystemState.Error:
if (!controller.IsUnderControl)
{
state = SystemState.ShutdownLogo;
standbySprites[3].Data = "Now you can turn off the power.";
program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
}
using (MySpriteDrawFrame frame = surface.DrawFrame())
DrawLogo(frame);
break;
case SystemState.Transfer:
if (transferState == TransferState.Idle)
{
if (orders.Count &gt; 0)
{
transferState = TransferState.Prepear;
break;
}
if (controller.IsUnderControl)
{
state = SystemState.Running;
break;
}
state = SystemState.ShutdownLogo;
standbySprites[3].Data = "Now you can turn off the power.";
using (MySpriteDrawFrame frame = surface.DrawFrame())
DrawLogo(frame);
program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
break;
}
Transfer();
DrawPanel();
break;
case SystemState.ShutdownLogo:
// I'm to lazy to make a timer.
state = SystemState.Stop;
break;
case SystemState.Stop:
standbySprites[3].Data = "";
surface.ContentType = ContentType.TEXT_AND_IMAGE;
state = SystemState.Idle;
break;
}
}
catch (Exception e)
{
program.Me.GetSurface(0).WriteText(DateTime.Now.TimeOfDay.ToString(), false);
program.Me.GetSurface(0).WriteText('\n' + e.Message, true);
program.Me.GetSurface(0).WriteText('\n' + e.StackTrace, true);
program.Runtime.UpdateFrequency = UpdateFrequency.None;
program.Echo(e.Message);
}
return 0;
}
}
public Program()
{
program = this;
program.Me.CustomName = "PB CarTraSys";
Runtime.UpdateFrequency = UpdateFrequency.Update100;
cargoTransferSystem = new CargoTransferSystem();
controlReader = new ControlReader(cargoTransferSystem.Controller);
controlReader.inputChangedArgs += cargoTransferSystem.MovementInput;
}
static CargoTransferSystem cargoTransferSystem;
static ControlReader controlReader;
void Main(string argument, UpdateType updateSource)
{
switch (updateSource)
{
case UpdateType.Terminal:
case UpdateType.Trigger:
cargoTransferSystem.ManualInput(argument);
break;
default:
controlReader.ReadInput();
cargoTransferSystem.InterGridInput();
cargoTransferSystem.Main();
break;
}
//Echo("CIC: " + Runtime.CurrentInstructionCount);
}</Program>
              <Storage />
              <TextPanels>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
                <MySerializedTextPanelData>
                  <ChangeInterval>0</ChangeInterval>
                  <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                  <FontSize>1</FontSize>
                  <ShowText>NONE</ShowText>
                  <FontColor>
                    <PackedValue>4294967295</PackedValue>
                    <X>255</X>
                    <Y>255</Y>
                    <Z>255</Z>
                    <R>255</R>
                    <G>255</G>
                    <B>255</B>
                    <A>255</A>
                  </FontColor>
                  <BackgroundColor>
                    <PackedValue>4278190080</PackedValue>
                    <X>0</X>
                    <Y>0</Y>
                    <Z>0</Z>
                    <R>0</R>
                    <G>0</G>
                    <B>0</B>
                    <A>255</A>
                  </BackgroundColor>
                  <CurrentShownTexture>0</CurrentShownTexture>
                  <SelectedScript />
                  <TextPadding>2</TextPadding>
                  <ScriptBackgroundColor>
                    <PackedValue>4288108544</PackedValue>
                    <X>0</X>
                    <Y>88</Y>
                    <Z>151</Z>
                    <R>0</R>
                    <G>88</G>
                    <B>151</B>
                    <A>255</A>
                  </ScriptBackgroundColor>
                  <ScriptForegroundColor>
                    <PackedValue>4294962611</PackedValue>
                    <X>179</X>
                    <Y>237</Y>
                    <Z>255</Z>
                    <R>179</R>
                    <G>237</G>
                    <B>255</B>
                    <A>255</A>
                  </ScriptForegroundColor>
                  <Sprites>
                    <Length>0</Length>
                  </Sprites>
                </MySerializedTextPanelData>
              </TextPanels>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Flat</SubtypeName>
              <EntityId>81626606384590794</EntityId>
              <Min x="-3" y="5" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Flat</SubtypeName>
              <EntityId>93503302969885731</EntityId>
              <Min x="3" y="5" z="1" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Side</SubtypeName>
              <EntityId>121373305488564402</EntityId>
              <Min x="-3" y="6" z="1" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Side</SubtypeName>
              <EntityId>108310373029422183</EntityId>
              <Min x="3" y="6" z="1" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Side</SubtypeName>
              <EntityId>134571431899461200</EntityId>
              <Min x="-3" y="5" z="0" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x1Side</SubtypeName>
              <EntityId>95771239962135923</EntityId>
              <Min x="3" y="5" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockSmallLight</SubtypeName>
              <EntityId>88243204525627873</EntityId>
              <Min x="3" y="4" z="18" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Reverse
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Reverse Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockSmallLight</SubtypeName>
              <EntityId>132929952166608000</EntityId>
              <Min x="-3" y="4" z="18" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Tail
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Tail/Brake Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorGreen>0</ColorGreen>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>4</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>97163736445731331</EntityId>
              <Min x="2" y="3" z="18" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Right
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>133205352977217921</EntityId>
              <Min x="-2" y="3" z="18" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Left
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenter</SubtypeName>
              <EntityId>97781991905999439</EntityId>
              <Min x="0" y="4" z="14" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenter</SubtypeName>
              <EntityId>111617139866841661</EntityId>
              <Min x="0" y="4" z="11" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenter</SubtypeName>
              <EntityId>91771123157323124</EntityId>
              <Min x="0" y="4" z="8" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenter</SubtypeName>
              <EntityId>73506877091806527</EntityId>
              <Min x="0" y="4" z="16" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ShipConnector">
              <SubtypeName>ConnectorMedium</SubtypeName>
              <EntityId>135475600292135830</EntityId>
              <Min x="-1" y="5" z="16" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.122222222" y="-0.1" z="0.26" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <DeformationRatio>0.5</DeformationRatio>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1.152</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>true</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame10</TimerType>
                      <FramesFromLastTrigger>60</FramesFromLastTrigger>
                      <TimerTickInFrames>80</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Control - Connector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <MasterToSlaveTransform xsi:nil="true" />
              <MasterToSlaveGrid xsi:nil="true" />
              <IsMaster>true</IsMaster>
              <TradingEnabled>false</TradingEnabled>
              <AutoUnlockTime>0</AutoUnlockTime>
              <TimeOfConnection>0</TimeOfConnection>
              <IsParkingEnabled>true</IsParkingEnabled>
              <IsPowerTransferOverrideEnabled>false</IsPowerTransferOverrideEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>81834757918539427</EntityId>
              <Min x="-1" y="5" z="13" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.122222222" y="-0.1" z="0.26" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 5</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>101283258222581095</EntityId>
              <Min x="-1" y="5" z="10" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.122222222" y="-0.1" z="0.26" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 6</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CargoContainer">
              <SubtypeName>SmallBlockMediumContainer</SubtypeName>
              <EntityId>130090707927839660</EntityId>
              <Min x="-1" y="5" z="7" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0.122222222" y="-0.1" z="0.26" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>3.375</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Medium Cargo Container 7</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>OffsetSpotlight</SubtypeName>
              <EntityId>122399602419518324</EntityId>
              <Min x="-2" y="3" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Front
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Offset Spotlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>60</ReflectorRadius>
              <ColorRed>0</ColorRed>
              <ColorGreen>0.392156869</ColorGreen>
              <ColorBlue>0.784313738</ColorBlue>
              <Falloff>1.5</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>OffsetSpotlight</SubtypeName>
              <EntityId>137131676275923116</EntityId>
              <Min x="2" y="3" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Front
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Offset Spotlight 2</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>60</ReflectorRadius>
              <ColorRed>0</ColorRed>
              <ColorGreen>0.392156869</ColorGreen>
              <ColorBlue>0.784313738</ColorBlue>
              <Falloff>1.5</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>79395714312294186</EntityId>
              <Min x="-2" y="4" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Left
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>104642209165714582</EntityId>
              <Min x="2" y="4" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Right
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>131990735848717552</EntityId>
              <Min x="-4" y="4" z="5" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Left
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>103006592534312802</EntityId>
              <Min x="4" y="4" z="5" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Right
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>93319846801499723</EntityId>
              <Min x="-4" y="4" z="9" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Left
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>112248060395942449</EntityId>
              <Min x="4" y="4" z="9" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Vehicle Light Control]
Tag=Turn
Direction=Right
---</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Turn Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>false</Enabled>
              <Radius>0.1</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>1</BlinkIntervalSeconds>
              <BlinkLenght>50</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_1</SubtypeName>
              <EntityId>133115986420394980</EntityId>
              <Min x="1" y="2" z="17" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Top 3</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>7</FontSize>
              <PublicDescription>EON-G1-CT</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <Alignment>Align_Center</Alignment>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>25</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_1</SubtypeName>
              <EntityId>105795601612060922</EntityId>
              <Min x="1" y="3" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Corner LCD Flat Top 4</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>false</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>7</FontSize>
              <PublicDescription>EON-G1-CT</PublicDescription>
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor>
                <PackedValue>4294967295</PackedValue>
                <X>255</X>
                <Y>255</Y>
                <Z>255</Z>
                <R>255</R>
                <G>255</G>
                <B>255</B>
                <A>255</A>
              </FontColor>
              <BackgroundColor>
                <PackedValue>4278190080</PackedValue>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
                <R>0</R>
                <G>0</G>
                <B>0</B>
                <A>255</A>
              </BackgroundColor>
              <CurrentShownTexture>0</CurrentShownTexture>
              <Alignment>Align_Center</Alignment>
              <ContentType>TEXT_AND_IMAGE</ContentType>
              <SelectedScript />
              <TextPadding>25</TextPadding>
              <Version>1</Version>
              <ScriptBackgroundColor>
                <PackedValue>4288108544</PackedValue>
                <X>0</X>
                <Y>88</Y>
                <Z>151</Z>
                <R>0</R>
                <G>88</G>
                <B>151</B>
                <A>255</A>
              </ScriptBackgroundColor>
              <ScriptForegroundColor>
                <PackedValue>4294962611</PackedValue>
                <X>179</X>
                <Y>237</Y>
                <Z>255</Z>
                <R>179</R>
                <G>237</G>
                <B>255</B>
                <A>255</A>
              </ScriptForegroundColor>
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex>0</SelectedRotationIndex>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TerminalBlock">
              <SubtypeName>SmallControlPanel</SubtypeName>
              <EntityId>112155321247291702</EntityId>
              <Min x="-4" y="3" z="8" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Access - Control Panel</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TerminalBlock">
              <SubtypeName>SmallControlPanel</SubtypeName>
              <EntityId>110529829841503601</EntityId>
              <Min x="4" y="3" z="8" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <ShareMode>Faction</ShareMode>
              <CustomName>Access - Control Panel</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="0" y="4" z="1" />
              <BoneOffset x="127" y="141" z="153" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="7" z="-1" />
              <BoneOffset x="136" y="126" z="133" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="7" z="1" />
              <BoneOffset x="144" y="127" z="156" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="7" z="0" />
              <BoneOffset x="136" y="125" z="129" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="1" y="4" z="1" />
              <BoneOffset x="128" y="139" z="137" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-2" y="6" z="1" />
              <BoneOffset x="140" y="130" z="105" />
            </BoneInfo>
          </Skeleton>
          <XMirroxPlane x="0" y="2" z="-1" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="2" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="1" y="5" z="1" />
              <EndDirection>Backward</EndDirection>
              <Sections>
                <Section Direction="Right" Length="1" />
                <Section Direction="Forward" Length="1" />
              </Sections>
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="2" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-1" y="5" z="1" />
              <EndDirection>Backward</EndDirection>
              <Sections>
                <Section Direction="Left" Length="1" />
                <Section Direction="Forward" Length="1" />
              </Sections>
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="7" z="4" />
              <StartDirection>Down</StartDirection>
              <EndPosition x="0" y="6" z="4" />
              <EndDirection>Up</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="6" />
              <StartDirection>Down</StartDirection>
              <EndPosition x="0" y="4" z="6" />
              <EndDirection>Up</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="6" />
              <StartDirection>Up</StartDirection>
              <EndPosition x="0" y="6" z="6" />
              <EndDirection>Down</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="5" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="5" z="6" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="3" y="5" z="6" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="0" y="5" z="6" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="-3" y="5" z="6" />
              <StartDirection>Right</StartDirection>
              <EndPosition x="0" y="5" z="6" />
              <EndDirection>Left</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="5" z="2" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="5" z="3" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="10" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="6" z="9" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="13" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="6" z="12" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="6" z="16" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="6" z="15" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>LARGE_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="14" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="2" z="17" />
              <EndDirection>Forward</EndDirection>
              <Sections>
                <Section Direction="Backward" Length="1" />
                <Section Direction="Down" Length="1" />
                <Section Direction="Backward" Length="2" />
              </Sections>
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
              <ConveyorLineConductivity>BACKWARD</ConveyorLineConductivity>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="13" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="3" z="14" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
              <ConveyorLineConductivity>BACKWARD</ConveyorLineConductivity>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="12" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="3" z="11" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="10" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="3" z="9" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="8" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="3" z="7" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="6" />
              <StartDirection>Forward</StartDirection>
              <EndPosition x="0" y="3" z="5" />
              <EndDirection>Backward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="3" z="2" />
              <StartDirection>Backward</StartDirection>
              <EndPosition x="0" y="3" z="4" />
              <EndDirection>Forward</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Light - Turning</Name>
              <Blocks>
                <Vector3I>
                  <X>2</X>
                  <Y>3</Y>
                  <Z>18</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>3</Y>
                  <Z>18</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>4</Y>
                  <Z>-3</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>4</Y>
                  <Z>-3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-4</X>
                  <Y>4</Y>
                  <Z>5</Z>
                </Vector3I>
                <Vector3I>
                  <X>4</X>
                  <Y>4</Y>
                  <Z>5</Z>
                </Vector3I>
                <Vector3I>
                  <X>-4</X>
                  <Y>4</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>4</X>
                  <Y>4</Y>
                  <Z>9</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Drive Assitance - Gyroscopes</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>6</Y>
                  <Z>6</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>6</Y>
                  <Z>6</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Power - Backup Reactors</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>4</Y>
                  <Z>6</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>6</Y>
                  <Z>6</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - Front</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>0</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>0</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - Front Middle</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - Rear</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - Rear Middle</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - All Suspensions</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>0</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>0</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Power - Batteries</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>2</Y>
                  <Z>7</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>2</Y>
                  <Z>7</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Light - Reverse/Tail/Brake</Name>
              <Blocks>
                <Vector3I>
                  <X>-3</X>
                  <Y>4</Y>
                  <Z>18</Z>
                </Vector3I>
                <Vector3I>
                  <X>3</X>
                  <Y>4</Y>
                  <Z>18</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Light - High Distance Spotlights</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>7</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>7</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>7</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Light - Headlights</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>3</Y>
                  <Z>-3</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>3</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels - All Rear</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>14</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>2</Y>
                  <Z>11</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Power - Hydrogen Engines</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>3</Y>
                  <Z>12</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>3</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <Handbrake>true</Handbrake>
          <DisplayName>CM-Eon G1</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>86590322546155112</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>86590322546155112</Name>
          <PositionAndOrientation>
            <Position x="-0.947723388671875" y="-1.982421875" z="0.43011474609375" />
            <Forward x="0.4929171" y="0.432708234" z="0.7548484" />
            <Up x="0.4550292" y="-0.867669" z="0.200246662" />
            <Orientation>
              <X>0.917077541</X>
              <Y>0.190769687</Y>
              <Z>-0.304636478</Z>
              <W>0.172546744</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>100790990975481786</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 3332</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>132934968069642509</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>132934968069642509</Name>
          <PositionAndOrientation>
            <Position x="-2.6915283203125" y="-0.02911376953125" z="-0.87567138671875" />
            <Forward x="-0.4928313" y="-0.432680815" z="-0.754920244" />
            <Up x="-0.455063939" y="0.8676574" z="-0.200218409" />
            <Orientation>
              <X>-0.172529116</X>
              <Y>0.304587543</Y>
              <Z>0.190800965</Z>
              <W>0.9170906</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>79810432239758528</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 1989</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>89768719184559867</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>89768719184559867</Name>
          <PositionAndOrientation>
            <Position x="-1.964111328125" y="0.61590576171875" z="0.26666259765625" />
            <Forward x="-0.492811918" y="-0.4326766" z="-0.754935265" />
            <Up x="-0.455199927" y="0.8676119" z="-0.200106338" />
            <Orientation>
              <X>-0.172500014</X>
              <Y>0.3045917</Y>
              <Z>0.19088687</Z>
              <W>0.9170768</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>114102468810549119</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 9820</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>140293434947280092</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>140293434947280092</Name>
          <PositionAndOrientation>
            <Position x="-0.221221923828125" y="-1.33758544921875" z="1.57318115234375" />
            <Forward x="0.4937162" y="0.4330033" z="0.754157" />
            <Up x="0.4552495" y="-0.867588341" z="0.200096965" />
            <Orientation>
              <X>0.916881263</X>
              <Y>0.190806553</Y>
              <Z>-0.305160254</Z>
              <W>0.172623277</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>76922156085370324</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 7147</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>86112113962732079</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>86112113962732079</Name>
          <PositionAndOrientation>
            <Position x="-2.88690185546875" y="-3.7025146484375" z="-2.61688232421875" />
            <Forward x="0.492288351" y="0.4325604" z="0.755343258" />
            <Up x="0.4551313" y="-0.8676194" z="0.2002295" />
            <Orientation>
              <X>0.917186558</X>
              <Y>0.190893859</Y>
              <Z>-0.304267257</Z>
              <W>0.172481269</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>143045831087206587</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 4249</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>126205723428535590</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>126205723428535590</Name>
          <PositionAndOrientation>
            <Position x="-4.630096435546875" y="-1.74920654296875" z="-3.92315673828125" />
            <Forward x="-0.4922912" y="-0.432546139" z="-0.7553497" />
            <Up x="-0.455123067" y="0.86762625" z="-0.200218931" />
            <Orientation>
              <X>-0.172474056</X>
              <Y>0.304266065</Y>
              <Z>0.190891489</Z>
              <W>0.9171888</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>110052051666077459</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 7929</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>102419225958773933</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>102419225958773933</Name>
          <PositionAndOrientation>
            <Position x="-3.613067626953125" y="-4.3472900390625" z="-3.76019287109375" />
            <Forward x="0.492375016" y="0.4325715" z="0.755280256" />
            <Up x="0.455029517" y="-0.867657542" z="0.200294882" />
            <Orientation>
              <X>0.9171839</X>
              <Y>0.190824419</Y>
              <Z>-0.304306775</Z>
              <W>0.172502622</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>74857459993885601</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 6777</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>89069539994429791</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <Name>89069539994429791</Name>
          <PositionAndOrientation>
            <Position x="-5.35858154296875" y="-2.39459228515625" z="-5.06451416015625" />
            <Forward x="-0.492256641" y="-0.432491273" z="-0.755403638" />
            <Up x="-0.455025584" y="0.86767" z="-0.200250953" />
            <Orientation>
              <X>-0.172463208</X>
              <Y>0.3042279</Y>
              <Z>0.190844014</Z>
              <W>0.9172134</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>123908990955707163</EntityId>
              <ColorMaskHSV x="0" y="-0.8" z="-0.13" />
              <SkinSubtypeId>Clean_Armor</SkinSubtypeId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <DisplayName>Small Grid 278</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <CreatePhysics>false</CreatePhysics>
          <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
      <EnvironmentType>None</EnvironmentType>
    </Prefab>
  </Prefabs>
</Definitions>